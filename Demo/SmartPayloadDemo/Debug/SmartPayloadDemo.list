
SmartPayloadDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ce0  08006f98  08006f98  00016f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c78  08007c78  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007c78  08007c78  00017c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c80  08007c80  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c80  08007c80  00017c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c84  08007c84  00017c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001654  20000070  08007cf8  00020070  2**4
                  ALLOC
 10 ._user_heap_stack 00001004  200016c4  08007cf8  000216c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2b6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b0  00000000  00000000  0002e356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  00030d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  00031820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000206a7  00000000  00000000  000321d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f3fb  00000000  00000000  00052877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bbf93  00000000  00000000  00061c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011dc05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d0  00000000  00000000  0011dc58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f80 	.word	0x08006f80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006f80 	.word	0x08006f80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

	hcan1.Instance = CAN1;
 800056c:	4b19      	ldr	r3, [pc, #100]	; (80005d4 <MX_CAN1_Init+0x6c>)
 800056e:	4a1a      	ldr	r2, [pc, #104]	; (80005d8 <MX_CAN1_Init+0x70>)
 8000570:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 6;
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <MX_CAN1_Init+0x6c>)
 8000574:	2206      	movs	r2, #6
 8000576:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <MX_CAN1_Init+0x6c>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_CAN1_Init+0x6c>)
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <MX_CAN1_Init+0x6c>)
 8000586:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800058a:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <MX_CAN1_Init+0x6c>)
 800058e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000592:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_CAN1_Init+0x6c>)
 8000596:	2200      	movs	r2, #0
 8000598:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <MX_CAN1_Init+0x6c>)
 800059c:	2200      	movs	r2, #0
 800059e:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_CAN1_Init+0x6c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_CAN1_Init+0x6c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_CAN1_Init+0x6c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <MX_CAN1_Init+0x6c>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <MX_CAN1_Init+0x6c>)
 80005ba:	f002 f8e7 	bl	800278c <HAL_CAN_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 80005c4:	f000 facc 	bl	8000b60 <Error_Handler>
	}
	user_Init(&hcan1);
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <MX_CAN1_Init+0x6c>)
 80005ca:	f000 f91d 	bl	8000808 <user_Init>

}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	200014d4 	.word	0x200014d4
 80005d8:	40006400 	.word	0x40006400

080005dc <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

	hcan2.Instance = CAN2;
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_CAN2_Init+0x64>)
 80005e2:	4a18      	ldr	r2, [pc, #96]	; (8000644 <MX_CAN2_Init+0x68>)
 80005e4:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 6;
 80005e6:	4b16      	ldr	r3, [pc, #88]	; (8000640 <MX_CAN2_Init+0x64>)
 80005e8:	2206      	movs	r2, #6
 80005ea:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_CAN2_Init+0x64>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <MX_CAN2_Init+0x64>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_CAN2_Init+0x64>)
 80005fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005fe:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_CAN2_Init+0x64>)
 8000602:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000606:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <MX_CAN2_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_CAN2_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <MX_CAN2_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 800061a:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_CAN2_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <MX_CAN2_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_CAN2_Init+0x64>)
 8000628:	2200      	movs	r2, #0
 800062a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <MX_CAN2_Init+0x64>)
 800062e:	f002 f8ad 	bl	800278c <HAL_CAN_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_CAN2_Init+0x60>
	{
		Error_Handler();
 8000638:	f000 fa92 	bl	8000b60 <Error_Handler>
	}

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	200014ac 	.word	0x200014ac
 8000644:	40006800 	.word	0x40006800

08000648 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08c      	sub	sp, #48	; 0x30
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (canHandle->Instance == CAN1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a62      	ldr	r2, [pc, #392]	; (80007f0 <HAL_CAN_MspInit+0x1a8>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d156      	bne.n	8000718 <HAL_CAN_MspInit+0xd0>
	{
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 800066a:	4b62      	ldr	r3, [pc, #392]	; (80007f4 <HAL_CAN_MspInit+0x1ac>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	4a60      	ldr	r2, [pc, #384]	; (80007f4 <HAL_CAN_MspInit+0x1ac>)
 8000672:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 8000674:	4b5f      	ldr	r3, [pc, #380]	; (80007f4 <HAL_CAN_MspInit+0x1ac>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d10d      	bne.n	8000698 <HAL_CAN_MspInit+0x50>
		{
			__HAL_RCC_CAN1_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
 8000680:	4b5d      	ldr	r3, [pc, #372]	; (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a5c      	ldr	r2, [pc, #368]	; (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000686:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b5a      	ldr	r3, [pc, #360]	; (80007f8 <HAL_CAN_MspInit+0x1b0>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000694:	61bb      	str	r3, [r7, #24]
 8000696:	69bb      	ldr	r3, [r7, #24]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	4b56      	ldr	r3, [pc, #344]	; (80007f8 <HAL_CAN_MspInit+0x1b0>)
 800069e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a0:	4a55      	ldr	r2, [pc, #340]	; (80007f8 <HAL_CAN_MspInit+0x1b0>)
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	6313      	str	r3, [r2, #48]	; 0x30
 80006a8:	4b53      	ldr	r3, [pc, #332]	; (80007f8 <HAL_CAN_MspInit+0x1b0>)
 80006aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	697b      	ldr	r3, [r7, #20]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80006b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006b8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	2302      	movs	r3, #2
 80006bc:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006c6:	2309      	movs	r3, #9
 80006c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	484a      	ldr	r0, [pc, #296]	; (80007fc <HAL_CAN_MspInit+0x1b4>)
 80006d2:	f003 fa45 	bl	8003b60 <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	2013      	movs	r0, #19
 80006dc:	f003 f9ce 	bl	8003a7c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80006e0:	2013      	movs	r0, #19
 80006e2:	f003 f9f7 	bl	8003ad4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2014      	movs	r0, #20
 80006ec:	f003 f9c6 	bl	8003a7c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006f0:	2014      	movs	r0, #20
 80006f2:	f003 f9ef 	bl	8003ad4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2015      	movs	r0, #21
 80006fc:	f003 f9be 	bl	8003a7c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000700:	2015      	movs	r0, #21
 8000702:	f003 f9e7 	bl	8003ad4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2016      	movs	r0, #22
 800070c:	f003 f9b6 	bl	8003a7c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000710:	2016      	movs	r0, #22
 8000712:	f003 f9df 	bl	8003ad4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 8000716:	e067      	b.n	80007e8 <HAL_CAN_MspInit+0x1a0>
	else if (canHandle->Instance == CAN2)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a38      	ldr	r2, [pc, #224]	; (8000800 <HAL_CAN_MspInit+0x1b8>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d162      	bne.n	80007e8 <HAL_CAN_MspInit+0x1a0>
		__HAL_RCC_CAN2_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a33      	ldr	r2, [pc, #204]	; (80007f8 <HAL_CAN_MspInit+0x1b0>)
 800072c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
 8000732:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
		HAL_RCC_CAN1_CLK_ENABLED++;
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <HAL_CAN_MspInit+0x1ac>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	4a2b      	ldr	r2, [pc, #172]	; (80007f4 <HAL_CAN_MspInit+0x1ac>)
 8000746:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 8000748:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <HAL_CAN_MspInit+0x1ac>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d10d      	bne.n	800076c <HAL_CAN_MspInit+0x124>
			__HAL_RCC_CAN1_CLK_ENABLE();
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	4b28      	ldr	r3, [pc, #160]	; (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	4a27      	ldr	r2, [pc, #156]	; (80007f8 <HAL_CAN_MspInit+0x1b0>)
 800075a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800075e:	6413      	str	r3, [r2, #64]	; 0x40
 8000760:	4b25      	ldr	r3, [pc, #148]	; (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000774:	4a20      	ldr	r2, [pc, #128]	; (80007f8 <HAL_CAN_MspInit+0x1b0>)
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	6313      	str	r3, [r2, #48]	; 0x30
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <HAL_CAN_MspInit+0x1b0>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000780:	f003 0302 	and.w	r3, r3, #2
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8000788:	2360      	movs	r3, #96	; 0x60
 800078a:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000794:	2303      	movs	r3, #3
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000798:	2309      	movs	r3, #9
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4818      	ldr	r0, [pc, #96]	; (8000804 <HAL_CAN_MspInit+0x1bc>)
 80007a4:	f003 f9dc 	bl	8003b60 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2100      	movs	r1, #0
 80007ac:	203f      	movs	r0, #63	; 0x3f
 80007ae:	f003 f965 	bl	8003a7c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80007b2:	203f      	movs	r0, #63	; 0x3f
 80007b4:	f003 f98e 	bl	8003ad4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	2040      	movs	r0, #64	; 0x40
 80007be:	f003 f95d 	bl	8003a7c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80007c2:	2040      	movs	r0, #64	; 0x40
 80007c4:	f003 f986 	bl	8003ad4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2100      	movs	r1, #0
 80007cc:	2041      	movs	r0, #65	; 0x41
 80007ce:	f003 f955 	bl	8003a7c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80007d2:	2041      	movs	r0, #65	; 0x41
 80007d4:	f003 f97e 	bl	8003ad4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2100      	movs	r1, #0
 80007dc:	2042      	movs	r0, #66	; 0x42
 80007de:	f003 f94d 	bl	8003a7c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 80007e2:	2042      	movs	r0, #66	; 0x42
 80007e4:	f003 f976 	bl	8003ad4 <HAL_NVIC_EnableIRQ>
}
 80007e8:	bf00      	nop
 80007ea:	3730      	adds	r7, #48	; 0x30
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40006400 	.word	0x40006400
 80007f4:	2000008c 	.word	0x2000008c
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020000 	.word	0x40020000
 8000800:	40006800 	.word	0x40006800
 8000804:	40020400 	.word	0x40020400

08000808 <user_Init>:
	}
}

/* USER CODE BEGIN 1 */
static void user_Init(CAN_HandleTypeDef *hcan)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08e      	sub	sp, #56	; 0x38
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef filterConfig;
	HAL_StatusTypeDef HAL_Status;

	uint32_t filterId;

	filterId = DEVICE_ID & 0x3ff;
 8000810:	2301      	movs	r3, #1
 8000812:	637b      	str	r3, [r7, #52]	; 0x34

	filterConfig.FilterIdHigh = (filterId) << 5;
 8000814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000816:	015b      	lsls	r3, r3, #5
 8000818:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterIdLow = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMaskIdHigh = (filterId) << 5;
 800081e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000820:	015b      	lsls	r3, r3, #5
 8000822:	613b      	str	r3, [r7, #16]
	filterConfig.FilterMaskIdLow = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterBank = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000834:	2301      	movs	r3, #1
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
	filterConfig.FilterActivation = ENABLE;
 8000838:	2301      	movs	r3, #1
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
	filterConfig.SlaveStartFilterBank = 14;
 800083c:	230e      	movs	r3, #14
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_Status = HAL_CAN_ConfigFilter(hcan, &filterConfig);
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	4619      	mov	r1, r3
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f002 f9bc 	bl	8002bc4 <HAL_CAN_ConfigFilter>
 800084c:	4603      	mov	r3, r0
 800084e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_Status = HAL_CAN_Start(hcan);
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f002 fb04 	bl	8002e60 <HAL_CAN_Start>
 8000858:	4603      	mov	r3, r0
 800085a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if (HAL_Status != HAL_OK)
 800085e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <user_Init+0x62>
	{
		Error_Handler();
 8000866:	f000 f97b 	bl	8000b60 <Error_Handler>
	}
	HAL_Status = HAL_CAN_ActivateNotification(hcan,
 800086a:	2103      	movs	r1, #3
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f002 fdb3 	bl	80033d8 <HAL_CAN_ActivateNotification>
 8000872:	4603      	mov	r3, r0
 8000874:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY);
	if (HAL_Status != HAL_OK)
 8000878:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <user_Init+0x7c>
	{
		Error_Handler();
 8000880:	f000 f96e 	bl	8000b60 <Error_Handler>
	}
}
 8000884:	bf00      	nop
 8000886:	3738      	adds	r7, #56	; 0x38
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <g_generate_crc>:
		0xce, 0x9d, 0xac };
/**
 *
 */
uint8_t g_generate_crc(uint8_t *ptr, uint16_t len)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0x00;
 8000898:	2300      	movs	r3, #0
 800089a:	73fb      	strb	r3, [r7, #15]

	while (len--)
 800089c:	e00a      	b.n	80008b4 <g_generate_crc+0x28>
	{
		crc = crc_table[crc ^ *ptr++];
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	781a      	ldrb	r2, [r3, #0]
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	4053      	eors	r3, r2
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b07      	ldr	r3, [pc, #28]	; (80008cc <g_generate_crc+0x40>)
 80008b0:	5c9b      	ldrb	r3, [r3, r2]
 80008b2:	73fb      	strb	r3, [r7, #15]
	while (len--)
 80008b4:	887b      	ldrh	r3, [r7, #2]
 80008b6:	1e5a      	subs	r2, r3, #1
 80008b8:	807a      	strh	r2, [r7, #2]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d1ef      	bne.n	800089e <g_generate_crc+0x12>
	}
	return crc;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3714      	adds	r7, #20
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	08007954 	.word	0x08007954

080008d0 <g_convert_float16_to_native_float>:

    return out;
}

float g_convert_float16_to_native_float(uint16_t value)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	80fb      	strh	r3, [r7, #6]
    {
        uint32_t u;
        float f;
    };

    const union FP32 magic = { (254UL - 15UL) << 23U };
 80008da:	f04f 43ef 	mov.w	r3, #2004877312	; 0x77800000
 80008de:	617b      	str	r3, [r7, #20]
    const union FP32 was_inf_nan = { (127UL + 16UL) << 23U };
 80008e0:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 80008e4:	613b      	str	r3, [r7, #16]
    union FP32 out;

    out.u = (value & 0x7FFFU) << 13U;
 80008e6:	88fb      	ldrh	r3, [r7, #6]
 80008e8:	035a      	lsls	r2, r3, #13
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <g_convert_float16_to_native_float+0x6c>)
 80008ec:	4013      	ands	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]
    out.f *= magic.f;
 80008f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80008f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80008f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008fc:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.f >= was_inf_nan.f)
 8000900:	ed97 7a03 	vldr	s14, [r7, #12]
 8000904:	edd7 7a04 	vldr	s15, [r7, #16]
 8000908:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800090c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000910:	db03      	blt.n	800091a <g_convert_float16_to_native_float+0x4a>
    {
        out.u |= 255UL << 23U;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 8000918:	60fb      	str	r3, [r7, #12]
    }
    out.u |= (value & 0x8000UL) << 16U;
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	041b      	lsls	r3, r3, #16
 8000920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000924:	4313      	orrs	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]

    return out.f;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	ee07 3a90 	vmov	s15, r3
}
 800092e:	eeb0 0a67 	vmov.f32	s0, s15
 8000932:	371c      	adds	r7, #28
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	0fffe000 	.word	0x0fffe000

08000940 <g_take_photo>:
 */

#include "stm32f4xx_hal.h"

void g_take_photo(int32_t altitude, uint32_t lat, uint32_t lon)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]

}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <g_record>:
 *            @arg 0x01: start record
 *            @arg 0x00: stop record
 * @retval none
 */
void g_record(uint8_t start_or_stop)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]

}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <g_pitch_control>:
 *         This parameter can be one of the following values:
 *            [-5,5].
 * @retval none
 */
void g_pitch_control(int8_t pitch_ctrl)
{
 800096e:	b480      	push	{r7}
 8000970:	b083      	sub	sp, #12
 8000972:	af00      	add	r7, sp, #0
 8000974:	4603      	mov	r3, r0
 8000976:	71fb      	strb	r3, [r7, #7]

}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <g_yaw_control>:
 *         This parameter can be one of the following values:
 *            [-5,5].
 * @retval none
 */
void g_yaw_control(int8_t yaw_ctrl)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]

}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <g_gimbal_mode>:
 *            @arg 0x01: Follow
 *            @arg 0x02: Reset Position
 * @retval none
 */
void g_gimbal_mode(uint8_t mode)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	4603      	mov	r3, r0
 80009a2:	71fb      	strb	r3, [r7, #7]

}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <g_set_gimbal_pitch>:
 * @brief  set gimbal pitch angle.
 * @param  angle
 * @retval none
 */
void g_set_gimbal_pitch(float angle)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	ed87 0a01 	vstr	s0, [r7, #4]

}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <g_set_gimbal_yaw>:
 * @brief  set gimbal yaw angle.
 * @param  angle
 * @retval none
 */
void g_set_gimbal_yaw(float angle)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	ed87 0a01 	vstr	s0, [r7, #4]

}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <g_control_zoom>:
 *            @arg 0x01: zoom stop
 *            @arg 0x02: zoom near
 * @retval none
 */
void g_control_zoom(uint8_t zoom)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]

}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <MX_GPIO_Init+0x68>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <MX_GPIO_Init+0x68>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_GPIO_Init+0x68>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_GPIO_Init+0x68>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <MX_GPIO_Init+0x68>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <MX_GPIO_Init+0x68>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <MX_GPIO_Init+0x68>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <MX_GPIO_Init+0x68>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MX_GPIO_Init+0x68>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a64:	f001 fe20 	bl	80026a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a68:	f000 f810 	bl	8000a8c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a6c:	f7ff ffc2 	bl	80009f4 <MX_GPIO_Init>
	MX_CAN1_Init();
 8000a70:	f7ff fd7a 	bl	8000568 <MX_CAN1_Init>
	MX_CAN2_Init();
 8000a74:	f7ff fdb2 	bl	80005dc <MX_CAN2_Init>
	MX_USART1_UART_Init();
 8000a78:	f001 fd0c 	bl	8002494 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000a7c:	f001 fd34 	bl	80024e8 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	g_payload_init();
 8000a80:	f000 fe9a 	bl	80017b8 <g_payload_init>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		send_can_msg_to_drone();
 8000a84:	f001 f8b0 	bl	8001be8 <send_can_msg_to_drone>
 8000a88:	e7fc      	b.n	8000a84 <main+0x24>
	...

08000a8c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	; 0x50
 8000a90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	2230      	movs	r2, #48	; 0x30
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f005 f878 	bl	8005b90 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <SystemClock_Config+0xcc>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a27      	ldr	r2, [pc, #156]	; (8000b58 <SystemClock_Config+0xcc>)
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <SystemClock_Config+0xcc>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a21      	ldr	r2, [pc, #132]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <SystemClock_Config+0xd0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af2:	2302      	movs	r3, #2
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000afa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000afc:	2308      	movs	r3, #8
 8000afe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000b00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b04:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 fb08 	bl	8004128 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000b1e:	f000 f81f 	bl	8000b60 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2302      	movs	r3, #2
 8000b28:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b32:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b38:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	2105      	movs	r1, #5
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 fe11 	bl	8004768 <HAL_RCC_ClockConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000b4c:	f000 f808 	bl	8000b60 <Error_Handler>
	}
}
 8000b50:	bf00      	nop
 8000b52:	3750      	adds	r7, #80	; 0x50
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <isPowerOf2>:
static_assert((INSTANCE_SIZE_PADDED % O1HEAP_ALIGNMENT) == 0U, "Invalid instance footprint computation");

/// True if the argument is an integer power of two or zero.
O1HEAP_PRIVATE bool isPowerOf2(const size_t x);
O1HEAP_PRIVATE bool isPowerOf2(const size_t x)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
    return (x & (x - 1U)) == 0U;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	1e5a      	subs	r2, r3, #1
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4013      	ands	r3, r2
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bf0c      	ite	eq
 8000b98:	2301      	moveq	r3, #1
 8000b9a:	2300      	movne	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <log2Floor>:

/// Special case: if the argument is zero, returns zero.
O1HEAP_PRIVATE uint8_t log2Floor(const size_t x);
O1HEAP_PRIVATE uint8_t log2Floor(const size_t x)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b085      	sub	sp, #20
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
    size_t  tmp = x;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	60fb      	str	r3, [r7, #12]
    uint8_t y   = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	72fb      	strb	r3, [r7, #11]
    // This is currently the only exception to the statement "routines contain neither loops nor recursion".
    // It is unclear if there is a better way to compute the binary logarithm than this.
    while (tmp > 1U)
 8000bba:	e005      	b.n	8000bc8 <log2Floor+0x1e>
    {
        tmp >>= 1U;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	085b      	lsrs	r3, r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
        y++;
 8000bc2:	7afb      	ldrb	r3, [r7, #11]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	72fb      	strb	r3, [r7, #11]
    while (tmp > 1U)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d8f6      	bhi.n	8000bbc <log2Floor+0x12>
    }
    return y;
 8000bce:	7afb      	ldrb	r3, [r7, #11]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <log2Ceil>:

/// Special case: if the argument is zero, returns zero.
O1HEAP_PRIVATE uint8_t log2Ceil(const size_t x);
O1HEAP_PRIVATE uint8_t log2Ceil(const size_t x)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
    return (uint8_t)(log2Floor(x) + (isPowerOf2(x) ? 0U : 1U));
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ffe0 	bl	8000baa <log2Floor>
 8000bea:	4603      	mov	r3, r0
 8000bec:	461c      	mov	r4, r3
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ffc8 	bl	8000b84 <isPowerOf2>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f083 0301 	eor.w	r3, r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	4423      	add	r3, r4
 8000bfe:	b2db      	uxtb	r3, r3
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd90      	pop	{r4, r7, pc}

08000c08 <pow2>:
/// Raise 2 into the specified power.
/// You might be tempted to do something like (1U << power). WRONG! We humans are prone to forgetting things.
/// If you forget to cast your 1U to size_t or ULL, you may end up with undefined behavior.
O1HEAP_PRIVATE size_t pow2(const uint8_t power);
O1HEAP_PRIVATE size_t pow2(const uint8_t power)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
    return ((size_t) 1U) << power;
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2201      	movs	r2, #1
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <invoke>:

O1HEAP_PRIVATE void invoke(const O1HeapHook hook);
O1HEAP_PRIVATE void invoke(const O1HeapHook hook)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
    if (hook != NULL)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <invoke+0x12>
    {
        hook();
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4798      	blx	r3
    }
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <interlink>:

/// Links two fragments so that their next/prev pointers point to each other; left goes before right.
O1HEAP_PRIVATE void interlink(Fragment* const left, Fragment* const right);
O1HEAP_PRIVATE void interlink(Fragment* const left, Fragment* const right)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
    if (O1HEAP_LIKELY(left != NULL))
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	bf14      	ite	ne
 8000c50:	2301      	movne	r3, #1
 8000c52:	2300      	moveq	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <interlink+0x20>
    {
        left->header.next = right;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	601a      	str	r2, [r3, #0]
    }
    if (O1HEAP_LIKELY(right != NULL))
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bf14      	ite	ne
 8000c66:	2301      	movne	r3, #1
 8000c68:	2300      	moveq	r3, #0
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <interlink+0x36>
    {
        right->header.prev = left;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	605a      	str	r2, [r3, #4]
    }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
	...

08000c84 <rebin>:

/// Adds a new block into the appropriate bin and updates the lookup mask.
O1HEAP_PRIVATE void rebin(O1HeapInstance* const handle, Fragment* const fragment);
O1HEAP_PRIVATE void rebin(O1HeapInstance* const handle, Fragment* const fragment)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
    O1HEAP_ASSERT(handle != NULL);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d105      	bne.n	8000ca0 <rebin+0x1c>
 8000c94:	4b32      	ldr	r3, [pc, #200]	; (8000d60 <rebin+0xdc>)
 8000c96:	4a33      	ldr	r2, [pc, #204]	; (8000d64 <rebin+0xe0>)
 8000c98:	21b7      	movs	r1, #183	; 0xb7
 8000c9a:	4833      	ldr	r0, [pc, #204]	; (8000d68 <rebin+0xe4>)
 8000c9c:	f004 fefe 	bl	8005a9c <__assert_func>
    O1HEAP_ASSERT(fragment != NULL);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d105      	bne.n	8000cb2 <rebin+0x2e>
 8000ca6:	4b31      	ldr	r3, [pc, #196]	; (8000d6c <rebin+0xe8>)
 8000ca8:	4a2e      	ldr	r2, [pc, #184]	; (8000d64 <rebin+0xe0>)
 8000caa:	21b8      	movs	r1, #184	; 0xb8
 8000cac:	482e      	ldr	r0, [pc, #184]	; (8000d68 <rebin+0xe4>)
 8000cae:	f004 fef5 	bl	8005a9c <__assert_func>
    O1HEAP_ASSERT(fragment->header.size >= FRAGMENT_SIZE_MIN);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	2b1f      	cmp	r3, #31
 8000cb8:	d805      	bhi.n	8000cc6 <rebin+0x42>
 8000cba:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <rebin+0xec>)
 8000cbc:	4a29      	ldr	r2, [pc, #164]	; (8000d64 <rebin+0xe0>)
 8000cbe:	21b9      	movs	r1, #185	; 0xb9
 8000cc0:	4829      	ldr	r0, [pc, #164]	; (8000d68 <rebin+0xe4>)
 8000cc2:	f004 feeb 	bl	8005a9c <__assert_func>
    O1HEAP_ASSERT((fragment->header.size % FRAGMENT_SIZE_MIN) == 0U);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f003 031f 	and.w	r3, r3, #31
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <rebin+0x5a>
 8000cd2:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <rebin+0xf0>)
 8000cd4:	4a23      	ldr	r2, [pc, #140]	; (8000d64 <rebin+0xe0>)
 8000cd6:	21ba      	movs	r1, #186	; 0xba
 8000cd8:	4823      	ldr	r0, [pc, #140]	; (8000d68 <rebin+0xe4>)
 8000cda:	f004 fedf 	bl	8005a9c <__assert_func>
    const uint8_t idx = log2Floor(fragment->header.size / FRAGMENT_SIZE_MIN);  // Round DOWN when inserting.
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff60 	bl	8000baa <log2Floor>
 8000cea:	4603      	mov	r3, r0
 8000cec:	73fb      	strb	r3, [r7, #15]
    O1HEAP_ASSERT(idx < NUM_BINS_MAX);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	2b1f      	cmp	r3, #31
 8000cf2:	d905      	bls.n	8000d00 <rebin+0x7c>
 8000cf4:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <rebin+0xf4>)
 8000cf6:	4a1b      	ldr	r2, [pc, #108]	; (8000d64 <rebin+0xe0>)
 8000cf8:	21bc      	movs	r1, #188	; 0xbc
 8000cfa:	481b      	ldr	r0, [pc, #108]	; (8000d68 <rebin+0xe4>)
 8000cfc:	f004 fece 	bl	8005a9c <__assert_func>
    // Add the new fragment to the beginning of the bin list.
    // I.e., each allocation will be returning the least-recently-used fragment -- good for caching.
    fragment->next_free = handle->bins[idx];
 8000d00:	7bfa      	ldrb	r2, [r7, #15]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	611a      	str	r2, [r3, #16]
    fragment->prev_free = NULL;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
    if (O1HEAP_LIKELY(handle->bins[idx] != NULL))
 8000d12:	7bfa      	ldrb	r2, [r7, #15]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	bf14      	ite	ne
 8000d1e:	2301      	movne	r3, #1
 8000d20:	2300      	moveq	r3, #0
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d005      	beq.n	8000d34 <rebin+0xb0>
    {
        handle->bins[idx]->prev_free = fragment;
 8000d28:	7bfa      	ldrb	r2, [r7, #15]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	615a      	str	r2, [r3, #20]
    }
    handle->bins[idx] = fragment;
 8000d34:	7bfa      	ldrb	r2, [r7, #15]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6839      	ldr	r1, [r7, #0]
 8000d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    handle->nonempty_bin_mask |= pow2(idx);
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff61 	bl	8000c08 <pow2>
 8000d46:	4602      	mov	r2, r0
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	08006f98 	.word	0x08006f98
 8000d64:	08007a60 	.word	0x08007a60
 8000d68:	08006fb0 	.word	0x08006fb0
 8000d6c:	08006fc8 	.word	0x08006fc8
 8000d70:	08006fe0 	.word	0x08006fe0
 8000d74:	08007018 	.word	0x08007018
 8000d78:	08007054 	.word	0x08007054

08000d7c <unbin>:

/// Removes the specified block from its bin.
O1HEAP_PRIVATE void unbin(O1HeapInstance* const handle, const Fragment* const fragment);
O1HEAP_PRIVATE void unbin(O1HeapInstance* const handle, const Fragment* const fragment)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
    O1HEAP_ASSERT(handle != NULL);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d105      	bne.n	8000d98 <unbin+0x1c>
 8000d8c:	4b44      	ldr	r3, [pc, #272]	; (8000ea0 <unbin+0x124>)
 8000d8e:	4a45      	ldr	r2, [pc, #276]	; (8000ea4 <unbin+0x128>)
 8000d90:	21cd      	movs	r1, #205	; 0xcd
 8000d92:	4845      	ldr	r0, [pc, #276]	; (8000ea8 <unbin+0x12c>)
 8000d94:	f004 fe82 	bl	8005a9c <__assert_func>
    O1HEAP_ASSERT(fragment != NULL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d105      	bne.n	8000daa <unbin+0x2e>
 8000d9e:	4b43      	ldr	r3, [pc, #268]	; (8000eac <unbin+0x130>)
 8000da0:	4a40      	ldr	r2, [pc, #256]	; (8000ea4 <unbin+0x128>)
 8000da2:	21ce      	movs	r1, #206	; 0xce
 8000da4:	4840      	ldr	r0, [pc, #256]	; (8000ea8 <unbin+0x12c>)
 8000da6:	f004 fe79 	bl	8005a9c <__assert_func>
    O1HEAP_ASSERT(fragment->header.size >= FRAGMENT_SIZE_MIN);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	2b1f      	cmp	r3, #31
 8000db0:	d805      	bhi.n	8000dbe <unbin+0x42>
 8000db2:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <unbin+0x134>)
 8000db4:	4a3b      	ldr	r2, [pc, #236]	; (8000ea4 <unbin+0x128>)
 8000db6:	21cf      	movs	r1, #207	; 0xcf
 8000db8:	483b      	ldr	r0, [pc, #236]	; (8000ea8 <unbin+0x12c>)
 8000dba:	f004 fe6f 	bl	8005a9c <__assert_func>
    O1HEAP_ASSERT((fragment->header.size % FRAGMENT_SIZE_MIN) == 0U);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f003 031f 	and.w	r3, r3, #31
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d005      	beq.n	8000dd6 <unbin+0x5a>
 8000dca:	4b3a      	ldr	r3, [pc, #232]	; (8000eb4 <unbin+0x138>)
 8000dcc:	4a35      	ldr	r2, [pc, #212]	; (8000ea4 <unbin+0x128>)
 8000dce:	21d0      	movs	r1, #208	; 0xd0
 8000dd0:	4835      	ldr	r0, [pc, #212]	; (8000ea8 <unbin+0x12c>)
 8000dd2:	f004 fe63 	bl	8005a9c <__assert_func>
    const uint8_t idx = log2Floor(fragment->header.size / FRAGMENT_SIZE_MIN);  // Round DOWN when removing.
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fee4 	bl	8000baa <log2Floor>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
    O1HEAP_ASSERT(idx < NUM_BINS_MAX);
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b1f      	cmp	r3, #31
 8000dea:	d905      	bls.n	8000df8 <unbin+0x7c>
 8000dec:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <unbin+0x13c>)
 8000dee:	4a2d      	ldr	r2, [pc, #180]	; (8000ea4 <unbin+0x128>)
 8000df0:	21d2      	movs	r1, #210	; 0xd2
 8000df2:	482d      	ldr	r0, [pc, #180]	; (8000ea8 <unbin+0x12c>)
 8000df4:	f004 fe52 	bl	8005a9c <__assert_func>
    // Remove the bin from the free fragment list.
    if (O1HEAP_LIKELY(fragment->next_free != NULL))
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	bf14      	ite	ne
 8000e00:	2301      	movne	r3, #1
 8000e02:	2300      	moveq	r3, #0
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d004      	beq.n	8000e14 <unbin+0x98>
    {
        fragment->next_free->prev_free = fragment->prev_free;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	6952      	ldr	r2, [r2, #20]
 8000e12:	615a      	str	r2, [r3, #20]
    }
    if (O1HEAP_LIKELY(fragment->prev_free != NULL))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	bf14      	ite	ne
 8000e1c:	2301      	movne	r3, #1
 8000e1e:	2300      	moveq	r3, #0
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d004      	beq.n	8000e30 <unbin+0xb4>
    {
        fragment->prev_free->next_free = fragment->next_free;
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	683a      	ldr	r2, [r7, #0]
 8000e2c:	6912      	ldr	r2, [r2, #16]
 8000e2e:	611a      	str	r2, [r3, #16]
    }
    // Update the bin header.
    if (O1HEAP_LIKELY(handle->bins[idx] == fragment))
 8000e30:	7bfa      	ldrb	r2, [r7, #15]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	bf0c      	ite	eq
 8000e3e:	2301      	moveq	r3, #1
 8000e40:	2300      	movne	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d027      	beq.n	8000e98 <unbin+0x11c>
    {
        O1HEAP_ASSERT(fragment->prev_free == NULL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d005      	beq.n	8000e5c <unbin+0xe0>
 8000e50:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <unbin+0x140>)
 8000e52:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <unbin+0x128>)
 8000e54:	21df      	movs	r1, #223	; 0xdf
 8000e56:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <unbin+0x12c>)
 8000e58:	f004 fe20 	bl	8005a9c <__assert_func>
        handle->bins[idx] = fragment->next_free;
 8000e5c:	7bfa      	ldrb	r2, [r7, #15]
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	6919      	ldr	r1, [r3, #16]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        if (O1HEAP_LIKELY(handle->bins[idx] == NULL))
 8000e68:	7bfa      	ldrb	r2, [r7, #15]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	bf0c      	ite	eq
 8000e74:	2301      	moveq	r3, #1
 8000e76:	2300      	movne	r3, #0
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00c      	beq.n	8000e98 <unbin+0x11c>
        {
            handle->nonempty_bin_mask &= ~pow2(idx);
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fec1 	bl	8000c08 <pow2>
 8000e86:	4603      	mov	r3, r0
 8000e88:	43da      	mvns	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e90:	401a      	ands	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
    }
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	08006f98 	.word	0x08006f98
 8000ea4:	08007a78 	.word	0x08007a78
 8000ea8:	08006fb0 	.word	0x08006fb0
 8000eac:	08006fc8 	.word	0x08006fc8
 8000eb0:	08006fe0 	.word	0x08006fe0
 8000eb4:	08007018 	.word	0x08007018
 8000eb8:	08007054 	.word	0x08007054
 8000ebc:	08007070 	.word	0x08007070

08000ec0 <o1heapInit>:

O1HeapInstance* o1heapInit(void* const      base,
                           const size_t     size,
                           const O1HeapHook critical_section_enter,
                           const O1HeapHook critical_section_leave)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	603b      	str	r3, [r7, #0]
    O1HeapInstance* out = NULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    if ((base != NULL) && ((((size_t) base) % O1HEAP_ALIGNMENT) == 0U) &&
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	f000 80b0 	beq.w	800103a <o1heapInit+0x17a>
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f003 030f 	and.w	r3, r3, #15
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f040 80aa 	bne.w	800103a <o1heapInit+0x17a>
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	2bcf      	cmp	r3, #207	; 0xcf
 8000eea:	f240 80a6 	bls.w	800103a <o1heapInit+0x17a>
        (size >= (INSTANCE_SIZE_PADDED + FRAGMENT_SIZE_MIN)))
    {
        // Allocate the core heap metadata structure in the beginning of the arena.
        O1HEAP_ASSERT(((size_t) base) % sizeof(O1HeapInstance*) == 0U);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d005      	beq.n	8000f04 <o1heapInit+0x44>
 8000ef8:	4b52      	ldr	r3, [pc, #328]	; (8001044 <o1heapInit+0x184>)
 8000efa:	4a53      	ldr	r2, [pc, #332]	; (8001048 <o1heapInit+0x188>)
 8000efc:	21f4      	movs	r1, #244	; 0xf4
 8000efe:	4853      	ldr	r0, [pc, #332]	; (800104c <o1heapInit+0x18c>)
 8000f00:	f004 fdcc 	bl	8005a9c <__assert_func>
        out                         = (O1HeapInstance*) base;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	61fb      	str	r3, [r7, #28]
        out->nonempty_bin_mask      = 0U;
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        out->critical_section_enter = critical_section_enter;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        out->critical_section_leave = critical_section_leave;
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        for (size_t i = 0; i < NUM_BINS_MAX; i++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	e007      	b.n	8000f36 <o1heapInit+0x76>
        {
            out->bins[i] = NULL;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t i = 0; i < NUM_BINS_MAX; i++)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	3301      	adds	r3, #1
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2b1f      	cmp	r3, #31
 8000f3a:	d9f4      	bls.n	8000f26 <o1heapInit+0x66>
        }

        // Limit and align the capacity.
        size_t capacity = size - INSTANCE_SIZE_PADDED;
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	3bb0      	subs	r3, #176	; 0xb0
 8000f40:	617b      	str	r3, [r7, #20]
        if (capacity > FRAGMENT_SIZE_MAX)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f48:	d910      	bls.n	8000f6c <o1heapInit+0xac>
        {
            capacity = FRAGMENT_SIZE_MAX;
 8000f4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000f4e:	617b      	str	r3, [r7, #20]
        }
        while ((capacity % FRAGMENT_SIZE_MIN) != 0)
 8000f50:	e00c      	b.n	8000f6c <o1heapInit+0xac>
        {
            O1HEAP_ASSERT(capacity > 0U);
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d106      	bne.n	8000f66 <o1heapInit+0xa6>
 8000f58:	4b3d      	ldr	r3, [pc, #244]	; (8001050 <o1heapInit+0x190>)
 8000f5a:	4a3b      	ldr	r2, [pc, #236]	; (8001048 <o1heapInit+0x188>)
 8000f5c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8000f60:	483a      	ldr	r0, [pc, #232]	; (800104c <o1heapInit+0x18c>)
 8000f62:	f004 fd9b 	bl	8005a9c <__assert_func>
            capacity--;
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
        while ((capacity % FRAGMENT_SIZE_MIN) != 0)
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f003 031f 	and.w	r3, r3, #31
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1ed      	bne.n	8000f52 <o1heapInit+0x92>
        }
        O1HEAP_ASSERT((capacity % FRAGMENT_SIZE_MIN) == 0);
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f003 031f 	and.w	r3, r3, #31
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d006      	beq.n	8000f8e <o1heapInit+0xce>
 8000f80:	4b34      	ldr	r3, [pc, #208]	; (8001054 <o1heapInit+0x194>)
 8000f82:	4a31      	ldr	r2, [pc, #196]	; (8001048 <o1heapInit+0x188>)
 8000f84:	f240 1109 	movw	r1, #265	; 0x109
 8000f88:	4830      	ldr	r0, [pc, #192]	; (800104c <o1heapInit+0x18c>)
 8000f8a:	f004 fd87 	bl	8005a9c <__assert_func>
        O1HEAP_ASSERT((capacity >= FRAGMENT_SIZE_MIN) && (capacity <= FRAGMENT_SIZE_MAX));
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2b1f      	cmp	r3, #31
 8000f92:	d903      	bls.n	8000f9c <o1heapInit+0xdc>
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f9a:	d906      	bls.n	8000faa <o1heapInit+0xea>
 8000f9c:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <o1heapInit+0x198>)
 8000f9e:	4a2a      	ldr	r2, [pc, #168]	; (8001048 <o1heapInit+0x188>)
 8000fa0:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8000fa4:	4829      	ldr	r0, [pc, #164]	; (800104c <o1heapInit+0x18c>)
 8000fa6:	f004 fd79 	bl	8005a9c <__assert_func>

        // Initialize the root fragment.
        Fragment* const frag = (Fragment*) (void*) (((uint8_t*) base) + INSTANCE_SIZE_PADDED);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	33b0      	adds	r3, #176	; 0xb0
 8000fae:	613b      	str	r3, [r7, #16]
        O1HEAP_ASSERT((((size_t) frag) % O1HEAP_ALIGNMENT) == 0U);
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <o1heapInit+0x108>
 8000fba:	4b28      	ldr	r3, [pc, #160]	; (800105c <o1heapInit+0x19c>)
 8000fbc:	4a22      	ldr	r2, [pc, #136]	; (8001048 <o1heapInit+0x188>)
 8000fbe:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000fc2:	4822      	ldr	r0, [pc, #136]	; (800104c <o1heapInit+0x18c>)
 8000fc4:	f004 fd6a 	bl	8005a9c <__assert_func>
        frag->header.next = NULL;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
        frag->header.prev = NULL;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
        frag->header.size = capacity;
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	609a      	str	r2, [r3, #8]
        frag->header.used = false;
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	731a      	strb	r2, [r3, #12]
        frag->next_free   = NULL;
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
        frag->prev_free   = NULL;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	615a      	str	r2, [r3, #20]
        rebin(out, frag);
 8000fec:	6939      	ldr	r1, [r7, #16]
 8000fee:	69f8      	ldr	r0, [r7, #28]
 8000ff0:	f7ff fe48 	bl	8000c84 <rebin>
        O1HEAP_ASSERT(out->nonempty_bin_mask != 0U);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d106      	bne.n	800100c <o1heapInit+0x14c>
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <o1heapInit+0x1a0>)
 8001000:	4a11      	ldr	r2, [pc, #68]	; (8001048 <o1heapInit+0x188>)
 8001002:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001006:	4811      	ldr	r0, [pc, #68]	; (800104c <o1heapInit+0x18c>)
 8001008:	f004 fd48 	bl	8005a9c <__assert_func>

        // Initialize the diagnostics.
        out->diagnostics.capacity          = capacity;
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        out->diagnostics.allocated         = 0U;
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	2200      	movs	r2, #0
 8001018:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        out->diagnostics.peak_allocated    = 0U;
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	2200      	movs	r2, #0
 8001020:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        out->diagnostics.peak_request_size = 0U;
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2200      	movs	r2, #0
 8001028:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        out->diagnostics.oom_count         = 0U;
 800102c:	69f9      	ldr	r1, [r7, #28]
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
    }

    return out;
 800103a:	69fb      	ldr	r3, [r7, #28]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	08007094 	.word	0x08007094
 8001048:	08007a54 	.word	0x08007a54
 800104c:	08006fb0 	.word	0x08006fb0
 8001050:	080070c4 	.word	0x080070c4
 8001054:	080070d4 	.word	0x080070d4
 8001058:	08007104 	.word	0x08007104
 800105c:	0800715c 	.word	0x0800715c
 8001060:	0800718c 	.word	0x0800718c

08001064 <o1heapAllocate>:

void* o1heapAllocate(O1HeapInstance* const handle, const size_t amount)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
    O1HEAP_ASSERT(handle != NULL);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d106      	bne.n	8001082 <o1heapAllocate+0x1e>
 8001074:	4bab      	ldr	r3, [pc, #684]	; (8001324 <o1heapAllocate+0x2c0>)
 8001076:	4aac      	ldr	r2, [pc, #688]	; (8001328 <o1heapAllocate+0x2c4>)
 8001078:	f240 1125 	movw	r1, #293	; 0x125
 800107c:	48ab      	ldr	r0, [pc, #684]	; (800132c <o1heapAllocate+0x2c8>)
 800107e:	f004 fd0d 	bl	8005a9c <__assert_func>
    O1HEAP_ASSERT(handle->diagnostics.capacity <= FRAGMENT_SIZE_MAX);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800108c:	d906      	bls.n	800109c <o1heapAllocate+0x38>
 800108e:	4ba8      	ldr	r3, [pc, #672]	; (8001330 <o1heapAllocate+0x2cc>)
 8001090:	4aa5      	ldr	r2, [pc, #660]	; (8001328 <o1heapAllocate+0x2c4>)
 8001092:	f44f 7193 	mov.w	r1, #294	; 0x126
 8001096:	48a5      	ldr	r0, [pc, #660]	; (800132c <o1heapAllocate+0x2c8>)
 8001098:	f004 fd00 	bl	8005a9c <__assert_func>
    void* out = NULL;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c

    // If the amount approaches approx. SIZE_MAX/2, an undetected integer overflow may occur.
    // To avoid that, we do not attempt allocation if the amount exceeds the hard limit.
    // We perform multiple redundant checks to account for a possible unaccounted overflow.
    if (O1HEAP_LIKELY((amount > 0U) && (amount <= (handle->diagnostics.capacity - O1HEAP_ALIGNMENT))))
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	bf14      	ite	ne
 80010a6:	2301      	movne	r3, #1
 80010a8:	2300      	moveq	r3, #0
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f000 819f 	beq.w	80013f0 <o1heapAllocate+0x38c>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010b8:	3b10      	subs	r3, #16
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	bf94      	ite	ls
 80010c0:	2301      	movls	r3, #1
 80010c2:	2300      	movhi	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 8192 	beq.w	80013f0 <o1heapAllocate+0x38c>
    {
        // Add the header size and align the allocation size to the power of 2.
        // See "Timing-Predictable Memory Allocation In Hard Real-Time Systems", Herter, page 27.
        const size_t fragment_size = pow2(log2Ceil(amount + O1HEAP_ALIGNMENT));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	3310      	adds	r3, #16
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fd83 	bl	8000bdc <log2Ceil>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fd95 	bl	8000c08 <pow2>
 80010de:	62b8      	str	r0, [r7, #40]	; 0x28
        O1HEAP_ASSERT(fragment_size <= FRAGMENT_SIZE_MAX);
 80010e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010e6:	d906      	bls.n	80010f6 <o1heapAllocate+0x92>
 80010e8:	4b92      	ldr	r3, [pc, #584]	; (8001334 <o1heapAllocate+0x2d0>)
 80010ea:	4a8f      	ldr	r2, [pc, #572]	; (8001328 <o1heapAllocate+0x2c4>)
 80010ec:	f240 1131 	movw	r1, #305	; 0x131
 80010f0:	488e      	ldr	r0, [pc, #568]	; (800132c <o1heapAllocate+0x2c8>)
 80010f2:	f004 fcd3 	bl	8005a9c <__assert_func>
        O1HEAP_ASSERT(fragment_size >= FRAGMENT_SIZE_MIN);
 80010f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f8:	2b1f      	cmp	r3, #31
 80010fa:	d806      	bhi.n	800110a <o1heapAllocate+0xa6>
 80010fc:	4b8e      	ldr	r3, [pc, #568]	; (8001338 <o1heapAllocate+0x2d4>)
 80010fe:	4a8a      	ldr	r2, [pc, #552]	; (8001328 <o1heapAllocate+0x2c4>)
 8001100:	f44f 7199 	mov.w	r1, #306	; 0x132
 8001104:	4889      	ldr	r0, [pc, #548]	; (800132c <o1heapAllocate+0x2c8>)
 8001106:	f004 fcc9 	bl	8005a9c <__assert_func>
        O1HEAP_ASSERT(fragment_size >= amount + O1HEAP_ALIGNMENT);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	3310      	adds	r3, #16
 800110e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001110:	429a      	cmp	r2, r3
 8001112:	d206      	bcs.n	8001122 <o1heapAllocate+0xbe>
 8001114:	4b89      	ldr	r3, [pc, #548]	; (800133c <o1heapAllocate+0x2d8>)
 8001116:	4a84      	ldr	r2, [pc, #528]	; (8001328 <o1heapAllocate+0x2c4>)
 8001118:	f240 1133 	movw	r1, #307	; 0x133
 800111c:	4883      	ldr	r0, [pc, #524]	; (800132c <o1heapAllocate+0x2c8>)
 800111e:	f004 fcbd 	bl	8005a9c <__assert_func>
        O1HEAP_ASSERT(isPowerOf2(fragment_size));
 8001122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001124:	f7ff fd2e 	bl	8000b84 <isPowerOf2>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d106      	bne.n	800113c <o1heapAllocate+0xd8>
 800112e:	4b84      	ldr	r3, [pc, #528]	; (8001340 <o1heapAllocate+0x2dc>)
 8001130:	4a7d      	ldr	r2, [pc, #500]	; (8001328 <o1heapAllocate+0x2c4>)
 8001132:	f44f 719a 	mov.w	r1, #308	; 0x134
 8001136:	487d      	ldr	r0, [pc, #500]	; (800132c <o1heapAllocate+0x2c8>)
 8001138:	f004 fcb0 	bl	8005a9c <__assert_func>

        const uint8_t optimal_bin_index = log2Ceil(fragment_size / FRAGMENT_SIZE_MIN);  // Use CEIL when fetching.
 800113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fd4b 	bl	8000bdc <log2Ceil>
 8001146:	4603      	mov	r3, r0
 8001148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        O1HEAP_ASSERT(optimal_bin_index < NUM_BINS_MAX);
 800114c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001150:	2b1f      	cmp	r3, #31
 8001152:	d906      	bls.n	8001162 <o1heapAllocate+0xfe>
 8001154:	4b7b      	ldr	r3, [pc, #492]	; (8001344 <o1heapAllocate+0x2e0>)
 8001156:	4a74      	ldr	r2, [pc, #464]	; (8001328 <o1heapAllocate+0x2c4>)
 8001158:	f240 1137 	movw	r1, #311	; 0x137
 800115c:	4873      	ldr	r0, [pc, #460]	; (800132c <o1heapAllocate+0x2c8>)
 800115e:	f004 fc9d 	bl	8005a9c <__assert_func>
        const size_t candidate_bin_mask = ~(pow2(optimal_bin_index) - 1U);
 8001162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fd4e 	bl	8000c08 <pow2>
 800116c:	4603      	mov	r3, r0
 800116e:	3b01      	subs	r3, #1
 8001170:	43db      	mvns	r3, r3
 8001172:	623b      	str	r3, [r7, #32]

        invoke(handle->critical_section_enter);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fd53 	bl	8000c26 <invoke>

        // Find the smallest non-empty bin we can use.
        const size_t suitable_bins     = handle->nonempty_bin_mask & candidate_bin_mask;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001186:	6a3a      	ldr	r2, [r7, #32]
 8001188:	4013      	ands	r3, r2
 800118a:	61fb      	str	r3, [r7, #28]
        const size_t smallest_bin_mask = suitable_bins & ~(suitable_bins - 1U);  // Clear all bits but the lowest.
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	425b      	negs	r3, r3
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if (O1HEAP_LIKELY(smallest_bin_mask != 0))
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf14      	ite	ne
 800119c:	2301      	movne	r3, #1
 800119e:	2300      	moveq	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 812b 	beq.w	80013fe <o1heapAllocate+0x39a>
        {
            O1HEAP_ASSERT(isPowerOf2(smallest_bin_mask));
 80011a8:	69b8      	ldr	r0, [r7, #24]
 80011aa:	f7ff fceb 	bl	8000b84 <isPowerOf2>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d106      	bne.n	80011c2 <o1heapAllocate+0x15e>
 80011b4:	4b64      	ldr	r3, [pc, #400]	; (8001348 <o1heapAllocate+0x2e4>)
 80011b6:	4a5c      	ldr	r2, [pc, #368]	; (8001328 <o1heapAllocate+0x2c4>)
 80011b8:	f240 1141 	movw	r1, #321	; 0x141
 80011bc:	485b      	ldr	r0, [pc, #364]	; (800132c <o1heapAllocate+0x2c8>)
 80011be:	f004 fc6d 	bl	8005a9c <__assert_func>
            const uint8_t bin_index = log2Floor(smallest_bin_mask);
 80011c2:	69b8      	ldr	r0, [r7, #24]
 80011c4:	f7ff fcf1 	bl	8000baa <log2Floor>
 80011c8:	4603      	mov	r3, r0
 80011ca:	75fb      	strb	r3, [r7, #23]
            O1HEAP_ASSERT(bin_index >= optimal_bin_index);
 80011cc:	7dfa      	ldrb	r2, [r7, #23]
 80011ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d206      	bcs.n	80011e4 <o1heapAllocate+0x180>
 80011d6:	4b5d      	ldr	r3, [pc, #372]	; (800134c <o1heapAllocate+0x2e8>)
 80011d8:	4a53      	ldr	r2, [pc, #332]	; (8001328 <o1heapAllocate+0x2c4>)
 80011da:	f240 1143 	movw	r1, #323	; 0x143
 80011de:	4853      	ldr	r0, [pc, #332]	; (800132c <o1heapAllocate+0x2c8>)
 80011e0:	f004 fc5c 	bl	8005a9c <__assert_func>
            O1HEAP_ASSERT(bin_index < NUM_BINS_MAX);
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	2b1f      	cmp	r3, #31
 80011e8:	d906      	bls.n	80011f8 <o1heapAllocate+0x194>
 80011ea:	4b59      	ldr	r3, [pc, #356]	; (8001350 <o1heapAllocate+0x2ec>)
 80011ec:	4a4e      	ldr	r2, [pc, #312]	; (8001328 <o1heapAllocate+0x2c4>)
 80011ee:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80011f2:	484e      	ldr	r0, [pc, #312]	; (800132c <o1heapAllocate+0x2c8>)
 80011f4:	f004 fc52 	bl	8005a9c <__assert_func>

            // The bin we found shall not be empty, otherwise it's a state divergence (memory corruption?).
            Fragment* const frag = handle->bins[bin_index];
 80011f8:	7dfa      	ldrb	r2, [r7, #23]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	613b      	str	r3, [r7, #16]
            O1HEAP_ASSERT(frag != NULL);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d106      	bne.n	8001216 <o1heapAllocate+0x1b2>
 8001208:	4b52      	ldr	r3, [pc, #328]	; (8001354 <o1heapAllocate+0x2f0>)
 800120a:	4a47      	ldr	r2, [pc, #284]	; (8001328 <o1heapAllocate+0x2c4>)
 800120c:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001210:	4846      	ldr	r0, [pc, #280]	; (800132c <o1heapAllocate+0x2c8>)
 8001212:	f004 fc43 	bl	8005a9c <__assert_func>
            O1HEAP_ASSERT(frag->header.size >= fragment_size);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800121c:	429a      	cmp	r2, r3
 800121e:	d906      	bls.n	800122e <o1heapAllocate+0x1ca>
 8001220:	4b4d      	ldr	r3, [pc, #308]	; (8001358 <o1heapAllocate+0x2f4>)
 8001222:	4a41      	ldr	r2, [pc, #260]	; (8001328 <o1heapAllocate+0x2c4>)
 8001224:	f240 1149 	movw	r1, #329	; 0x149
 8001228:	4840      	ldr	r0, [pc, #256]	; (800132c <o1heapAllocate+0x2c8>)
 800122a:	f004 fc37 	bl	8005a9c <__assert_func>
            O1HEAP_ASSERT((frag->header.size % FRAGMENT_SIZE_MIN) == 0U);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f003 031f 	and.w	r3, r3, #31
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <o1heapAllocate+0x1e4>
 800123a:	4b48      	ldr	r3, [pc, #288]	; (800135c <o1heapAllocate+0x2f8>)
 800123c:	4a3a      	ldr	r2, [pc, #232]	; (8001328 <o1heapAllocate+0x2c4>)
 800123e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001242:	483a      	ldr	r0, [pc, #232]	; (800132c <o1heapAllocate+0x2c8>)
 8001244:	f004 fc2a 	bl	8005a9c <__assert_func>
            O1HEAP_ASSERT(!frag->header.used);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	7b1b      	ldrb	r3, [r3, #12]
 800124c:	f083 0301 	eor.w	r3, r3, #1
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d106      	bne.n	8001264 <o1heapAllocate+0x200>
 8001256:	4b42      	ldr	r3, [pc, #264]	; (8001360 <o1heapAllocate+0x2fc>)
 8001258:	4a33      	ldr	r2, [pc, #204]	; (8001328 <o1heapAllocate+0x2c4>)
 800125a:	f240 114b 	movw	r1, #331	; 0x14b
 800125e:	4833      	ldr	r0, [pc, #204]	; (800132c <o1heapAllocate+0x2c8>)
 8001260:	f004 fc1c 	bl	8005a9c <__assert_func>
            unbin(handle, frag);
 8001264:	6939      	ldr	r1, [r7, #16]
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fd88 	bl	8000d7c <unbin>

            // Split the fragment if it is too large.
            const size_t leftover = frag->header.size - fragment_size;
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	60fb      	str	r3, [r7, #12]
            frag->header.size     = fragment_size;
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800127a:	609a      	str	r2, [r3, #8]
            O1HEAP_ASSERT(leftover < handle->diagnostics.capacity);  // Overflow check.
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	429a      	cmp	r2, r3
 8001286:	d306      	bcc.n	8001296 <o1heapAllocate+0x232>
 8001288:	4b36      	ldr	r3, [pc, #216]	; (8001364 <o1heapAllocate+0x300>)
 800128a:	4a27      	ldr	r2, [pc, #156]	; (8001328 <o1heapAllocate+0x2c4>)
 800128c:	f240 1151 	movw	r1, #337	; 0x151
 8001290:	4826      	ldr	r0, [pc, #152]	; (800132c <o1heapAllocate+0x2c8>)
 8001292:	f004 fc03 	bl	8005a9c <__assert_func>
            O1HEAP_ASSERT(leftover % FRAGMENT_SIZE_MIN == 0U);       // Alignment check.
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f003 031f 	and.w	r3, r3, #31
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <o1heapAllocate+0x24a>
 80012a0:	4b31      	ldr	r3, [pc, #196]	; (8001368 <o1heapAllocate+0x304>)
 80012a2:	4a21      	ldr	r2, [pc, #132]	; (8001328 <o1heapAllocate+0x2c4>)
 80012a4:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80012a8:	4820      	ldr	r0, [pc, #128]	; (800132c <o1heapAllocate+0x2c8>)
 80012aa:	f004 fbf7 	bl	8005a9c <__assert_func>
            if (O1HEAP_LIKELY(leftover >= FRAGMENT_SIZE_MIN))
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2b1f      	cmp	r3, #31
 80012b2:	bf8c      	ite	hi
 80012b4:	2301      	movhi	r3, #1
 80012b6:	2300      	movls	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d023      	beq.n	8001306 <o1heapAllocate+0x2a2>
            {
                Fragment* const new_frag = (Fragment*) (void*) (((uint8_t*) frag) + fragment_size);
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c2:	4413      	add	r3, r2
 80012c4:	60bb      	str	r3, [r7, #8]
                O1HEAP_ASSERT(((size_t) new_frag) % O1HEAP_ALIGNMENT == 0U);
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <o1heapAllocate+0x27a>
 80012d0:	4b26      	ldr	r3, [pc, #152]	; (800136c <o1heapAllocate+0x308>)
 80012d2:	4a15      	ldr	r2, [pc, #84]	; (8001328 <o1heapAllocate+0x2c4>)
 80012d4:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80012d8:	4814      	ldr	r0, [pc, #80]	; (800132c <o1heapAllocate+0x2c8>)
 80012da:	f004 fbdf 	bl	8005a9c <__assert_func>
                new_frag->header.size = leftover;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	609a      	str	r2, [r3, #8]
                new_frag->header.used = false;
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	2200      	movs	r2, #0
 80012e8:	731a      	strb	r2, [r3, #12]
                interlink(new_frag, frag->header.next);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4619      	mov	r1, r3
 80012f0:	68b8      	ldr	r0, [r7, #8]
 80012f2:	f7ff fca5 	bl	8000c40 <interlink>
                interlink(frag, new_frag);
 80012f6:	68b9      	ldr	r1, [r7, #8]
 80012f8:	6938      	ldr	r0, [r7, #16]
 80012fa:	f7ff fca1 	bl	8000c40 <interlink>
                rebin(handle, new_frag);
 80012fe:	68b9      	ldr	r1, [r7, #8]
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fcbf 	bl	8000c84 <rebin>
            }

            // Update the diagnostics.
            O1HEAP_ASSERT((handle->diagnostics.allocated % FRAGMENT_SIZE_MIN) == 0U);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800130c:	f003 031f 	and.w	r3, r3, #31
 8001310:	2b00      	cmp	r3, #0
 8001312:	d02f      	beq.n	8001374 <o1heapAllocate+0x310>
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <o1heapAllocate+0x30c>)
 8001316:	4a04      	ldr	r2, [pc, #16]	; (8001328 <o1heapAllocate+0x2c4>)
 8001318:	f240 115f 	movw	r1, #351	; 0x15f
 800131c:	4803      	ldr	r0, [pc, #12]	; (800132c <o1heapAllocate+0x2c8>)
 800131e:	f004 fbbd 	bl	8005a9c <__assert_func>
 8001322:	bf00      	nop
 8001324:	08006f98 	.word	0x08006f98
 8001328:	08007a68 	.word	0x08007a68
 800132c:	08006fb0 	.word	0x08006fb0
 8001330:	080071ac 	.word	0x080071ac
 8001334:	080071ec 	.word	0x080071ec
 8001338:	0800721c 	.word	0x0800721c
 800133c:	0800724c 	.word	0x0800724c
 8001340:	0800727c 	.word	0x0800727c
 8001344:	08007298 	.word	0x08007298
 8001348:	080072c4 	.word	0x080072c4
 800134c:	080072e4 	.word	0x080072e4
 8001350:	08007304 	.word	0x08007304
 8001354:	08007328 	.word	0x08007328
 8001358:	0800733c 	.word	0x0800733c
 800135c:	08007360 	.word	0x08007360
 8001360:	08007398 	.word	0x08007398
 8001364:	080073ac 	.word	0x080073ac
 8001368:	080073d4 	.word	0x080073d4
 800136c:	08007404 	.word	0x08007404
 8001370:	08007438 	.word	0x08007438
            handle->diagnostics.allocated += fragment_size;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137c:	441a      	add	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            O1HEAP_ASSERT(handle->diagnostics.allocated <= handle->diagnostics.capacity);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001390:	429a      	cmp	r2, r3
 8001392:	d906      	bls.n	80013a2 <o1heapAllocate+0x33e>
 8001394:	4b34      	ldr	r3, [pc, #208]	; (8001468 <o1heapAllocate+0x404>)
 8001396:	4a35      	ldr	r2, [pc, #212]	; (800146c <o1heapAllocate+0x408>)
 8001398:	f240 1161 	movw	r1, #353	; 0x161
 800139c:	4834      	ldr	r0, [pc, #208]	; (8001470 <o1heapAllocate+0x40c>)
 800139e:	f004 fb7d 	bl	8005a9c <__assert_func>
            if (O1HEAP_LIKELY(handle->diagnostics.peak_allocated < handle->diagnostics.allocated))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ae:	429a      	cmp	r2, r3
 80013b0:	bf34      	ite	cc
 80013b2:	2301      	movcc	r3, #1
 80013b4:	2300      	movcs	r3, #0
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <o1heapAllocate+0x364>
            {
                handle->diagnostics.peak_allocated = handle->diagnostics.allocated;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            }

            // Finalize the fragment we just allocated.
            O1HEAP_ASSERT(frag->header.size >= amount + O1HEAP_ALIGNMENT);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	3310      	adds	r3, #16
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d206      	bcs.n	80013e2 <o1heapAllocate+0x37e>
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <o1heapAllocate+0x410>)
 80013d6:	4a25      	ldr	r2, [pc, #148]	; (800146c <o1heapAllocate+0x408>)
 80013d8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80013dc:	4824      	ldr	r0, [pc, #144]	; (8001470 <o1heapAllocate+0x40c>)
 80013de:	f004 fb5d 	bl	8005a9c <__assert_func>
            frag->header.used = true;
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	2201      	movs	r2, #1
 80013e6:	731a      	strb	r2, [r3, #12]

            out = ((uint8_t*) frag) + O1HEAP_ALIGNMENT;
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	3310      	adds	r3, #16
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
 80013ee:	e006      	b.n	80013fe <o1heapAllocate+0x39a>
        }
    }
    else
    {
        invoke(handle->critical_section_enter);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fc15 	bl	8000c26 <invoke>
 80013fc:	e000      	b.n	8001400 <o1heapAllocate+0x39c>
    {
 80013fe:	bf00      	nop
    }

    // Update the diagnostics.
    if (O1HEAP_LIKELY(handle->diagnostics.peak_request_size < amount))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	429a      	cmp	r2, r3
 800140a:	bf8c      	ite	hi
 800140c:	2301      	movhi	r3, #1
 800140e:	2300      	movls	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <o1heapAllocate+0x3ba>
    {
        handle->diagnostics.peak_request_size = amount;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
    if (O1HEAP_LIKELY((out == NULL) && (amount > 0U)))
 800141e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf0c      	ite	eq
 8001424:	2301      	moveq	r3, #1
 8001426:	2300      	movne	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d010      	beq.n	8001450 <o1heapAllocate+0x3ec>
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf14      	ite	ne
 8001434:	2301      	movne	r3, #1
 8001436:	2300      	moveq	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d008      	beq.n	8001450 <o1heapAllocate+0x3ec>
    {
        handle->diagnostics.oom_count++;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8001444:	1c54      	adds	r4, r2, #1
 8001446:	f143 0500 	adc.w	r5, r3, #0
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	e9c3 4528 	strd	r4, r5, [r3, #160]	; 0xa0
    }

    invoke(handle->critical_section_leave);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fbe5 	bl	8000c26 <invoke>
    return out;
 800145c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800145e:	4618      	mov	r0, r3
 8001460:	3730      	adds	r7, #48	; 0x30
 8001462:	46bd      	mov	sp, r7
 8001464:	bdb0      	pop	{r4, r5, r7, pc}
 8001466:	bf00      	nop
 8001468:	0800747c 	.word	0x0800747c
 800146c:	08007a68 	.word	0x08007a68
 8001470:	08006fb0 	.word	0x08006fb0
 8001474:	080074bc 	.word	0x080074bc

08001478 <o1heapFree>:

void o1heapFree(O1HeapInstance* const handle, void* const pointer)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
    O1HEAP_ASSERT(handle != NULL);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d106      	bne.n	8001496 <o1heapFree+0x1e>
 8001488:	4b9d      	ldr	r3, [pc, #628]	; (8001700 <o1heapFree+0x288>)
 800148a:	4a9e      	ldr	r2, [pc, #632]	; (8001704 <o1heapFree+0x28c>)
 800148c:	f240 1183 	movw	r1, #387	; 0x183
 8001490:	489d      	ldr	r0, [pc, #628]	; (8001708 <o1heapFree+0x290>)
 8001492:	f004 fb03 	bl	8005a9c <__assert_func>
    O1HEAP_ASSERT(handle->diagnostics.capacity <= FRAGMENT_SIZE_MAX);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014a0:	d906      	bls.n	80014b0 <o1heapFree+0x38>
 80014a2:	4b9a      	ldr	r3, [pc, #616]	; (800170c <o1heapFree+0x294>)
 80014a4:	4a97      	ldr	r2, [pc, #604]	; (8001704 <o1heapFree+0x28c>)
 80014a6:	f44f 71c2 	mov.w	r1, #388	; 0x184
 80014aa:	4897      	ldr	r0, [pc, #604]	; (8001708 <o1heapFree+0x290>)
 80014ac:	f004 faf6 	bl	8005a9c <__assert_func>
    if (O1HEAP_LIKELY(pointer != NULL))  // NULL pointer is a no-op.
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	bf14      	ite	ne
 80014b6:	2301      	movne	r3, #1
 80014b8:	2300      	moveq	r3, #0
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 8170 	beq.w	80017a2 <o1heapFree+0x32a>
    {
        Fragment* const frag = (Fragment*) (void*) (((uint8_t*) pointer) - O1HEAP_ALIGNMENT);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	3b10      	subs	r3, #16
 80014c6:	617b      	str	r3, [r7, #20]

        // Check for heap corruption in debug builds.
        O1HEAP_ASSERT(((size_t) frag) % sizeof(Fragment*) == 0U);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d006      	beq.n	80014e0 <o1heapFree+0x68>
 80014d2:	4b8f      	ldr	r3, [pc, #572]	; (8001710 <o1heapFree+0x298>)
 80014d4:	4a8b      	ldr	r2, [pc, #556]	; (8001704 <o1heapFree+0x28c>)
 80014d6:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80014da:	488b      	ldr	r0, [pc, #556]	; (8001708 <o1heapFree+0x290>)
 80014dc:	f004 fade 	bl	8005a9c <__assert_func>
        O1HEAP_ASSERT(((size_t) frag) >= (((size_t) handle) + INSTANCE_SIZE_PADDED));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d906      	bls.n	80014fa <o1heapFree+0x82>
 80014ec:	4b89      	ldr	r3, [pc, #548]	; (8001714 <o1heapFree+0x29c>)
 80014ee:	4a85      	ldr	r2, [pc, #532]	; (8001704 <o1heapFree+0x28c>)
 80014f0:	f240 118b 	movw	r1, #395	; 0x18b
 80014f4:	4884      	ldr	r0, [pc, #528]	; (8001708 <o1heapFree+0x290>)
 80014f6:	f004 fad1 	bl	8005a9c <__assert_func>
        O1HEAP_ASSERT(((size_t) frag) <=
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	429a      	cmp	r2, r3
 800150c:	d206      	bcs.n	800151c <o1heapFree+0xa4>
 800150e:	4b82      	ldr	r3, [pc, #520]	; (8001718 <o1heapFree+0x2a0>)
 8001510:	4a7c      	ldr	r2, [pc, #496]	; (8001704 <o1heapFree+0x28c>)
 8001512:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8001516:	487c      	ldr	r0, [pc, #496]	; (8001708 <o1heapFree+0x290>)
 8001518:	f004 fac0 	bl	8005a9c <__assert_func>
                      (((size_t) handle) + INSTANCE_SIZE_PADDED + handle->diagnostics.capacity - FRAGMENT_SIZE_MIN));
        O1HEAP_ASSERT(frag->header.used);  // Catch double-free
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	7b1b      	ldrb	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d106      	bne.n	8001532 <o1heapFree+0xba>
 8001524:	4b7d      	ldr	r3, [pc, #500]	; (800171c <o1heapFree+0x2a4>)
 8001526:	4a77      	ldr	r2, [pc, #476]	; (8001704 <o1heapFree+0x28c>)
 8001528:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 800152c:	4876      	ldr	r0, [pc, #472]	; (8001708 <o1heapFree+0x290>)
 800152e:	f004 fab5 	bl	8005a9c <__assert_func>
        O1HEAP_ASSERT(((size_t) frag->header.next) % sizeof(Fragment*) == 0U);
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d006      	beq.n	800154c <o1heapFree+0xd4>
 800153e:	4b78      	ldr	r3, [pc, #480]	; (8001720 <o1heapFree+0x2a8>)
 8001540:	4a70      	ldr	r2, [pc, #448]	; (8001704 <o1heapFree+0x28c>)
 8001542:	f240 118f 	movw	r1, #399	; 0x18f
 8001546:	4870      	ldr	r0, [pc, #448]	; (8001708 <o1heapFree+0x290>)
 8001548:	f004 faa8 	bl	8005a9c <__assert_func>
        O1HEAP_ASSERT(((size_t) frag->header.prev) % sizeof(Fragment*) == 0U);
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d006      	beq.n	8001566 <o1heapFree+0xee>
 8001558:	4b72      	ldr	r3, [pc, #456]	; (8001724 <o1heapFree+0x2ac>)
 800155a:	4a6a      	ldr	r2, [pc, #424]	; (8001704 <o1heapFree+0x28c>)
 800155c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001560:	4869      	ldr	r0, [pc, #420]	; (8001708 <o1heapFree+0x290>)
 8001562:	f004 fa9b 	bl	8005a9c <__assert_func>
        O1HEAP_ASSERT(frag->header.size >= FRAGMENT_SIZE_MIN);
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b1f      	cmp	r3, #31
 800156c:	d806      	bhi.n	800157c <o1heapFree+0x104>
 800156e:	4b6e      	ldr	r3, [pc, #440]	; (8001728 <o1heapFree+0x2b0>)
 8001570:	4a64      	ldr	r2, [pc, #400]	; (8001704 <o1heapFree+0x28c>)
 8001572:	f240 1191 	movw	r1, #401	; 0x191
 8001576:	4864      	ldr	r0, [pc, #400]	; (8001708 <o1heapFree+0x290>)
 8001578:	f004 fa90 	bl	8005a9c <__assert_func>
        O1HEAP_ASSERT(frag->header.size <= handle->diagnostics.capacity);
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001586:	429a      	cmp	r2, r3
 8001588:	d906      	bls.n	8001598 <o1heapFree+0x120>
 800158a:	4b68      	ldr	r3, [pc, #416]	; (800172c <o1heapFree+0x2b4>)
 800158c:	4a5d      	ldr	r2, [pc, #372]	; (8001704 <o1heapFree+0x28c>)
 800158e:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8001592:	485d      	ldr	r0, [pc, #372]	; (8001708 <o1heapFree+0x290>)
 8001594:	f004 fa82 	bl	8005a9c <__assert_func>
        O1HEAP_ASSERT((frag->header.size % FRAGMENT_SIZE_MIN) == 0U);
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 031f 	and.w	r3, r3, #31
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <o1heapFree+0x13a>
 80015a4:	4b62      	ldr	r3, [pc, #392]	; (8001730 <o1heapFree+0x2b8>)
 80015a6:	4a57      	ldr	r2, [pc, #348]	; (8001704 <o1heapFree+0x28c>)
 80015a8:	f240 1193 	movw	r1, #403	; 0x193
 80015ac:	4856      	ldr	r0, [pc, #344]	; (8001708 <o1heapFree+0x290>)
 80015ae:	f004 fa75 	bl	8005a9c <__assert_func>

        invoke(handle->critical_section_enter);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fb34 	bl	8000c26 <invoke>

        // Even if we're going to drop the fragment later, mark it free anyway to prevent double-free.
        frag->header.used = false;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2200      	movs	r2, #0
 80015c2:	731a      	strb	r2, [r3, #12]

        // Update the diagnostics. It must be done before merging because it invalidates the fragment size information.
        O1HEAP_ASSERT(handle->diagnostics.allocated >= frag->header.size);  // Heap corruption check.
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d206      	bcs.n	80015e0 <o1heapFree+0x168>
 80015d2:	4b58      	ldr	r3, [pc, #352]	; (8001734 <o1heapFree+0x2bc>)
 80015d4:	4a4b      	ldr	r2, [pc, #300]	; (8001704 <o1heapFree+0x28c>)
 80015d6:	f240 119b 	movw	r1, #411	; 0x19b
 80015da:	484b      	ldr	r0, [pc, #300]	; (8001708 <o1heapFree+0x290>)
 80015dc:	f004 fa5e 	bl	8005a9c <__assert_func>
        handle->diagnostics.allocated -= frag->header.size;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	1ad2      	subs	r2, r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        // Merge with siblings and insert the returned fragment into the appropriate bin and update metadata.
        Fragment* const prev       = frag->header.prev;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	613b      	str	r3, [r7, #16]
        Fragment* const next       = frag->header.next;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
        const bool      join_left  = (prev != NULL) && (!prev->header.used);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d008      	beq.n	8001616 <o1heapFree+0x19e>
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	7b1b      	ldrb	r3, [r3, #12]
 8001608:	f083 0301 	eor.w	r3, r3, #1
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <o1heapFree+0x19e>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <o1heapFree+0x1a0>
 8001616:	2300      	movs	r3, #0
 8001618:	72fb      	strb	r3, [r7, #11]
 800161a:	7afb      	ldrb	r3, [r7, #11]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	72fb      	strb	r3, [r7, #11]
        const bool      join_right = (next != NULL) && (!next->header.used);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d008      	beq.n	800163a <o1heapFree+0x1c2>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	7b1b      	ldrb	r3, [r3, #12]
 800162c:	f083 0301 	eor.w	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <o1heapFree+0x1c2>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <o1heapFree+0x1c4>
 800163a:	2300      	movs	r3, #0
 800163c:	72bb      	strb	r3, [r7, #10]
 800163e:	7abb      	ldrb	r3, [r7, #10]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	72bb      	strb	r3, [r7, #10]
        if (join_left && join_right)  // [ prev ][ this ][ next ] => [ ------- prev ------- ]
 8001646:	7afb      	ldrb	r3, [r7, #11]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d032      	beq.n	80016b2 <o1heapFree+0x23a>
 800164c:	7abb      	ldrb	r3, [r7, #10]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d02f      	beq.n	80016b2 <o1heapFree+0x23a>
        {
            unbin(handle, prev);
 8001652:	6939      	ldr	r1, [r7, #16]
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff fb91 	bl	8000d7c <unbin>
            unbin(handle, next);
 800165a:	68f9      	ldr	r1, [r7, #12]
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff fb8d 	bl	8000d7c <unbin>
            prev->header.size += frag->header.size + next->header.size;
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	6899      	ldr	r1, [r3, #8]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	440b      	add	r3, r1
 8001670:	441a      	add	r2, r3
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	609a      	str	r2, [r3, #8]
            frag->header.size = 0;  // Invalidate the dropped fragment headers to prevent double-free.
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
            next->header.size = 0;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
            O1HEAP_ASSERT((prev->header.size % FRAGMENT_SIZE_MIN) == 0U);
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <o1heapFree+0x224>
 800168e:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <o1heapFree+0x2c0>)
 8001690:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <o1heapFree+0x28c>)
 8001692:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001696:	481c      	ldr	r0, [pc, #112]	; (8001708 <o1heapFree+0x290>)
 8001698:	f004 fa00 	bl	8005a9c <__assert_func>
            interlink(prev, next->header.next);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	6938      	ldr	r0, [r7, #16]
 80016a4:	f7ff facc 	bl	8000c40 <interlink>
            rebin(handle, prev);
 80016a8:	6939      	ldr	r1, [r7, #16]
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff faea 	bl	8000c84 <rebin>
 80016b0:	e071      	b.n	8001796 <o1heapFree+0x31e>
        }
        else if (join_left)  // [ prev ][ this ][ next ] => [ --- prev --- ][ next ]
 80016b2:	7afb      	ldrb	r3, [r7, #11]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d041      	beq.n	800173c <o1heapFree+0x2c4>
        {
            unbin(handle, prev);
 80016b8:	6939      	ldr	r1, [r7, #16]
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fb5e 	bl	8000d7c <unbin>
            prev->header.size += frag->header.size;
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	441a      	add	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	609a      	str	r2, [r3, #8]
            frag->header.size = 0;
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
            O1HEAP_ASSERT((prev->header.size % FRAGMENT_SIZE_MIN) == 0U);
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d006      	beq.n	80016ee <o1heapFree+0x276>
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <o1heapFree+0x2c0>)
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <o1heapFree+0x28c>)
 80016e4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80016e8:	4807      	ldr	r0, [pc, #28]	; (8001708 <o1heapFree+0x290>)
 80016ea:	f004 f9d7 	bl	8005a9c <__assert_func>
            interlink(prev, next);
 80016ee:	68f9      	ldr	r1, [r7, #12]
 80016f0:	6938      	ldr	r0, [r7, #16]
 80016f2:	f7ff faa5 	bl	8000c40 <interlink>
            rebin(handle, prev);
 80016f6:	6939      	ldr	r1, [r7, #16]
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fac3 	bl	8000c84 <rebin>
 80016fe:	e04a      	b.n	8001796 <o1heapFree+0x31e>
 8001700:	08006f98 	.word	0x08006f98
 8001704:	08007a80 	.word	0x08007a80
 8001708:	08006fb0 	.word	0x08006fb0
 800170c:	080071ac 	.word	0x080071ac
 8001710:	080074f0 	.word	0x080074f0
 8001714:	0800751c 	.word	0x0800751c
 8001718:	0800759c 	.word	0x0800759c
 800171c:	08007658 	.word	0x08007658
 8001720:	0800766c 	.word	0x0800766c
 8001724:	080076a4 	.word	0x080076a4
 8001728:	080076dc 	.word	0x080076dc
 800172c:	08007710 	.word	0x08007710
 8001730:	08007360 	.word	0x08007360
 8001734:	08007744 	.word	0x08007744
 8001738:	08007778 	.word	0x08007778
        }
        else if (join_right)  // [ prev ][ this ][ next ] => [ prev ][ --- this --- ]
 800173c:	7abb      	ldrb	r3, [r7, #10]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d025      	beq.n	800178e <o1heapFree+0x316>
        {
            unbin(handle, next);
 8001742:	68f9      	ldr	r1, [r7, #12]
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff fb19 	bl	8000d7c <unbin>
            frag->header.size += next->header.size;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	441a      	add	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	609a      	str	r2, [r3, #8]
            next->header.size = 0;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
            O1HEAP_ASSERT((frag->header.size % FRAGMENT_SIZE_MIN) == 0U);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	2b00      	cmp	r3, #0
 8001768:	d006      	beq.n	8001778 <o1heapFree+0x300>
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <o1heapFree+0x334>)
 800176c:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <o1heapFree+0x338>)
 800176e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001772:	4810      	ldr	r0, [pc, #64]	; (80017b4 <o1heapFree+0x33c>)
 8001774:	f004 f992 	bl	8005a9c <__assert_func>
            interlink(frag, next->header.next);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	6978      	ldr	r0, [r7, #20]
 8001780:	f7ff fa5e 	bl	8000c40 <interlink>
            rebin(handle, frag);
 8001784:	6979      	ldr	r1, [r7, #20]
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff fa7c 	bl	8000c84 <rebin>
 800178c:	e003      	b.n	8001796 <o1heapFree+0x31e>
        }
        else
        {
            rebin(handle, frag);
 800178e:	6979      	ldr	r1, [r7, #20]
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fa77 	bl	8000c84 <rebin>
        }

        invoke(handle->critical_section_leave);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fa42 	bl	8000c26 <invoke>
    }
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	08007360 	.word	0x08007360
 80017b0:	08007a80 	.word	0x08007a80
 80017b4:	08006fb0 	.word	0x08006fb0

080017b8 <g_payload_init>:
parser_stat_t parser_stat = IDEL;
uint8_t drone_data_buf[256];
uint32_t photo = 0;

void g_payload_init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	g_o1heap_init();
 80017bc:	f000 fc1a 	bl	8001ff4 <g_o1heap_init>
	g_queue_init(&can_msg_queue);
 80017c0:	480b      	ldr	r0, [pc, #44]	; (80017f0 <g_payload_init+0x38>)
 80017c2:	f000 fc29 	bl	8002018 <g_queue_init>

	drone_can_msg_head.StdId = DEVICE_ID;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <g_payload_init+0x3c>)
 80017c8:	f240 4201 	movw	r2, #1025	; 0x401
 80017cc:	601a      	str	r2, [r3, #0]
	drone_can_msg_head.ExtId = 0;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <g_payload_init+0x3c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
	drone_can_msg_head.IDE = CAN_ID_STD;
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <g_payload_init+0x3c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
	drone_can_msg_head.RTR = CAN_RTR_DATA;
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <g_payload_init+0x3c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
	drone_can_msg_head.DLC = 8;
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <g_payload_init+0x3c>)
 80017e2:	2208      	movs	r2, #8
 80017e4:	611a      	str	r2, [r3, #16]
	drone_can_msg_head.TransmitGlobalTime = DISABLE;
 80017e6:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <g_payload_init+0x3c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	751a      	strb	r2, [r3, #20]
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20001620 	.word	0x20001620
 80017f4:	200014fc 	.word	0x200014fc

080017f8 <g_send_to_drone>:

void g_send_to_drone(void *addr, uint8_t len)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	70fb      	strb	r3, [r7, #3]
	can_msg_t msg_to_drone;
	uint8_t i, j, pack_count, remain_byte;
	pack_count = len / 8;
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	08db      	lsrs	r3, r3, #3
 8001808:	777b      	strb	r3, [r7, #29]
	remain_byte = len % 8;
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	773b      	strb	r3, [r7, #28]

	for (j = 0; j < pack_count; j++)
 8001812:	2300      	movs	r3, #0
 8001814:	77bb      	strb	r3, [r7, #30]
 8001816:	e021      	b.n	800185c <g_send_to_drone+0x64>
	{
		for (i = 0; i < 8; i++)
 8001818:	2300      	movs	r3, #0
 800181a:	77fb      	strb	r3, [r7, #31]
 800181c:	e010      	b.n	8001840 <g_send_to_drone+0x48>
		{
			msg_to_drone.data[i] = ((uint8_t*) addr)[j * 8 + i];
 800181e:	7fbb      	ldrb	r3, [r7, #30]
 8001820:	00da      	lsls	r2, r3, #3
 8001822:	7ffb      	ldrb	r3, [r7, #31]
 8001824:	4413      	add	r3, r2
 8001826:	461a      	mov	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	441a      	add	r2, r3
 800182c:	7ffb      	ldrb	r3, [r7, #31]
 800182e:	7812      	ldrb	r2, [r2, #0]
 8001830:	f107 0120 	add.w	r1, r7, #32
 8001834:	440b      	add	r3, r1
 8001836:	f803 2c0f 	strb.w	r2, [r3, #-15]
		for (i = 0; i < 8; i++)
 800183a:	7ffb      	ldrb	r3, [r7, #31]
 800183c:	3301      	adds	r3, #1
 800183e:	77fb      	strb	r3, [r7, #31]
 8001840:	7ffb      	ldrb	r3, [r7, #31]
 8001842:	2b07      	cmp	r3, #7
 8001844:	d9eb      	bls.n	800181e <g_send_to_drone+0x26>
		}
		msg_to_drone.len = 8;
 8001846:	2308      	movs	r3, #8
 8001848:	743b      	strb	r3, [r7, #16]
		queue_push(&can_msg_queue, &msg_to_drone);
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	4619      	mov	r1, r3
 8001850:	4818      	ldr	r0, [pc, #96]	; (80018b4 <g_send_to_drone+0xbc>)
 8001852:	f000 fc37 	bl	80020c4 <queue_push>
	for (j = 0; j < pack_count; j++)
 8001856:	7fbb      	ldrb	r3, [r7, #30]
 8001858:	3301      	adds	r3, #1
 800185a:	77bb      	strb	r3, [r7, #30]
 800185c:	7fba      	ldrb	r2, [r7, #30]
 800185e:	7f7b      	ldrb	r3, [r7, #29]
 8001860:	429a      	cmp	r2, r3
 8001862:	d3d9      	bcc.n	8001818 <g_send_to_drone+0x20>
		//add error handle
	}
	if (remain_byte > 0)
 8001864:	7f3b      	ldrb	r3, [r7, #28]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d01f      	beq.n	80018aa <g_send_to_drone+0xb2>
	{
		for (i = 0; i < remain_byte; i++)
 800186a:	2300      	movs	r3, #0
 800186c:	77fb      	strb	r3, [r7, #31]
 800186e:	e010      	b.n	8001892 <g_send_to_drone+0x9a>
		{
			msg_to_drone.data[i] = ((uint8_t*) addr)[j * 8 + i];
 8001870:	7fbb      	ldrb	r3, [r7, #30]
 8001872:	00da      	lsls	r2, r3, #3
 8001874:	7ffb      	ldrb	r3, [r7, #31]
 8001876:	4413      	add	r3, r2
 8001878:	461a      	mov	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	441a      	add	r2, r3
 800187e:	7ffb      	ldrb	r3, [r7, #31]
 8001880:	7812      	ldrb	r2, [r2, #0]
 8001882:	f107 0120 	add.w	r1, r7, #32
 8001886:	440b      	add	r3, r1
 8001888:	f803 2c0f 	strb.w	r2, [r3, #-15]
		for (i = 0; i < remain_byte; i++)
 800188c:	7ffb      	ldrb	r3, [r7, #31]
 800188e:	3301      	adds	r3, #1
 8001890:	77fb      	strb	r3, [r7, #31]
 8001892:	7ffa      	ldrb	r2, [r7, #31]
 8001894:	7f3b      	ldrb	r3, [r7, #28]
 8001896:	429a      	cmp	r2, r3
 8001898:	d3ea      	bcc.n	8001870 <g_send_to_drone+0x78>
		}
		msg_to_drone.len = remain_byte;
 800189a:	7f3b      	ldrb	r3, [r7, #28]
 800189c:	743b      	strb	r3, [r7, #16]
		queue_push(&can_msg_queue, &msg_to_drone);
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	4619      	mov	r1, r3
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <g_send_to_drone+0xbc>)
 80018a6:	f000 fc0d 	bl	80020c4 <queue_push>
		//add error handle
	}
//	send_can_msg_to_drone();
}
 80018aa:	bf00      	nop
 80018ac:	3720      	adds	r7, #32
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20001620 	.word	0x20001620

080018b8 <request_identify>:

static void request_identify(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
	msg_to_drone_request_identify_t request_identify;

	request_identify.head = SEND_TO_DRONE_HEAD;
 80018be:	23a5      	movs	r3, #165	; 0xa5
 80018c0:	703b      	strb	r3, [r7, #0]
	request_identify.type = TYPE_REQUEST_IDENTIFY;
 80018c2:	23fd      	movs	r3, #253	; 0xfd
 80018c4:	707b      	strb	r3, [r7, #1]
	request_identify.len = sizeof(request_identify) - 2;
 80018c6:	2303      	movs	r3, #3
 80018c8:	70bb      	strb	r3, [r7, #2]

	request_identify.data = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	70fb      	strb	r3, [r7, #3]

	request_identify.crc = g_generate_crc((uint8_t*) &(request_identify.type),
			request_identify.len);
 80018ce:	78bb      	ldrb	r3, [r7, #2]
	request_identify.crc = g_generate_crc((uint8_t*) &(request_identify.type),
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	463b      	mov	r3, r7
 80018d4:	3301      	adds	r3, #1
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe ffd7 	bl	800088c <g_generate_crc>
 80018de:	4603      	mov	r3, r0
 80018e0:	713b      	strb	r3, [r7, #4]
	g_send_to_drone(&request_identify, sizeof(request_identify));
 80018e2:	463b      	mov	r3, r7
 80018e4:	2105      	movs	r1, #5
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff86 	bl	80017f8 <g_send_to_drone>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <get_compile_date>:

static void get_compile_date(uint8_t *year, uint8_t *month, uint8_t *day)
{
 80018f4:	b5b0      	push	{r4, r5, r7, lr}
 80018f6:	b094      	sub	sp, #80	; 0x50
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
	uint8_t i;
	const char *p_month[] =
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <get_compile_date+0xac>)
 8001902:	f107 041c 	add.w	r4, r7, #28
 8001906:	461d      	mov	r5, r3
 8001908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800190a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800190c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800190e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001910:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct",
			"Nov", "Dec" };
	const char Date[12] = __DATE__;
 8001918:	4a22      	ldr	r2, [pc, #136]	; (80019a4 <get_compile_date+0xb0>)
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001920:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (i = 0; i < 12; i++)
 8001924:	2300      	movs	r3, #0
 8001926:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800192a:	e01c      	b.n	8001966 <get_compile_date+0x72>
	{
		if (memcmp(Date, p_month[i], 3) == 0)
 800192c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001936:	4413      	add	r3, r2
 8001938:	f853 1c34 	ldr.w	r1, [r3, #-52]
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	2203      	movs	r2, #3
 8001942:	4618      	mov	r0, r3
 8001944:	f004 f908 	bl	8005b58 <memcmp>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d106      	bne.n	800195c <get_compile_date+0x68>
		{
			*month = i + 1;
 800194e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001952:	3301      	adds	r3, #1
 8001954:	b2da      	uxtb	r2, r3
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	701a      	strb	r2, [r3, #0]
			break;
 800195a:	e008      	b.n	800196e <get_compile_date+0x7a>
	for (i = 0; i < 12; i++)
 800195c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001960:	3301      	adds	r3, #1
 8001962:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001966:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800196a:	2b0b      	cmp	r3, #11
 800196c:	d9de      	bls.n	800192c <get_compile_date+0x38>
		}
	}
	*year = (uint8_t) atoi(Date + 9);
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	3309      	adds	r3, #9
 8001974:	4618      	mov	r0, r3
 8001976:	f004 f8af 	bl	8005ad8 <atoi>
 800197a:	4603      	mov	r3, r0
 800197c:	b2da      	uxtb	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	701a      	strb	r2, [r3, #0]
	*day = (uint8_t) atoi(Date + 4);
 8001982:	f107 0310 	add.w	r3, r7, #16
 8001986:	3304      	adds	r3, #4
 8001988:	4618      	mov	r0, r3
 800198a:	f004 f8a5 	bl	8005ad8 <atoi>
 800198e:	4603      	mov	r3, r0
 8001990:	b2da      	uxtb	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	701a      	strb	r2, [r3, #0]
}
 8001996:	bf00      	nop
 8001998:	3750      	adds	r7, #80	; 0x50
 800199a:	46bd      	mov	sp, r7
 800199c:	bdb0      	pop	{r4, r5, r7, pc}
 800199e:	bf00      	nop
 80019a0:	080077e0 	.word	0x080077e0
 80019a4:	08007810 	.word	0x08007810

080019a8 <g_get_version>:

uint32_t g_get_version(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
	uint32_t version = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
	uint8_t year = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	70fb      	strb	r3, [r7, #3]
	uint8_t month = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	70bb      	strb	r3, [r7, #2]
	uint8_t day = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	707b      	strb	r3, [r7, #1]

	get_compile_date(&year, &month, &day);
 80019be:	1c7a      	adds	r2, r7, #1
 80019c0:	1cb9      	adds	r1, r7, #2
 80019c2:	1cfb      	adds	r3, r7, #3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff95 	bl	80018f4 <get_compile_date>

	version = HARDWARE_VERSION << 30 | FUNCTION_VERSION << 24
			| OPT_VERSION << 16 | year << 9 | month << 5 | day;
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	025b      	lsls	r3, r3, #9
 80019ce:	f043 4302 	orr.w	r3, r3, #2181038080	; 0x82000000
 80019d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019d6:	78ba      	ldrb	r2, [r7, #2]
 80019d8:	0152      	lsls	r2, r2, #5
 80019da:	4313      	orrs	r3, r2
 80019dc:	787a      	ldrb	r2, [r7, #1]
 80019de:	4313      	orrs	r3, r2
	version = HARDWARE_VERSION << 30 | FUNCTION_VERSION << 24
 80019e0:	607b      	str	r3, [r7, #4]

	return version;
 80019e2:	687b      	ldr	r3, [r7, #4]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <send_photo_count_to_drone>:

void send_photo_count_to_drone(uint16_t photo_count)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	80fb      	strh	r3, [r7, #6]
	msg_to_drone_photo_count_t msg_to_drone_photo_count;
	msg_to_drone_photo_count.head = SEND_TO_DRONE_HEAD;
 80019f6:	23a5      	movs	r3, #165	; 0xa5
 80019f8:	723b      	strb	r3, [r7, #8]
	msg_to_drone_photo_count.type = TYPE_PHOTO_COUNT;
 80019fa:	2304      	movs	r3, #4
 80019fc:	727b      	strb	r3, [r7, #9]
	msg_to_drone_photo_count.len = sizeof(msg_to_drone_photo_count) - 2;
 80019fe:	2304      	movs	r3, #4
 8001a00:	72bb      	strb	r3, [r7, #10]
	msg_to_drone_photo_count.photo_count = photo_count;
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	f8a7 300b 	strh.w	r3, [r7, #11]
	msg_to_drone_photo_count.crc = g_generate_crc(
			(uint8_t*) &(msg_to_drone_photo_count.type),
			msg_to_drone_photo_count.len);
 8001a08:	7abb      	ldrb	r3, [r7, #10]
	msg_to_drone_photo_count.crc = g_generate_crc(
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	f107 0308 	add.w	r3, r7, #8
 8001a10:	3301      	adds	r3, #1
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe ff39 	bl	800088c <g_generate_crc>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	737b      	strb	r3, [r7, #13]
	g_send_to_drone(&msg_to_drone_photo_count,
 8001a1e:	f107 0308 	add.w	r3, r7, #8
 8001a22:	2106      	movs	r1, #6
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fee7 	bl	80017f8 <g_send_to_drone>
			sizeof(msg_to_drone_photo_count));
}
 8001a2a:	bf00      	nop
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <send_UID>:

void send_UID(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
	msg_to_drone_ID_t UID;

	UID.head = SEND_TO_DRONE_HEAD;
 8001a3a:	23a5      	movs	r3, #165	; 0xa5
 8001a3c:	713b      	strb	r3, [r7, #4]
	UID.type = TYPE_REQUEST_ID;
 8001a3e:	23fe      	movs	r3, #254	; 0xfe
 8001a40:	717b      	strb	r3, [r7, #5]
	UID.len = sizeof(UID) - 2;
 8001a42:	231a      	movs	r3, #26
 8001a44:	71bb      	strb	r3, [r7, #6]

	UID.vender_ID = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	71fb      	strb	r3, [r7, #7]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	723b      	strb	r3, [r7, #8]
	UID.payload_type = 0x1fd;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f063 0302 	orn	r3, r3, #2
 8001a54:	727b      	strb	r3, [r7, #9]
 8001a56:	2300      	movs	r3, #0
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	72bb      	strb	r3, [r7, #10]
	UID.UID[0] = *(uint32_t*) (0x1fff7a10);    //cpu_id[0]
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <send_UID+0x84>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f8c7 300b 	str.w	r3, [r7, #11]
	UID.UID[1] = *(uint32_t*) (0x1fff7a14);    //cpu_id[1];
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <send_UID+0x88>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f8c7 300f 	str.w	r3, [r7, #15]
	UID.UID[2] = *(uint32_t*) (0x1fff7a18);    //cpu_id[2];
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <send_UID+0x8c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f8c7 3013 	str.w	r3, [r7, #19]
	UID.UID[3] = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	75fb      	strb	r3, [r7, #23]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	763b      	strb	r3, [r7, #24]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	767b      	strb	r3, [r7, #25]
 8001a82:	2300      	movs	r3, #0
 8001a84:	76bb      	strb	r3, [r7, #26]
	UID.version = g_get_version();
 8001a86:	f7ff ff8f 	bl	80019a8 <g_get_version>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f8c7 301b 	str.w	r3, [r7, #27]

	UID.crc = g_generate_crc((uint8_t*) &(UID.type), UID.len);
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	3301      	adds	r3, #1
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fef6 	bl	800088c <g_generate_crc>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	77fb      	strb	r3, [r7, #31]
	g_send_to_drone(&UID, sizeof(UID));
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	211c      	movs	r1, #28
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fea5 	bl	80017f8 <g_send_to_drone>
}
 8001aae:	bf00      	nop
 8001ab0:	3720      	adds	r7, #32
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	1fff7a10 	.word	0x1fff7a10
 8001abc:	1fff7a14 	.word	0x1fff7a14
 8001ac0:	1fff7a18 	.word	0x1fff7a18

08001ac4 <send_page_info>:

void send_page_info(void)
{
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
	uint8_t len = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	77fb      	strb	r3, [r7, #31]
	msg_to_drone_fileinfo_t fileinfo;

	fileinfo.head = SEND_TO_DRONE_HEAD;
 8001ace:	23a5      	movs	r3, #165	; 0xa5
 8001ad0:	703b      	strb	r3, [r7, #0]
	fileinfo.type = TYPE_REQUEST_FILE;
 8001ad2:	23fc      	movs	r3, #252	; 0xfc
 8001ad4:	707b      	strb	r3, [r7, #1]

	fileinfo.width = 500;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f063 030b 	orn	r3, r3, #11
 8001adc:	70fb      	strb	r3, [r7, #3]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	713b      	strb	r3, [r7, #4]
	fileinfo.height = 270;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f043 030e 	orr.w	r3, r3, #14
 8001aec:	717b      	strb	r3, [r7, #5]
 8001aee:	2300      	movs	r3, #0
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	71bb      	strb	r3, [r7, #6]

	len = snprintf((char*) (fileinfo.filename), 20, "%s", "Common_Payload");
 8001af6:	463b      	mov	r3, r7
 8001af8:	1dd8      	adds	r0, r3, #7
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <send_page_info+0x84>)
 8001afc:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <send_page_info+0x88>)
 8001afe:	2114      	movs	r1, #20
 8001b00:	f004 fb3c 	bl	800617c <sniprintf>
 8001b04:	4603      	mov	r3, r0
 8001b06:	77fb      	strb	r3, [r7, #31]

	fileinfo.len = len + 6;
 8001b08:	7ffb      	ldrb	r3, [r7, #31]
 8001b0a:	3306      	adds	r3, #6
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	70bb      	strb	r3, [r7, #2]
	fileinfo.filename[len] = g_generate_crc((uint8_t*) &(fileinfo.type),
			fileinfo.len);
 8001b10:	78bb      	ldrb	r3, [r7, #2]
	fileinfo.filename[len] = g_generate_crc((uint8_t*) &(fileinfo.type),
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	7ffc      	ldrb	r4, [r7, #31]
 8001b16:	463b      	mov	r3, r7
 8001b18:	3301      	adds	r3, #1
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe feb5 	bl	800088c <g_generate_crc>
 8001b22:	4603      	mov	r3, r0
 8001b24:	461a      	mov	r2, r3
 8001b26:	f107 0320 	add.w	r3, r7, #32
 8001b2a:	4423      	add	r3, r4
 8001b2c:	f803 2c19 	strb.w	r2, [r3, #-25]
	g_send_to_drone(&fileinfo, fileinfo.len + 2);
 8001b30:	78bb      	ldrb	r3, [r7, #2]
 8001b32:	3302      	adds	r3, #2
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	463b      	mov	r3, r7
 8001b38:	4611      	mov	r1, r2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fe5c 	bl	80017f8 <g_send_to_drone>
}
 8001b40:	bf00      	nop
 8001b42:	3724      	adds	r7, #36	; 0x24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd90      	pop	{r4, r7, pc}
 8001b48:	0800781c 	.word	0x0800781c
 8001b4c:	0800782c 	.word	0x0800782c

08001b50 <g_identification>:

/**
 *identification procedure. called by SysTick_Handler() every 100ms.
 */
void g_identification(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	switch (identification_procedure)
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <g_identification+0x4c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d00f      	beq.n	8001b7c <g_identification+0x2c>
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	dc13      	bgt.n	8001b88 <g_identification+0x38>
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	dc02      	bgt.n	8001b6a <g_identification+0x1a>
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	da03      	bge.n	8001b70 <g_identification+0x20>
 8001b68:	e00e      	b.n	8001b88 <g_identification+0x38>
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d003      	beq.n	8001b76 <g_identification+0x26>
 8001b6e:	e00b      	b.n	8001b88 <g_identification+0x38>
	{
	case PROCEDURE_IDEL:
	case PROCEDURE_REQUEST_IDENTIFY:
		request_identify();
 8001b70:	f7ff fea2 	bl	80018b8 <request_identify>
		break;
 8001b74:	e00f      	b.n	8001b96 <g_identification+0x46>

	case PROCEDURE_SEND_ID:
		send_UID();
 8001b76:	f7ff ff5d 	bl	8001a34 <send_UID>
		break;
 8001b7a:	e00c      	b.n	8001b96 <g_identification+0x46>

	case PROCEDURE_SEND_PAGE:
		send_page_info();
 8001b7c:	f7ff ffa2 	bl	8001ac4 <send_page_info>
		identification_procedure = PROCEDURE_OK;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <g_identification+0x4c>)
 8001b82:	2204      	movs	r2, #4
 8001b84:	701a      	strb	r2, [r3, #0]
		break;
 8001b86:	e006      	b.n	8001b96 <g_identification+0x46>

	default:
		send_photo_count_to_drone(photo);
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <g_identification+0x50>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ff2c 	bl	80019ec <send_photo_count_to_drone>
		break;
 8001b94:	bf00      	nop
	}
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000090 	.word	0x20000090
 8001ba0:	20000094 	.word	0x20000094

08001ba4 <g_update_identification_procedure>:

/**
 *
 */
void g_update_identification_procedure(uint8_t data)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
	switch (data)
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d00d      	beq.n	8001bd0 <g_update_identification_procedure+0x2c>
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	dc0f      	bgt.n	8001bd8 <g_update_identification_procedure+0x34>
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d002      	beq.n	8001bc2 <g_update_identification_procedure+0x1e>
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d003      	beq.n	8001bc8 <g_update_identification_procedure+0x24>
	case 0x02:
		identification_procedure = PROCEDURE_SEND_PAGE;
		break;

	default:
		break;
 8001bc0:	e00a      	b.n	8001bd8 <g_update_identification_procedure+0x34>
		send_UID();
 8001bc2:	f7ff ff37 	bl	8001a34 <send_UID>
		break;
 8001bc6:	e008      	b.n	8001bda <g_update_identification_procedure+0x36>
		identification_procedure = PROCEDURE_SEND_ID;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <g_update_identification_procedure+0x40>)
 8001bca:	2202      	movs	r2, #2
 8001bcc:	701a      	strb	r2, [r3, #0]
		break;
 8001bce:	e004      	b.n	8001bda <g_update_identification_procedure+0x36>
		identification_procedure = PROCEDURE_SEND_PAGE;
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <g_update_identification_procedure+0x40>)
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	701a      	strb	r2, [r3, #0]
		break;
 8001bd6:	e000      	b.n	8001bda <g_update_identification_procedure+0x36>
		break;
 8001bd8:	bf00      	nop
	}
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000090 	.word	0x20000090

08001be8 <send_can_msg_to_drone>:


void send_can_msg_to_drone(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
	uint32_t mail_box;
	can_msg_t can_tx_msg;
	{
		mail_box = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 8001bee:	4811      	ldr	r0, [pc, #68]	; (8001c34 <send_can_msg_to_drone+0x4c>)
 8001bf0:	f001 fa9e 	bl	8003130 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	617b      	str	r3, [r7, #20]
		if(mail_box == 0){
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d015      	beq.n	8001c2a <send_can_msg_to_drone+0x42>
			//no free mailbox
			return;
		}

		if(queue_pop(&can_msg_queue, &can_tx_msg) == 0){
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	480d      	ldr	r0, [pc, #52]	; (8001c38 <send_can_msg_to_drone+0x50>)
 8001c04:	f000 fa1c 	bl	8002040 <queue_pop>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10e      	bne.n	8001c2c <send_can_msg_to_drone+0x44>
			drone_can_msg_head.DLC = can_tx_msg.len;
 8001c0e:	7a3b      	ldrb	r3, [r7, #8]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <send_can_msg_to_drone+0x54>)
 8001c14:	611a      	str	r2, [r3, #16]
			HAL_CAN_AddTxMessage(&hcan1, &drone_can_msg_head, can_tx_msg.data,
 8001c16:	f107 0114 	add.w	r1, r7, #20
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	1d5a      	adds	r2, r3, #5
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4906      	ldr	r1, [pc, #24]	; (8001c3c <send_can_msg_to_drone+0x54>)
 8001c22:	4804      	ldr	r0, [pc, #16]	; (8001c34 <send_can_msg_to_drone+0x4c>)
 8001c24:	f001 f960 	bl	8002ee8 <HAL_CAN_AddTxMessage>
 8001c28:	e000      	b.n	8001c2c <send_can_msg_to_drone+0x44>
			return;
 8001c2a:	bf00      	nop
							&mail_box);
		}
	}
}
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200014d4 	.word	0x200014d4
 8001c38:	20001620 	.word	0x20001620
 8001c3c:	200014fc 	.word	0x200014fc

08001c40 <g_handle_drone_instruction>:
void g_handle_drone_instruction(uint8_t *data)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	float value;
	switch (data[1])
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b21      	cmp	r3, #33	; 0x21
 8001c50:	dc4c      	bgt.n	8001cec <g_handle_drone_instruction+0xac>
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f340 8102 	ble.w	8001e5c <g_handle_drone_instruction+0x21c>
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	f200 80fe 	bhi.w	8001e5c <g_handle_drone_instruction+0x21c>
 8001c60:	a201      	add	r2, pc, #4	; (adr r2, 8001c68 <g_handle_drone_instruction+0x28>)
 8001c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c66:	bf00      	nop
 8001c68:	08001d91 	.word	0x08001d91
 8001c6c:	08001e5d 	.word	0x08001e5d
 8001c70:	08001e5d 	.word	0x08001e5d
 8001c74:	08001e35 	.word	0x08001e35
 8001c78:	08001e43 	.word	0x08001e43
 8001c7c:	08001cf5 	.word	0x08001cf5
 8001c80:	08001d05 	.word	0x08001d05
 8001c84:	08001d2b 	.word	0x08001d2b
 8001c88:	08001e5d 	.word	0x08001e5d
 8001c8c:	08001e5d 	.word	0x08001e5d
 8001c90:	08001e5d 	.word	0x08001e5d
 8001c94:	08001e5d 	.word	0x08001e5d
 8001c98:	08001e5d 	.word	0x08001e5d
 8001c9c:	08001d39 	.word	0x08001d39
 8001ca0:	08001e5d 	.word	0x08001e5d
 8001ca4:	08001e5d 	.word	0x08001e5d
 8001ca8:	08001e5d 	.word	0x08001e5d
 8001cac:	08001d65 	.word	0x08001d65
 8001cb0:	08001e5d 	.word	0x08001e5d
 8001cb4:	08001d15 	.word	0x08001d15
 8001cb8:	08001e5d 	.word	0x08001e5d
 8001cbc:	08001e5d 	.word	0x08001e5d
 8001cc0:	08001e5d 	.word	0x08001e5d
 8001cc4:	08001e5d 	.word	0x08001e5d
 8001cc8:	08001e5d 	.word	0x08001e5d
 8001ccc:	08001e5d 	.word	0x08001e5d
 8001cd0:	08001e5d 	.word	0x08001e5d
 8001cd4:	08001e5d 	.word	0x08001e5d
 8001cd8:	08001e5d 	.word	0x08001e5d
 8001cdc:	08001e5d 	.word	0x08001e5d
 8001ce0:	08001e5d 	.word	0x08001e5d
 8001ce4:	08001e5d 	.word	0x08001e5d
 8001ce8:	08001e5d 	.word	0x08001e5d
 8001cec:	2bff      	cmp	r3, #255	; 0xff
 8001cee:	f000 80af 	beq.w	8001e50 <g_handle_drone_instruction+0x210>

		g_update_identification_procedure(data[3]);

	default:

		break;
 8001cf2:	e0b3      	b.n	8001e5c <g_handle_drone_instruction+0x21c>
		g_pitch_control(data[3]);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3303      	adds	r3, #3
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fe36 	bl	800096e <g_pitch_control>
		break;
 8001d02:	e0ac      	b.n	8001e5e <g_handle_drone_instruction+0x21e>
		g_yaw_control(data[3]);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3303      	adds	r3, #3
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	b25b      	sxtb	r3, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fe39 	bl	8000984 <g_yaw_control>
		break;
 8001d12:	e0a4      	b.n	8001e5e <g_handle_drone_instruction+0x21e>
		gesture_info.x = *(int16_t*) &(data[3]);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f9b3 2003 	ldrsh.w	r2, [r3, #3]
 8001d1a:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <g_handle_drone_instruction+0x228>)
 8001d1c:	801a      	strh	r2, [r3, #0]
		gesture_info.y = *(int16_t*) &(data[5]);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f9b3 2005 	ldrsh.w	r2, [r3, #5]
 8001d24:	4b50      	ldr	r3, [pc, #320]	; (8001e68 <g_handle_drone_instruction+0x228>)
 8001d26:	805a      	strh	r2, [r3, #2]
		break;
 8001d28:	e099      	b.n	8001e5e <g_handle_drone_instruction+0x21e>
		g_gimbal_mode(data[3]);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3303      	adds	r3, #3
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fe32 	bl	800099a <g_gimbal_mode>
		break;
 8001d36:	e092      	b.n	8001e5e <g_handle_drone_instruction+0x21e>
		value = g_convert_float16_to_native_float(data[4] << 8 | data[3]);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	b21a      	sxth	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3303      	adds	r3, #3
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fdbd 	bl	80008d0 <g_convert_float16_to_native_float>
 8001d56:	ed87 0a03 	vstr	s0, [r7, #12]
		g_set_gimbal_pitch(value);
 8001d5a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d5e:	f7fe fe27 	bl	80009b0 <g_set_gimbal_pitch>
		break;
 8001d62:	e07c      	b.n	8001e5e <g_handle_drone_instruction+0x21e>
		value = g_convert_float16_to_native_float(data[4] << 8 | data[3]);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3304      	adds	r3, #4
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3303      	adds	r3, #3
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	4313      	orrs	r3, r2
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fda7 	bl	80008d0 <g_convert_float16_to_native_float>
 8001d82:	ed87 0a03 	vstr	s0, [r7, #12]
		g_set_gimbal_yaw(value);
 8001d86:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d8a:	f7fe fe1c 	bl	80009c6 <g_set_gimbal_yaw>
		break;
 8001d8e:	e066      	b.n	8001e5e <g_handle_drone_instruction+0x21e>
		gps_info.altitude = data[5] | data[6] << 8 | data[7] << 16
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3305      	adds	r3, #5
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3306      	adds	r3, #6
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3307      	adds	r3, #7
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	041b      	lsls	r3, r3, #16
 8001daa:	431a      	orrs	r2, r3
				| data[8] << 24;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3308      	adds	r3, #8
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	061b      	lsls	r3, r3, #24
 8001db4:	4313      	orrs	r3, r2
 8001db6:	461a      	mov	r2, r3
		gps_info.altitude = data[5] | data[6] << 8 | data[7] << 16
 8001db8:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <g_handle_drone_instruction+0x22c>)
 8001dba:	609a      	str	r2, [r3, #8]
		gps_info.lat = data[9] | data[10] << 8 | data[11] << 16
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3309      	adds	r3, #9
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	330a      	adds	r3, #10
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	330b      	adds	r3, #11
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	041b      	lsls	r3, r3, #16
 8001dd6:	431a      	orrs	r2, r3
				| data[12] << 24;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	330c      	adds	r3, #12
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	061b      	lsls	r3, r3, #24
 8001de0:	4313      	orrs	r3, r2
 8001de2:	461a      	mov	r2, r3
		gps_info.lat = data[9] | data[10] << 8 | data[11] << 16
 8001de4:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <g_handle_drone_instruction+0x22c>)
 8001de6:	601a      	str	r2, [r3, #0]
		gps_info.lng = data[13] | data[14] << 8 | data[15] << 16
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	330d      	adds	r3, #13
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	330e      	adds	r3, #14
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	431a      	orrs	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	330f      	adds	r3, #15
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	041b      	lsls	r3, r3, #16
 8001e02:	431a      	orrs	r2, r3
				| data[16] << 24;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3310      	adds	r3, #16
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	061b      	lsls	r3, r3, #24
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	461a      	mov	r2, r3
		gps_info.lng = data[13] | data[14] << 8 | data[15] << 16
 8001e10:	4b16      	ldr	r3, [pc, #88]	; (8001e6c <g_handle_drone_instruction+0x22c>)
 8001e12:	605a      	str	r2, [r3, #4]
		photo++;
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <g_handle_drone_instruction+0x230>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	4a15      	ldr	r2, [pc, #84]	; (8001e70 <g_handle_drone_instruction+0x230>)
 8001e1c:	6013      	str	r3, [r2, #0]
		g_take_photo(gps_info.altitude, gps_info.lat, gps_info.lng);
 8001e1e:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <g_handle_drone_instruction+0x22c>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	4618      	mov	r0, r3
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <g_handle_drone_instruction+0x22c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a10      	ldr	r2, [pc, #64]	; (8001e6c <g_handle_drone_instruction+0x22c>)
 8001e2a:	6852      	ldr	r2, [r2, #4]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f7fe fd87 	bl	8000940 <g_take_photo>
		break;
 8001e32:	e014      	b.n	8001e5e <g_handle_drone_instruction+0x21e>
		g_control_zoom(data[3]);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3303      	adds	r3, #3
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fdce 	bl	80009dc <g_control_zoom>
		break;
 8001e40:	e00d      	b.n	8001e5e <g_handle_drone_instruction+0x21e>
		g_record(data[3]);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3303      	adds	r3, #3
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fd85 	bl	8000958 <g_record>
		break;
 8001e4e:	e006      	b.n	8001e5e <g_handle_drone_instruction+0x21e>
		g_update_identification_procedure(data[3]);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3303      	adds	r3, #3
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fea4 	bl	8001ba4 <g_update_identification_procedure>
		break;
 8001e5c:	bf00      	nop
	}
}
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000162c 	.word	0x2000162c
 8001e6c:	20001514 	.word	0x20001514
 8001e70:	20000094 	.word	0x20000094

08001e74 <g_parser_drone_packet>:

void g_parser_drone_packet(can_msg_t *can_msg)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
	static uint8_t count = 0, len = 0, crc = 0;
	uint8_t i = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < can_msg->len; i++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	73fb      	strb	r3, [r7, #15]
 8001e88:	e07e      	b.n	8001f88 <g_parser_drone_packet+0x114>
	{
		data = can_msg->data[i];
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	795b      	ldrb	r3, [r3, #5]
 8001e92:	73bb      	strb	r3, [r7, #14]
		switch (parser_stat)
 8001e94:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <g_parser_drone_packet+0x12c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d86f      	bhi.n	8001f7c <g_parser_drone_packet+0x108>
 8001e9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ea4 <g_parser_drone_packet+0x30>)
 8001e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea2:	bf00      	nop
 8001ea4:	08001eb9 	.word	0x08001eb9
 8001ea8:	08001ee9 	.word	0x08001ee9
 8001eac:	08001f05 	.word	0x08001f05
 8001eb0:	08001f27 	.word	0x08001f27
 8001eb4:	08001f4f 	.word	0x08001f4f
		{
		case IDEL:
			count = 0;
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <g_parser_drone_packet+0x130>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	701a      	strb	r2, [r3, #0]
			if (data == SEND_TO_DRONE_HEAD)
 8001ebe:	7bbb      	ldrb	r3, [r7, #14]
 8001ec0:	2ba5      	cmp	r3, #165	; 0xa5
 8001ec2:	d10d      	bne.n	8001ee0 <g_parser_drone_packet+0x6c>
			{
				drone_data_buf[count++] = data;
 8001ec4:	4b37      	ldr	r3, [pc, #220]	; (8001fa4 <g_parser_drone_packet+0x130>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	b2d1      	uxtb	r1, r2
 8001ecc:	4a35      	ldr	r2, [pc, #212]	; (8001fa4 <g_parser_drone_packet+0x130>)
 8001ece:	7011      	strb	r1, [r2, #0]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4a35      	ldr	r2, [pc, #212]	; (8001fa8 <g_parser_drone_packet+0x134>)
 8001ed4:	7bbb      	ldrb	r3, [r7, #14]
 8001ed6:	5453      	strb	r3, [r2, r1]
				parser_stat = GET_HEAD;
 8001ed8:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <g_parser_drone_packet+0x12c>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				parser_stat = IDEL;
			}
			break;
 8001ede:	e050      	b.n	8001f82 <g_parser_drone_packet+0x10e>
				parser_stat = IDEL;
 8001ee0:	4b2f      	ldr	r3, [pc, #188]	; (8001fa0 <g_parser_drone_packet+0x12c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
			break;
 8001ee6:	e04c      	b.n	8001f82 <g_parser_drone_packet+0x10e>

		case GET_HEAD:
			parser_stat = GET_TYPE;
 8001ee8:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <g_parser_drone_packet+0x12c>)
 8001eea:	2202      	movs	r2, #2
 8001eec:	701a      	strb	r2, [r3, #0]
			drone_data_buf[count++] = data;
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <g_parser_drone_packet+0x130>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	b2d1      	uxtb	r1, r2
 8001ef6:	4a2b      	ldr	r2, [pc, #172]	; (8001fa4 <g_parser_drone_packet+0x130>)
 8001ef8:	7011      	strb	r1, [r2, #0]
 8001efa:	4619      	mov	r1, r3
 8001efc:	4a2a      	ldr	r2, [pc, #168]	; (8001fa8 <g_parser_drone_packet+0x134>)
 8001efe:	7bbb      	ldrb	r3, [r7, #14]
 8001f00:	5453      	strb	r3, [r2, r1]
			break;
 8001f02:	e03e      	b.n	8001f82 <g_parser_drone_packet+0x10e>

		case GET_TYPE:
			len = data;
 8001f04:	4a29      	ldr	r2, [pc, #164]	; (8001fac <g_parser_drone_packet+0x138>)
 8001f06:	7bbb      	ldrb	r3, [r7, #14]
 8001f08:	7013      	strb	r3, [r2, #0]
			drone_data_buf[count++] = data;
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <g_parser_drone_packet+0x130>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	b2d1      	uxtb	r1, r2
 8001f12:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <g_parser_drone_packet+0x130>)
 8001f14:	7011      	strb	r1, [r2, #0]
 8001f16:	4619      	mov	r1, r3
 8001f18:	4a23      	ldr	r2, [pc, #140]	; (8001fa8 <g_parser_drone_packet+0x134>)
 8001f1a:	7bbb      	ldrb	r3, [r7, #14]
 8001f1c:	5453      	strb	r3, [r2, r1]
			parser_stat = GET_LEN;
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <g_parser_drone_packet+0x12c>)
 8001f20:	2203      	movs	r2, #3
 8001f22:	701a      	strb	r2, [r3, #0]
			break;
 8001f24:	e02d      	b.n	8001f82 <g_parser_drone_packet+0x10e>

		case GET_LEN:
			drone_data_buf[count++] = data;
 8001f26:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <g_parser_drone_packet+0x130>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	b2d1      	uxtb	r1, r2
 8001f2e:	4a1d      	ldr	r2, [pc, #116]	; (8001fa4 <g_parser_drone_packet+0x130>)
 8001f30:	7011      	strb	r1, [r2, #0]
 8001f32:	4619      	mov	r1, r3
 8001f34:	4a1c      	ldr	r2, [pc, #112]	; (8001fa8 <g_parser_drone_packet+0x134>)
 8001f36:	7bbb      	ldrb	r3, [r7, #14]
 8001f38:	5453      	strb	r3, [r2, r1]
			if (count > len)
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <g_parser_drone_packet+0x130>)
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <g_parser_drone_packet+0x138>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d91c      	bls.n	8001f80 <g_parser_drone_packet+0x10c>
			{
				parser_stat = GET_DATA;
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <g_parser_drone_packet+0x12c>)
 8001f48:	2204      	movs	r2, #4
 8001f4a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001f4c:	e018      	b.n	8001f80 <g_parser_drone_packet+0x10c>

		case GET_DATA:
			crc = g_generate_crc(&(drone_data_buf[1]), len);
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <g_parser_drone_packet+0x138>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	4619      	mov	r1, r3
 8001f56:	4816      	ldr	r0, [pc, #88]	; (8001fb0 <g_parser_drone_packet+0x13c>)
 8001f58:	f7fe fc98 	bl	800088c <g_generate_crc>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <g_parser_drone_packet+0x140>)
 8001f62:	701a      	strb	r2, [r3, #0]
			if (crc == data)
 8001f64:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <g_parser_drone_packet+0x140>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	7bba      	ldrb	r2, [r7, #14]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d102      	bne.n	8001f74 <g_parser_drone_packet+0x100>
			{
				g_handle_drone_instruction(drone_data_buf);
 8001f6e:	480e      	ldr	r0, [pc, #56]	; (8001fa8 <g_parser_drone_packet+0x134>)
 8001f70:	f7ff fe66 	bl	8001c40 <g_handle_drone_instruction>
			}
			parser_stat = IDEL;
 8001f74:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <g_parser_drone_packet+0x12c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
			break;
 8001f7a:	e002      	b.n	8001f82 <g_parser_drone_packet+0x10e>

		default:
			break;
 8001f7c:	bf00      	nop
 8001f7e:	e000      	b.n	8001f82 <g_parser_drone_packet+0x10e>
			break;
 8001f80:	bf00      	nop
	for (i = 0; i < can_msg->len; i++)
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	3301      	adds	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	791b      	ldrb	r3, [r3, #4]
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	f4ff af7b 	bcc.w	8001e8a <g_parser_drone_packet+0x16>
		}
	}
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000091 	.word	0x20000091
 8001fa4:	20000098 	.word	0x20000098
 8001fa8:	20001520 	.word	0x20001520
 8001fac:	20000099 	.word	0x20000099
 8001fb0:	20001521 	.word	0x20001521
 8001fb4:	2000009a 	.word	0x2000009a

08001fb8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08e      	sub	sp, #56	; 0x38
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef Header;
	can_msg_t can_rx_msg;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Header, can_rx_msg.data);
 8001fc0:	f107 030c 	add.w	r3, r7, #12
 8001fc4:	3305      	adds	r3, #5
 8001fc6:	f107 021c 	add.w	r2, r7, #28
 8001fca:	2100      	movs	r1, #0
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f001 f8e5 	bl	800319c <HAL_CAN_GetRxMessage>
	if(Header.StdId == (DEVICE_ID & 0XFF)){
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d109      	bne.n	8001fec <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		can_rx_msg.len = Header.DLC;
 8001fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	743b      	strb	r3, [r7, #16]
		can_rx_msg.StdID = Header.StdId;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	60fb      	str	r3, [r7, #12]
		g_parser_drone_packet(&can_rx_msg);
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff44 	bl	8001e74 <g_parser_drone_packet>
	}
}
 8001fec:	bf00      	nop
 8001fee:	3738      	adds	r7, #56	; 0x38
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <g_o1heap_init>:
         uint8_t mem[5120] =
{ 0 };
__attribute__ ((packed))

void g_o1heap_init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	heap = o1heapInit(mem, 5120, NULL, NULL);
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8002000:	4803      	ldr	r0, [pc, #12]	; (8002010 <g_o1heap_init+0x1c>)
 8002002:	f7fe ff5d 	bl	8000ec0 <o1heapInit>
 8002006:	4603      	mov	r3, r0
 8002008:	4a02      	ldr	r2, [pc, #8]	; (8002014 <g_o1heap_init+0x20>)
 800200a:	6013      	str	r3, [r2, #0]
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200000a0 	.word	0x200000a0
 8002014:	2000009c 	.word	0x2000009c

08002018 <g_queue_init>:

void g_queue_init(queue_t *queue)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	queue->head = NULL;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
	queue->tail = NULL;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	605a      	str	r2, [r3, #4]
	queue->queue_size = 0;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	811a      	strh	r2, [r3, #8]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <queue_pop>:

uint8_t queue_pop(queue_t *queue, queue_item_t *queue_item)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
	queue_node_t *node;
	if (queue->queue_size == 0 || queue_item == NULL || heap == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	891b      	ldrh	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d006      	beq.n	8002060 <queue_pop+0x20>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <queue_pop+0x20>
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <queue_pop+0x80>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <queue_pop+0x24>
	{
		return -1;
 8002060:	23ff      	movs	r3, #255	; 0xff
 8002062:	e029      	b.n	80020b8 <queue_pop+0x78>
	}

	node = queue->tail;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	60fb      	str	r3, [r7, #12]

	if (queue->queue_size == 1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	891b      	ldrh	r3, [r3, #8]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d106      	bne.n	8002080 <queue_pop+0x40>
	{
		queue->head = NULL;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
		queue->tail = NULL;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	e007      	b.n	8002090 <queue_pop+0x50>
	}
	else
	{
		queue->tail = node->front;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	605a      	str	r2, [r3, #4]
		queue->tail->next = NULL;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	605a      	str	r2, [r3, #4]
	}
	queue->queue_size--;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	891b      	ldrh	r3, [r3, #8]
 8002094:	3b01      	subs	r3, #1
 8002096:	b29a      	uxth	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	811a      	strh	r2, [r3, #8]

	memcpy(queue_item, &(node->item), sizeof(queue_item_t));
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	3308      	adds	r3, #8
 80020a0:	2210      	movs	r2, #16
 80020a2:	4619      	mov	r1, r3
 80020a4:	6838      	ldr	r0, [r7, #0]
 80020a6:	f003 fd65 	bl	8005b74 <memcpy>
	o1heapFree(heap, node);
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <queue_pop+0x80>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68f9      	ldr	r1, [r7, #12]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff f9e1 	bl	8001478 <o1heapFree>

	return 0;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2000009c 	.word	0x2000009c

080020c4 <queue_push>:

uint8_t queue_push(queue_t *queue, queue_item_t *queue_item)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
	queue_node_t *node = NULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
	if (queue_item == NULL || heap == NULL || queue == NULL)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d006      	beq.n	80020e6 <queue_push+0x22>
 80020d8:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <queue_push+0x90>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <queue_push+0x22>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <queue_push+0x26>
	{
		return -1;
 80020e6:	23ff      	movs	r3, #255	; 0xff
 80020e8:	e02f      	b.n	800214a <queue_push+0x86>
	}

	node = o1heapAllocate(heap, sizeof(queue_node_t));
 80020ea:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <queue_push+0x90>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2118      	movs	r1, #24
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe ffb7 	bl	8001064 <o1heapAllocate>
 80020f6:	60f8      	str	r0, [r7, #12]
	if (node == NULL)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <queue_push+0x3e>
	{
		return -2;
 80020fe:	23fe      	movs	r3, #254	; 0xfe
 8002100:	e023      	b.n	800214a <queue_push+0x86>
	}

	if (queue->queue_size > 0)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	891b      	ldrh	r3, [r3, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d004      	beq.n	8002114 <queue_push+0x50>
	{
		queue->head->front = node;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e002      	b.n	800211a <queue_push+0x56>
	}
	else
	{
		queue->tail = node;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	605a      	str	r2, [r3, #4]
	}
	node->next = queue->head;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	605a      	str	r2, [r3, #4]
	node->front = NULL;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

	queue->head = node;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	601a      	str	r2, [r3, #0]
	queue->queue_size++;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	891b      	ldrh	r3, [r3, #8]
 8002132:	3301      	adds	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	811a      	strh	r2, [r3, #8]

	memcpy(&(node->item), queue_item, sizeof(queue_item_t));
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3308      	adds	r3, #8
 800213e:	2210      	movs	r2, #16
 8002140:	6839      	ldr	r1, [r7, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f003 fd16 	bl	8005b74 <memcpy>

	return 0;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000009c 	.word	0x2000009c

08002158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_MspInit+0x4c>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	4a0f      	ldr	r2, [pc, #60]	; (80021a4 <HAL_MspInit+0x4c>)
 8002168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800216c:	6453      	str	r3, [r2, #68]	; 0x44
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_MspInit+0x4c>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	603b      	str	r3, [r7, #0]
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_MspInit+0x4c>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	4a08      	ldr	r2, [pc, #32]	; (80021a4 <HAL_MspInit+0x4c>)
 8002184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002188:	6413      	str	r3, [r2, #64]	; 0x40
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_MspInit+0x4c>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800

080021a8 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 80021ba:	e7fe      	b.n	80021ba <HardFault_Handler+0x4>

080021bc <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80021c0:	e7fe      	b.n	80021c0 <MemManage_Handler+0x4>

080021c2 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 80021c6:	e7fe      	b.n	80021c6 <BusFault_Handler+0x4>

080021c8 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 80021cc:	e7fe      	b.n	80021cc <UsageFault_Handler+0x4>

080021ce <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80021fc:	f000 faa6 	bl	800274c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */
	if (HAL_GetTick() % 300 == 0)
 8002200:	f000 fab8 	bl	8002774 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	4b07      	ldr	r3, [pc, #28]	; (8002224 <SysTick_Handler+0x2c>)
 8002208:	fba3 1302 	umull	r1, r3, r3, r2
 800220c:	095b      	lsrs	r3, r3, #5
 800220e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <SysTick_Handler+0x28>
	{
		g_identification();
 800221c:	f7ff fc98 	bl	8001b50 <g_identification>
	}
	/* USER CODE END SysTick_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}
 8002224:	1b4e81b5 	.word	0x1b4e81b5

08002228 <CAN1_TX_IRQHandler>:

/**
 * @brief This function handles CAN1 TX interrupts.
 */
void CAN1_TX_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_TX_IRQn 0 */

	/* USER CODE END CAN1_TX_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <CAN1_TX_IRQHandler+0x10>)
 800222e:	f001 f905 	bl	800343c <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_TX_IRQn 1 */

	/* USER CODE END CAN1_TX_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200014d4 	.word	0x200014d4

0800223c <CAN1_RX0_IRQHandler>:

/**
 * @brief This function handles CAN1 RX0 interrupts.
 */
void CAN1_RX0_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_RX0_IRQn 0 */

	/* USER CODE END CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 8002240:	4802      	ldr	r0, [pc, #8]	; (800224c <CAN1_RX0_IRQHandler+0x10>)
 8002242:	f001 f8fb 	bl	800343c <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_RX0_IRQn 1 */

	/* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200014d4 	.word	0x200014d4

08002250 <CAN1_RX1_IRQHandler>:

/**
 * @brief This function handles CAN1 RX1 interrupt.
 */
void CAN1_RX1_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_RX1_IRQn 0 */

	/* USER CODE END CAN1_RX1_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <CAN1_RX1_IRQHandler+0x10>)
 8002256:	f001 f8f1 	bl	800343c <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_RX1_IRQn 1 */

	/* USER CODE END CAN1_RX1_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200014d4 	.word	0x200014d4

08002264 <CAN1_SCE_IRQHandler>:

/**
 * @brief This function handles CAN1 SCE interrupt.
 */
void CAN1_SCE_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_SCE_IRQn 0 */

	/* USER CODE END CAN1_SCE_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <CAN1_SCE_IRQHandler+0x10>)
 800226a:	f001 f8e7 	bl	800343c <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_SCE_IRQn 1 */

	/* USER CODE END CAN1_SCE_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200014d4 	.word	0x200014d4

08002278 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <USART1_IRQHandler+0x10>)
 800227e:	f002 fde7 	bl	8004e50 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20001630 	.word	0x20001630

0800228c <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <USART2_IRQHandler+0x10>)
 8002292:	f002 fddd 	bl	8004e50 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20001670 	.word	0x20001670

080022a0 <CAN2_TX_IRQHandler>:

/**
 * @brief This function handles CAN2 TX interrupts.
 */
void CAN2_TX_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN2_TX_IRQn 0 */

	/* USER CODE END CAN2_TX_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan2);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <CAN2_TX_IRQHandler+0x10>)
 80022a6:	f001 f8c9 	bl	800343c <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN2_TX_IRQn 1 */

	/* USER CODE END CAN2_TX_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200014ac 	.word	0x200014ac

080022b4 <CAN2_RX0_IRQHandler>:

/**
 * @brief This function handles CAN2 RX0 interrupts.
 */
void CAN2_RX0_IRQHandler(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN2_RX0_IRQn 0 */

	/* USER CODE END CAN2_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan2);
 80022b8:	4802      	ldr	r0, [pc, #8]	; (80022c4 <CAN2_RX0_IRQHandler+0x10>)
 80022ba:	f001 f8bf 	bl	800343c <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN2_RX0_IRQn 1 */

	/* USER CODE END CAN2_RX0_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200014ac 	.word	0x200014ac

080022c8 <CAN2_RX1_IRQHandler>:

/**
 * @brief This function handles CAN2 RX1 interrupt.
 */
void CAN2_RX1_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN2_RX1_IRQn 0 */

	/* USER CODE END CAN2_RX1_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan2);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <CAN2_RX1_IRQHandler+0x10>)
 80022ce:	f001 f8b5 	bl	800343c <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN2_RX1_IRQn 1 */

	/* USER CODE END CAN2_RX1_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200014ac 	.word	0x200014ac

080022dc <CAN2_SCE_IRQHandler>:

/**
 * @brief This function handles CAN2 SCE interrupt.
 */
void CAN2_SCE_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN2_SCE_IRQn 0 */

	/* USER CODE END CAN2_SCE_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan2);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <CAN2_SCE_IRQHandler+0x10>)
 80022e2:	f001 f8ab 	bl	800343c <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN2_SCE_IRQn 1 */

	/* USER CODE END CAN2_SCE_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200014ac 	.word	0x200014ac

080022f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
	return 1;
 80022f4:	2301      	movs	r3, #1
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <_kill>:

int _kill(int pid, int sig)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800230a:	f003 fbe9 	bl	8005ae0 <__errno>
 800230e:	4603      	mov	r3, r0
 8002310:	2216      	movs	r2, #22
 8002312:	601a      	str	r2, [r3, #0]
	return -1;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <_exit>:

void _exit (int status)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002328:	f04f 31ff 	mov.w	r1, #4294967295
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ffe7 	bl	8002300 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002332:	e7fe      	b.n	8002332 <_exit+0x12>

08002334 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	e00a      	b.n	800235c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002346:	f3af 8000 	nop.w
 800234a:	4601      	mov	r1, r0
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	60ba      	str	r2, [r7, #8]
 8002352:	b2ca      	uxtb	r2, r1
 8002354:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	3301      	adds	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	429a      	cmp	r2, r3
 8002362:	dbf0      	blt.n	8002346 <_read+0x12>
	}

return len;
 8002364:	687b      	ldr	r3, [r7, #4]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	e009      	b.n	8002394 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	60ba      	str	r2, [r7, #8]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	3301      	adds	r3, #1
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	429a      	cmp	r2, r3
 800239a:	dbf1      	blt.n	8002380 <_write+0x12>
	}
	return len;
 800239c:	687b      	ldr	r3, [r7, #4]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_close>:

int _close(int file)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
	return -1;
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ce:	605a      	str	r2, [r3, #4]
	return 0;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <_isatty>:

int _isatty(int file)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
	return 1;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
	return 0;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <_sbrk+0x50>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d102      	bne.n	8002426 <_sbrk+0x16>
		heap_end = &end;
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <_sbrk+0x50>)
 8002422:	4a10      	ldr	r2, [pc, #64]	; (8002464 <_sbrk+0x54>)
 8002424:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <_sbrk+0x50>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <_sbrk+0x50>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4413      	add	r3, r2
 8002434:	466a      	mov	r2, sp
 8002436:	4293      	cmp	r3, r2
 8002438:	d907      	bls.n	800244a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800243a:	f003 fb51 	bl	8005ae0 <__errno>
 800243e:	4603      	mov	r3, r0
 8002440:	220c      	movs	r2, #12
 8002442:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
 8002448:	e006      	b.n	8002458 <_sbrk+0x48>
	}

	heap_end += incr;
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <_sbrk+0x50>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	4a03      	ldr	r2, [pc, #12]	; (8002460 <_sbrk+0x50>)
 8002454:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002456:	68fb      	ldr	r3, [r7, #12]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200014a0 	.word	0x200014a0
 8002464:	200016c8 	.word	0x200016c8

08002468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <SystemInit+0x28>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002472:	4a07      	ldr	r2, [pc, #28]	; (8002490 <SystemInit+0x28>)
 8002474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SystemInit+0x28>)
 800247e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002482:	609a      	str	r2, [r3, #8]
#endif
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <MX_USART1_UART_Init+0x4c>)
 800249a:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <MX_USART1_UART_Init+0x50>)
 800249c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <MX_USART1_UART_Init+0x4c>)
 80024a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <MX_USART1_UART_Init+0x4c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <MX_USART1_UART_Init+0x4c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <MX_USART1_UART_Init+0x4c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <MX_USART1_UART_Init+0x4c>)
 80024ba:	220c      	movs	r2, #12
 80024bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <MX_USART1_UART_Init+0x4c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <MX_USART1_UART_Init+0x4c>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <MX_USART1_UART_Init+0x4c>)
 80024cc:	f002 fbf0 	bl	8004cb0 <HAL_UART_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024d6:	f7fe fb43 	bl	8000b60 <Error_Handler>
  }

}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	20001630 	.word	0x20001630
 80024e4:	40011000 	.word	0x40011000

080024e8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <MX_USART2_UART_Init+0x4c>)
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <MX_USART2_UART_Init+0x50>)
 80024f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <MX_USART2_UART_Init+0x4c>)
 80024f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <MX_USART2_UART_Init+0x4c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <MX_USART2_UART_Init+0x4c>)
 8002502:	2200      	movs	r2, #0
 8002504:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <MX_USART2_UART_Init+0x4c>)
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <MX_USART2_UART_Init+0x4c>)
 800250e:	220c      	movs	r2, #12
 8002510:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002512:	4b08      	ldr	r3, [pc, #32]	; (8002534 <MX_USART2_UART_Init+0x4c>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <MX_USART2_UART_Init+0x4c>)
 800251a:	2200      	movs	r2, #0
 800251c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800251e:	4805      	ldr	r0, [pc, #20]	; (8002534 <MX_USART2_UART_Init+0x4c>)
 8002520:	f002 fbc6 	bl	8004cb0 <HAL_UART_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800252a:	f7fe fb19 	bl	8000b60 <Error_Handler>
  }

}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20001670 	.word	0x20001670
 8002538:	40004400 	.word	0x40004400

0800253c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08c      	sub	sp, #48	; 0x30
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 031c 	add.w	r3, r7, #28
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a3a      	ldr	r2, [pc, #232]	; (8002644 <HAL_UART_MspInit+0x108>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d135      	bne.n	80025ca <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_UART_MspInit+0x10c>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4a38      	ldr	r2, [pc, #224]	; (8002648 <HAL_UART_MspInit+0x10c>)
 8002568:	f043 0310 	orr.w	r3, r3, #16
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	4b36      	ldr	r3, [pc, #216]	; (8002648 <HAL_UART_MspInit+0x10c>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	61bb      	str	r3, [r7, #24]
 8002578:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	4b32      	ldr	r3, [pc, #200]	; (8002648 <HAL_UART_MspInit+0x10c>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	4a31      	ldr	r2, [pc, #196]	; (8002648 <HAL_UART_MspInit+0x10c>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6313      	str	r3, [r2, #48]	; 0x30
 800258a:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <HAL_UART_MspInit+0x10c>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002596:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800259a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a4:	2303      	movs	r3, #3
 80025a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025a8:	2307      	movs	r3, #7
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ac:	f107 031c 	add.w	r3, r7, #28
 80025b0:	4619      	mov	r1, r3
 80025b2:	4826      	ldr	r0, [pc, #152]	; (800264c <HAL_UART_MspInit+0x110>)
 80025b4:	f001 fad4 	bl	8003b60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2100      	movs	r1, #0
 80025bc:	2025      	movs	r0, #37	; 0x25
 80025be:	f001 fa5d 	bl	8003a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025c2:	2025      	movs	r0, #37	; 0x25
 80025c4:	f001 fa86 	bl	8003ad4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025c8:	e038      	b.n	800263c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a20      	ldr	r2, [pc, #128]	; (8002650 <HAL_UART_MspInit+0x114>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d133      	bne.n	800263c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <HAL_UART_MspInit+0x10c>)
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	4a1a      	ldr	r2, [pc, #104]	; (8002648 <HAL_UART_MspInit+0x10c>)
 80025de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e2:	6413      	str	r3, [r2, #64]	; 0x40
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_UART_MspInit+0x10c>)
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <HAL_UART_MspInit+0x10c>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	4a13      	ldr	r2, [pc, #76]	; (8002648 <HAL_UART_MspInit+0x10c>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_UART_MspInit+0x10c>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800260c:	230c      	movs	r3, #12
 800260e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002618:	2303      	movs	r3, #3
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800261c:	2307      	movs	r3, #7
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002620:	f107 031c 	add.w	r3, r7, #28
 8002624:	4619      	mov	r1, r3
 8002626:	4809      	ldr	r0, [pc, #36]	; (800264c <HAL_UART_MspInit+0x110>)
 8002628:	f001 fa9a 	bl	8003b60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800262c:	2200      	movs	r2, #0
 800262e:	2100      	movs	r1, #0
 8002630:	2026      	movs	r0, #38	; 0x26
 8002632:	f001 fa23 	bl	8003a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002636:	2026      	movs	r0, #38	; 0x26
 8002638:	f001 fa4c 	bl	8003ad4 <HAL_NVIC_EnableIRQ>
}
 800263c:	bf00      	nop
 800263e:	3730      	adds	r7, #48	; 0x30
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40011000 	.word	0x40011000
 8002648:	40023800 	.word	0x40023800
 800264c:	40020000 	.word	0x40020000
 8002650:	40004400 	.word	0x40004400

08002654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800268c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002658:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800265a:	e003      	b.n	8002664 <LoopCopyDataInit>

0800265c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800265e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002660:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002662:	3104      	adds	r1, #4

08002664 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002664:	480b      	ldr	r0, [pc, #44]	; (8002694 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002668:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800266a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800266c:	d3f6      	bcc.n	800265c <CopyDataInit>
  ldr  r2, =_sbss
 800266e:	4a0b      	ldr	r2, [pc, #44]	; (800269c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002670:	e002      	b.n	8002678 <LoopFillZerobss>

08002672 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002672:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002674:	f842 3b04 	str.w	r3, [r2], #4

08002678 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800267a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800267c:	d3f9      	bcc.n	8002672 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800267e:	f7ff fef3 	bl	8002468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002682:	f003 fa45 	bl	8005b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002686:	f7fe f9eb 	bl	8000a60 <main>
  bx  lr    
 800268a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800268c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002690:	08007c88 	.word	0x08007c88
  ldr  r0, =_sdata
 8002694:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002698:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800269c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80026a0:	200016c4 	.word	0x200016c4

080026a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026a4:	e7fe      	b.n	80026a4 <ADC_IRQHandler>
	...

080026a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026ac:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <HAL_Init+0x40>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <HAL_Init+0x40>)
 80026b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_Init+0x40>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <HAL_Init+0x40>)
 80026be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_Init+0x40>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a07      	ldr	r2, [pc, #28]	; (80026e8 <HAL_Init+0x40>)
 80026ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d0:	2003      	movs	r0, #3
 80026d2:	f001 f9b3 	bl	8003a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f000 f808 	bl	80026ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026dc:	f7ff fd3c 	bl	8002158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023c00 	.word	0x40023c00

080026ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_InitTick+0x54>)
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_InitTick+0x58>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4619      	mov	r1, r3
 80026fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002702:	fbb3 f3f1 	udiv	r3, r3, r1
 8002706:	fbb2 f3f3 	udiv	r3, r2, r3
 800270a:	4618      	mov	r0, r3
 800270c:	f001 f9fa 	bl	8003b04 <HAL_SYSTICK_Config>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e00e      	b.n	8002738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2b0f      	cmp	r3, #15
 800271e:	d80a      	bhi.n	8002736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002720:	2200      	movs	r2, #0
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	f001 f9a8 	bl	8003a7c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800272c:	4a06      	ldr	r2, [pc, #24]	; (8002748 <HAL_InitTick+0x5c>)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	e000      	b.n	8002738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20000000 	.word	0x20000000
 8002744:	20000008 	.word	0x20000008
 8002748:	20000004 	.word	0x20000004

0800274c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_IncTick+0x20>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	461a      	mov	r2, r3
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_IncTick+0x24>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4413      	add	r3, r2
 800275c:	4a04      	ldr	r2, [pc, #16]	; (8002770 <HAL_IncTick+0x24>)
 800275e:	6013      	str	r3, [r2, #0]
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000008 	.word	0x20000008
 8002770:	200016b0 	.word	0x200016b0

08002774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return uwTick;
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_GetTick+0x14>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	200016b0 	.word	0x200016b0

0800278c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e20e      	b.n	8002bbc <HAL_CAN_Init+0x430>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4aa0      	ldr	r2, [pc, #640]	; (8002a24 <HAL_CAN_Init+0x298>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d009      	beq.n	80027bc <HAL_CAN_Init+0x30>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a9e      	ldr	r2, [pc, #632]	; (8002a28 <HAL_CAN_Init+0x29c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d004      	beq.n	80027bc <HAL_CAN_Init+0x30>
 80027b2:	f240 111d 	movw	r1, #285	; 0x11d
 80027b6:	489d      	ldr	r0, [pc, #628]	; (8002a2c <HAL_CAN_Init+0x2a0>)
 80027b8:	f7fe f9d9 	bl	8000b6e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7e1b      	ldrb	r3, [r3, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_CAN_Init+0x4a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	7e1b      	ldrb	r3, [r3, #24]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d004      	beq.n	80027d6 <HAL_CAN_Init+0x4a>
 80027cc:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80027d0:	4896      	ldr	r0, [pc, #600]	; (8002a2c <HAL_CAN_Init+0x2a0>)
 80027d2:	f7fe f9cc 	bl	8000b6e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	7e5b      	ldrb	r3, [r3, #25]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d008      	beq.n	80027f0 <HAL_CAN_Init+0x64>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	7e5b      	ldrb	r3, [r3, #25]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d004      	beq.n	80027f0 <HAL_CAN_Init+0x64>
 80027e6:	f240 111f 	movw	r1, #287	; 0x11f
 80027ea:	4890      	ldr	r0, [pc, #576]	; (8002a2c <HAL_CAN_Init+0x2a0>)
 80027ec:	f7fe f9bf 	bl	8000b6e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7e9b      	ldrb	r3, [r3, #26]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_CAN_Init+0x7e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7e9b      	ldrb	r3, [r3, #26]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d004      	beq.n	800280a <HAL_CAN_Init+0x7e>
 8002800:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002804:	4889      	ldr	r0, [pc, #548]	; (8002a2c <HAL_CAN_Init+0x2a0>)
 8002806:	f7fe f9b2 	bl	8000b6e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	7edb      	ldrb	r3, [r3, #27]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_CAN_Init+0x98>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7edb      	ldrb	r3, [r3, #27]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d004      	beq.n	8002824 <HAL_CAN_Init+0x98>
 800281a:	f240 1121 	movw	r1, #289	; 0x121
 800281e:	4883      	ldr	r0, [pc, #524]	; (8002a2c <HAL_CAN_Init+0x2a0>)
 8002820:	f7fe f9a5 	bl	8000b6e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	7f1b      	ldrb	r3, [r3, #28]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_CAN_Init+0xb2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7f1b      	ldrb	r3, [r3, #28]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d004      	beq.n	800283e <HAL_CAN_Init+0xb2>
 8002834:	f44f 7191 	mov.w	r1, #290	; 0x122
 8002838:	487c      	ldr	r0, [pc, #496]	; (8002a2c <HAL_CAN_Init+0x2a0>)
 800283a:	f7fe f998 	bl	8000b6e <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7f5b      	ldrb	r3, [r3, #29]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d008      	beq.n	8002858 <HAL_CAN_Init+0xcc>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	7f5b      	ldrb	r3, [r3, #29]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d004      	beq.n	8002858 <HAL_CAN_Init+0xcc>
 800284e:	f240 1123 	movw	r1, #291	; 0x123
 8002852:	4876      	ldr	r0, [pc, #472]	; (8002a2c <HAL_CAN_Init+0x2a0>)
 8002854:	f7fe f98b 	bl	8000b6e <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_CAN_Init+0xfc>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002868:	d00e      	beq.n	8002888 <HAL_CAN_Init+0xfc>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002872:	d009      	beq.n	8002888 <HAL_CAN_Init+0xfc>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800287c:	d004      	beq.n	8002888 <HAL_CAN_Init+0xfc>
 800287e:	f44f 7192 	mov.w	r1, #292	; 0x124
 8002882:	486a      	ldr	r0, [pc, #424]	; (8002a2c <HAL_CAN_Init+0x2a0>)
 8002884:	f7fe f973 	bl	8000b6e <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d013      	beq.n	80028b8 <HAL_CAN_Init+0x12c>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002898:	d00e      	beq.n	80028b8 <HAL_CAN_Init+0x12c>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028a2:	d009      	beq.n	80028b8 <HAL_CAN_Init+0x12c>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028ac:	d004      	beq.n	80028b8 <HAL_CAN_Init+0x12c>
 80028ae:	f240 1125 	movw	r1, #293	; 0x125
 80028b2:	485e      	ldr	r0, [pc, #376]	; (8002a2c <HAL_CAN_Init+0x2a0>)
 80028b4:	f7fe f95b 	bl	8000b6e <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d04f      	beq.n	8002960 <HAL_CAN_Init+0x1d4>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c8:	d04a      	beq.n	8002960 <HAL_CAN_Init+0x1d4>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028d2:	d045      	beq.n	8002960 <HAL_CAN_Init+0x1d4>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028dc:	d040      	beq.n	8002960 <HAL_CAN_Init+0x1d4>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028e6:	d03b      	beq.n	8002960 <HAL_CAN_Init+0x1d4>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f0:	d036      	beq.n	8002960 <HAL_CAN_Init+0x1d4>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80028fa:	d031      	beq.n	8002960 <HAL_CAN_Init+0x1d4>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8002904:	d02c      	beq.n	8002960 <HAL_CAN_Init+0x1d4>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800290e:	d027      	beq.n	8002960 <HAL_CAN_Init+0x1d4>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 8002918:	d022      	beq.n	8002960 <HAL_CAN_Init+0x1d4>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002922:	d01d      	beq.n	8002960 <HAL_CAN_Init+0x1d4>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 800292c:	d018      	beq.n	8002960 <HAL_CAN_Init+0x1d4>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002936:	d013      	beq.n	8002960 <HAL_CAN_Init+0x1d4>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 8002940:	d00e      	beq.n	8002960 <HAL_CAN_Init+0x1d4>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800294a:	d009      	beq.n	8002960 <HAL_CAN_Init+0x1d4>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 8002954:	d004      	beq.n	8002960 <HAL_CAN_Init+0x1d4>
 8002956:	f44f 7193 	mov.w	r1, #294	; 0x126
 800295a:	4834      	ldr	r0, [pc, #208]	; (8002a2c <HAL_CAN_Init+0x2a0>)
 800295c:	f7fe f907 	bl	8000b6e <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d027      	beq.n	80029b8 <HAL_CAN_Init+0x22c>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002970:	d022      	beq.n	80029b8 <HAL_CAN_Init+0x22c>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800297a:	d01d      	beq.n	80029b8 <HAL_CAN_Init+0x22c>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002984:	d018      	beq.n	80029b8 <HAL_CAN_Init+0x22c>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800298e:	d013      	beq.n	80029b8 <HAL_CAN_Init+0x22c>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8002998:	d00e      	beq.n	80029b8 <HAL_CAN_Init+0x22c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80029a2:	d009      	beq.n	80029b8 <HAL_CAN_Init+0x22c>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80029ac:	d004      	beq.n	80029b8 <HAL_CAN_Init+0x22c>
 80029ae:	f240 1127 	movw	r1, #295	; 0x127
 80029b2:	481e      	ldr	r0, [pc, #120]	; (8002a2c <HAL_CAN_Init+0x2a0>)
 80029b4:	f7fe f8db 	bl	8000b6e <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d004      	beq.n	80029ca <HAL_CAN_Init+0x23e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c8:	d904      	bls.n	80029d4 <HAL_CAN_Init+0x248>
 80029ca:	f44f 7194 	mov.w	r1, #296	; 0x128
 80029ce:	4817      	ldr	r0, [pc, #92]	; (8002a2c <HAL_CAN_Init+0x2a0>)
 80029d0:	f7fe f8cd 	bl	8000b6e <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d102      	bne.n	80029e6 <HAL_CAN_Init+0x25a>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7fd fe31 	bl	8000648 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0202 	bic.w	r2, r2, #2
 80029f4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029f6:	f7ff febd 	bl	8002774 <HAL_GetTick>
 80029fa:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029fc:	e018      	b.n	8002a30 <HAL_CAN_Init+0x2a4>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029fe:	f7ff feb9 	bl	8002774 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b0a      	cmp	r3, #10
 8002a0a:	d911      	bls.n	8002a30 <HAL_CAN_Init+0x2a4>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2205      	movs	r2, #5
 8002a1c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0cb      	b.n	8002bbc <HAL_CAN_Init+0x430>
 8002a24:	40006400 	.word	0x40006400
 8002a28:	40006800 	.word	0x40006800
 8002a2c:	08007830 	.word	0x08007830
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1df      	bne.n	80029fe <HAL_CAN_Init+0x272>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0201 	orr.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a4e:	f7ff fe91 	bl	8002774 <HAL_GetTick>
 8002a52:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a54:	e012      	b.n	8002a7c <HAL_CAN_Init+0x2f0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a56:	f7ff fe8d 	bl	8002774 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b0a      	cmp	r3, #10
 8002a62:	d90b      	bls.n	8002a7c <HAL_CAN_Init+0x2f0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2205      	movs	r2, #5
 8002a74:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e09f      	b.n	8002bbc <HAL_CAN_Init+0x430>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0e5      	beq.n	8002a56 <HAL_CAN_Init+0x2ca>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	7e1b      	ldrb	r3, [r3, #24]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d108      	bne.n	8002aa4 <HAL_CAN_Init+0x318>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	e007      	b.n	8002ab4 <HAL_CAN_Init+0x328>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	7e5b      	ldrb	r3, [r3, #25]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d108      	bne.n	8002ace <HAL_CAN_Init+0x342>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e007      	b.n	8002ade <HAL_CAN_Init+0x352>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002adc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	7e9b      	ldrb	r3, [r3, #26]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d108      	bne.n	8002af8 <HAL_CAN_Init+0x36c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0220 	orr.w	r2, r2, #32
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e007      	b.n	8002b08 <HAL_CAN_Init+0x37c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0220 	bic.w	r2, r2, #32
 8002b06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7edb      	ldrb	r3, [r3, #27]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d108      	bne.n	8002b22 <HAL_CAN_Init+0x396>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0210 	bic.w	r2, r2, #16
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	e007      	b.n	8002b32 <HAL_CAN_Init+0x3a6>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0210 	orr.w	r2, r2, #16
 8002b30:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	7f1b      	ldrb	r3, [r3, #28]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d108      	bne.n	8002b4c <HAL_CAN_Init+0x3c0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f042 0208 	orr.w	r2, r2, #8
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	e007      	b.n	8002b5c <HAL_CAN_Init+0x3d0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0208 	bic.w	r2, r2, #8
 8002b5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	7f5b      	ldrb	r3, [r3, #29]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d108      	bne.n	8002b76 <HAL_CAN_Init+0x3ea>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0204 	orr.w	r2, r2, #4
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	e007      	b.n	8002b86 <HAL_CAN_Init+0x3fa>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0204 	bic.w	r2, r2, #4
 8002b84:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	ea42 0103 	orr.w	r1, r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	1e5a      	subs	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bda:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002bdc:	7cfb      	ldrb	r3, [r7, #19]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d003      	beq.n	8002bea <HAL_CAN_ConfigFilter+0x26>
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	f040 812c 	bne.w	8002e42 <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf2:	d304      	bcc.n	8002bfe <HAL_CAN_ConfigFilter+0x3a>
 8002bf4:	f44f 7154 	mov.w	r1, #848	; 0x350
 8002bf8:	4897      	ldr	r0, [pc, #604]	; (8002e58 <HAL_CAN_ConfigFilter+0x294>)
 8002bfa:	f7fd ffb8 	bl	8000b6e <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c06:	d304      	bcc.n	8002c12 <HAL_CAN_ConfigFilter+0x4e>
 8002c08:	f240 3151 	movw	r1, #849	; 0x351
 8002c0c:	4892      	ldr	r0, [pc, #584]	; (8002e58 <HAL_CAN_ConfigFilter+0x294>)
 8002c0e:	f7fd ffae 	bl	8000b6e <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1a:	d304      	bcc.n	8002c26 <HAL_CAN_ConfigFilter+0x62>
 8002c1c:	f240 3152 	movw	r1, #850	; 0x352
 8002c20:	488d      	ldr	r0, [pc, #564]	; (8002e58 <HAL_CAN_ConfigFilter+0x294>)
 8002c22:	f7fd ffa4 	bl	8000b6e <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2e:	d304      	bcc.n	8002c3a <HAL_CAN_ConfigFilter+0x76>
 8002c30:	f240 3153 	movw	r1, #851	; 0x353
 8002c34:	4888      	ldr	r0, [pc, #544]	; (8002e58 <HAL_CAN_ConfigFilter+0x294>)
 8002c36:	f7fd ff9a 	bl	8000b6e <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <HAL_CAN_ConfigFilter+0x90>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d004      	beq.n	8002c54 <HAL_CAN_ConfigFilter+0x90>
 8002c4a:	f44f 7155 	mov.w	r1, #852	; 0x354
 8002c4e:	4882      	ldr	r0, [pc, #520]	; (8002e58 <HAL_CAN_ConfigFilter+0x294>)
 8002c50:	f7fd ff8d 	bl	8000b6e <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_CAN_ConfigFilter+0xaa>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d004      	beq.n	8002c6e <HAL_CAN_ConfigFilter+0xaa>
 8002c64:	f240 3155 	movw	r1, #853	; 0x355
 8002c68:	487b      	ldr	r0, [pc, #492]	; (8002e58 <HAL_CAN_ConfigFilter+0x294>)
 8002c6a:	f7fd ff80 	bl	8000b6e <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_CAN_ConfigFilter+0xc4>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d004      	beq.n	8002c88 <HAL_CAN_ConfigFilter+0xc4>
 8002c7e:	f240 3156 	movw	r1, #854	; 0x356
 8002c82:	4875      	ldr	r0, [pc, #468]	; (8002e58 <HAL_CAN_ConfigFilter+0x294>)
 8002c84:	f7fd ff73 	bl	8000b6e <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d008      	beq.n	8002ca2 <HAL_CAN_ConfigFilter+0xde>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d004      	beq.n	8002ca2 <HAL_CAN_ConfigFilter+0xde>
 8002c98:	f240 3157 	movw	r1, #855	; 0x357
 8002c9c:	486e      	ldr	r0, [pc, #440]	; (8002e58 <HAL_CAN_ConfigFilter+0x294>)
 8002c9e:	f7fd ff66 	bl	8000b6e <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002ca2:	4b6e      	ldr	r3, [pc, #440]	; (8002e5c <HAL_CAN_ConfigFilter+0x298>)
 8002ca4:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	2b1b      	cmp	r3, #27
 8002cac:	d904      	bls.n	8002cb8 <HAL_CAN_ConfigFilter+0xf4>
 8002cae:	f240 3172 	movw	r1, #882	; 0x372
 8002cb2:	4869      	ldr	r0, [pc, #420]	; (8002e58 <HAL_CAN_ConfigFilter+0x294>)
 8002cb4:	f7fd ff5b 	bl	8000b6e <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	2b1b      	cmp	r3, #27
 8002cbe:	d904      	bls.n	8002cca <HAL_CAN_ConfigFilter+0x106>
 8002cc0:	f240 3173 	movw	r1, #883	; 0x373
 8002cc4:	4864      	ldr	r0, [pc, #400]	; (8002e58 <HAL_CAN_ConfigFilter+0x294>)
 8002cc6:	f7fd ff52 	bl	8000b6e <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cd0:	f043 0201 	orr.w	r2, r3, #1
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ce0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	021b      	lsls	r3, r3, #8
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	2201      	movs	r2, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	401a      	ands	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	69db      	ldr	r3, [r3, #28]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d123      	bne.n	8002d70 <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	401a      	ands	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d4a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	3248      	adds	r2, #72	; 0x48
 8002d50:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d64:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d66:	6979      	ldr	r1, [r7, #20]
 8002d68:	3348      	adds	r3, #72	; 0x48
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	440b      	add	r3, r1
 8002d6e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d122      	bne.n	8002dbe <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d98:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	3248      	adds	r2, #72	; 0x48
 8002d9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002db2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002db4:	6979      	ldr	r1, [r7, #20]
 8002db6:	3348      	adds	r3, #72	; 0x48
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	440b      	add	r3, r1
 8002dbc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002dd8:	e007      	b.n	8002dea <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	401a      	ands	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002e04:	e007      	b.n	8002e16 <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d107      	bne.n	8002e2e <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e34:	f023 0201 	bic.w	r2, r3, #1
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e006      	b.n	8002e50 <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
  }
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	08007830 	.word	0x08007830
 8002e5c:	40006400 	.word	0x40006400

08002e60 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d12e      	bne.n	8002ed2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0201 	bic.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e8c:	f7ff fc72 	bl	8002774 <HAL_GetTick>
 8002e90:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e92:	e012      	b.n	8002eba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e94:	f7ff fc6e 	bl	8002774 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b0a      	cmp	r3, #10
 8002ea0:	d90b      	bls.n	8002eba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2205      	movs	r2, #5
 8002eb2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e012      	b.n	8002ee0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1e5      	bne.n	8002e94 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	e006      	b.n	8002ee0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
  }
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002efc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_CAN_AddTxMessage+0x38>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d004      	beq.n	8002f20 <HAL_CAN_AddTxMessage+0x38>
 8002f16:	f240 41e9 	movw	r1, #1257	; 0x4e9
 8002f1a:	4884      	ldr	r0, [pc, #528]	; (800312c <HAL_CAN_AddTxMessage+0x244>)
 8002f1c:	f7fd fe27 	bl	8000b6e <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_CAN_AddTxMessage+0x52>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d004      	beq.n	8002f3a <HAL_CAN_AddTxMessage+0x52>
 8002f30:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8002f34:	487d      	ldr	r0, [pc, #500]	; (800312c <HAL_CAN_AddTxMessage+0x244>)
 8002f36:	f7fd fe1a 	bl	8000b6e <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d904      	bls.n	8002f4c <HAL_CAN_AddTxMessage+0x64>
 8002f42:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8002f46:	4879      	ldr	r0, [pc, #484]	; (800312c <HAL_CAN_AddTxMessage+0x244>)
 8002f48:	f7fd fe11 	bl	8000b6e <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10a      	bne.n	8002f6a <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f5c:	d30f      	bcc.n	8002f7e <HAL_CAN_AddTxMessage+0x96>
 8002f5e:	f240 41ee 	movw	r1, #1262	; 0x4ee
 8002f62:	4872      	ldr	r0, [pc, #456]	; (800312c <HAL_CAN_AddTxMessage+0x244>)
 8002f64:	f7fd fe03 	bl	8000b6e <assert_failed>
 8002f68:	e009      	b.n	8002f7e <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f72:	d304      	bcc.n	8002f7e <HAL_CAN_AddTxMessage+0x96>
 8002f74:	f240 41f2 	movw	r1, #1266	; 0x4f2
 8002f78:	486c      	ldr	r0, [pc, #432]	; (800312c <HAL_CAN_AddTxMessage+0x244>)
 8002f7a:	f7fd fdf8 	bl	8000b6e <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	7d1b      	ldrb	r3, [r3, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_CAN_AddTxMessage+0xb0>
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	7d1b      	ldrb	r3, [r3, #20]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d004      	beq.n	8002f98 <HAL_CAN_AddTxMessage+0xb0>
 8002f8e:	f240 41f4 	movw	r1, #1268	; 0x4f4
 8002f92:	4866      	ldr	r0, [pc, #408]	; (800312c <HAL_CAN_AddTxMessage+0x244>)
 8002f94:	f7fd fdeb 	bl	8000b6e <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8002f98:	7ffb      	ldrb	r3, [r7, #31]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d003      	beq.n	8002fa6 <HAL_CAN_AddTxMessage+0xbe>
 8002f9e:	7ffb      	ldrb	r3, [r7, #31]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	f040 80b8 	bne.w	8003116 <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10a      	bne.n	8002fc6 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d105      	bne.n	8002fc6 <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80a0 	beq.w	8003106 <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	0e1b      	lsrs	r3, r3, #24
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d907      	bls.n	8002fe6 <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fda:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e09e      	b.n	8003124 <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	409a      	lsls	r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10d      	bne.n	8003014 <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003002:	68f9      	ldr	r1, [r7, #12]
 8003004:	6809      	ldr	r1, [r1, #0]
 8003006:	431a      	orrs	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	3318      	adds	r3, #24
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	440b      	add	r3, r1
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	e00f      	b.n	8003034 <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800301e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003024:	68f9      	ldr	r1, [r7, #12]
 8003026:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003028:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3318      	adds	r3, #24
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	440b      	add	r3, r1
 8003032:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6819      	ldr	r1, [r3, #0]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	3318      	adds	r3, #24
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	440b      	add	r3, r1
 8003044:	3304      	adds	r3, #4
 8003046:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	7d1b      	ldrb	r3, [r3, #20]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d111      	bne.n	8003074 <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3318      	adds	r3, #24
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	4413      	add	r3, r2
 800305c:	3304      	adds	r3, #4
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	6811      	ldr	r1, [r2, #0]
 8003064:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	3318      	adds	r3, #24
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	440b      	add	r3, r1
 8003070:	3304      	adds	r3, #4
 8003072:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3307      	adds	r3, #7
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	061a      	lsls	r2, r3, #24
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3306      	adds	r3, #6
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3305      	adds	r3, #5
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	021b      	lsls	r3, r3, #8
 800308e:	4313      	orrs	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	3204      	adds	r2, #4
 8003094:	7812      	ldrb	r2, [r2, #0]
 8003096:	4610      	mov	r0, r2
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	6811      	ldr	r1, [r2, #0]
 800309c:	ea43 0200 	orr.w	r2, r3, r0
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	440b      	add	r3, r1
 80030a6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80030aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3303      	adds	r3, #3
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	061a      	lsls	r2, r3, #24
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3302      	adds	r3, #2
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	041b      	lsls	r3, r3, #16
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3301      	adds	r3, #1
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	4313      	orrs	r3, r2
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	7812      	ldrb	r2, [r2, #0]
 80030cc:	4610      	mov	r0, r2
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	6811      	ldr	r1, [r2, #0]
 80030d2:	ea43 0200 	orr.w	r2, r3, r0
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	440b      	add	r3, r1
 80030dc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80030e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	3318      	adds	r3, #24
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	4413      	add	r3, r2
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	6811      	ldr	r1, [r2, #0]
 80030f4:	f043 0201 	orr.w	r2, r3, #1
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	3318      	adds	r3, #24
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	440b      	add	r3, r1
 8003100:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	e00e      	b.n	8003124 <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e006      	b.n	8003124 <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
  }
}
 8003124:	4618      	mov	r0, r3
 8003126:	3720      	adds	r7, #32
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	08007830 	.word	0x08007830

08003130 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003142:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003144:	7afb      	ldrb	r3, [r7, #11]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d002      	beq.n	8003150 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800314a:	7afb      	ldrb	r3, [r7, #11]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d11d      	bne.n	800318c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	3301      	adds	r3, #1
 8003162:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3301      	adds	r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3301      	adds	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800318c:	68fb      	ldr	r3, [r7, #12]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031b0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <HAL_CAN_GetRxMessage+0x2c>
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d004      	beq.n	80031c8 <HAL_CAN_GetRxMessage+0x2c>
 80031be:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 80031c2:	4884      	ldr	r0, [pc, #528]	; (80033d4 <HAL_CAN_GetRxMessage+0x238>)
 80031c4:	f7fd fcd3 	bl	8000b6e <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d003      	beq.n	80031d6 <HAL_CAN_GetRxMessage+0x3a>
 80031ce:	7dfb      	ldrb	r3, [r7, #23]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	f040 80f3 	bne.w	80033bc <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10e      	bne.n	80031fa <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d116      	bne.n	8003218 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e0e7      	b.n	80033ca <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d107      	bne.n	8003218 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0d8      	b.n	80033ca <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	331b      	adds	r3, #27
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	4413      	add	r3, r2
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0204 	and.w	r2, r3, #4
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10c      	bne.n	8003250 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	331b      	adds	r3, #27
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	4413      	add	r3, r2
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	0d5b      	lsrs	r3, r3, #21
 8003246:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e00b      	b.n	8003268 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	331b      	adds	r3, #27
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	4413      	add	r3, r2
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	08db      	lsrs	r3, r3, #3
 8003260:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	331b      	adds	r3, #27
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	4413      	add	r3, r2
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0202 	and.w	r2, r3, #2
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	331b      	adds	r3, #27
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	4413      	add	r3, r2
 800328a:	3304      	adds	r3, #4
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 020f 	and.w	r2, r3, #15
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	331b      	adds	r3, #27
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	4413      	add	r3, r2
 80032a2:	3304      	adds	r3, #4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	0a1b      	lsrs	r3, r3, #8
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	331b      	adds	r3, #27
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	4413      	add	r3, r2
 80032ba:	3304      	adds	r3, #4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	0c1b      	lsrs	r3, r3, #16
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	0a1a      	lsrs	r2, r3, #8
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	4413      	add	r3, r2
 8003300:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	0c1a      	lsrs	r2, r3, #16
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	3302      	adds	r3, #2
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	4413      	add	r3, r2
 800331a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	0e1a      	lsrs	r2, r3, #24
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	3303      	adds	r3, #3
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	4413      	add	r3, r2
 8003334:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	3304      	adds	r3, #4
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	4413      	add	r3, r2
 800334c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	0a1a      	lsrs	r2, r3, #8
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	3305      	adds	r3, #5
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	4413      	add	r3, r2
 8003366:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	0c1a      	lsrs	r2, r3, #16
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	3306      	adds	r3, #6
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	4413      	add	r3, r2
 8003380:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	0e1a      	lsrs	r2, r3, #24
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	3307      	adds	r3, #7
 800338c:	b2d2      	uxtb	r2, r2
 800338e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d108      	bne.n	80033a8 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0220 	orr.w	r2, r2, #32
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	e007      	b.n	80033b8 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0220 	orr.w	r2, r2, #32
 80033b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e006      	b.n	80033ca <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
  }
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	08007830 	.word	0x08007830

080033d8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	4a11      	ldr	r2, [pc, #68]	; (8003434 <HAL_CAN_ActivateNotification+0x5c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d904      	bls.n	80033fc <HAL_CAN_ActivateNotification+0x24>
 80033f2:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 80033f6:	4810      	ldr	r0, [pc, #64]	; (8003438 <HAL_CAN_ActivateNotification+0x60>)
 80033f8:	f7fd fbb9 	bl	8000b6e <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d002      	beq.n	8003408 <HAL_CAN_ActivateNotification+0x30>
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	2b02      	cmp	r3, #2
 8003406:	d109      	bne.n	800341c <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6959      	ldr	r1, [r3, #20]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	e006      	b.n	800342a <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
  }
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	00038f7f 	.word	0x00038f7f
 8003438:	08007830 	.word	0x08007830

0800343c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	; 0x28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003444:	2300      	movs	r3, #0
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d07c      	beq.n	800357c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d023      	beq.n	80034d4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2201      	movs	r2, #1
 8003492:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f983 	bl	80037aa <HAL_CAN_TxMailbox0CompleteCallback>
 80034a4:	e016      	b.n	80034d4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d004      	beq.n	80034ba <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	e00c      	b.n	80034d4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d004      	beq.n	80034ce <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
 80034cc:	e002      	b.n	80034d4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f989 	bl	80037e6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d024      	beq.n	8003528 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f963 	bl	80037be <HAL_CAN_TxMailbox1CompleteCallback>
 80034f8:	e016      	b.n	8003528 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
 800350c:	e00c      	b.n	8003528 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003514:	2b00      	cmp	r3, #0
 8003516:	d004      	beq.n	8003522 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
 8003520:	e002      	b.n	8003528 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f969 	bl	80037fa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d024      	beq.n	800357c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800353a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f943 	bl	80037d2 <HAL_CAN_TxMailbox2CompleteCallback>
 800354c:	e016      	b.n	800357c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d004      	beq.n	8003562 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
 8003560:	e00c      	b.n	800357c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d004      	beq.n	8003576 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
 8003574:	e002      	b.n	800357c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f949 	bl	800380e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800357c:	6a3b      	ldr	r3, [r7, #32]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00c      	beq.n	80035a0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	d007      	beq.n	80035a0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003596:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2210      	movs	r2, #16
 800359e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2208      	movs	r2, #8
 80035ba:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f930 	bl	8003822 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d009      	beq.n	80035e0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe fcec 	bl	8001fb8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00c      	beq.n	8003604 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d007      	beq.n	8003604 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2210      	movs	r2, #16
 8003602:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d006      	beq.n	8003626 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2208      	movs	r2, #8
 800361e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f912 	bl	800384a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b00      	cmp	r3, #0
 800362e:	d009      	beq.n	8003644 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f8f9 	bl	8003836 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b00      	cmp	r3, #0
 8003656:	d006      	beq.n	8003666 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2210      	movs	r2, #16
 800365e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f8fc 	bl	800385e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00b      	beq.n	8003688 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d006      	beq.n	8003688 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2208      	movs	r2, #8
 8003680:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f8f5 	bl	8003872 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d07b      	beq.n	800378a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d072      	beq.n	8003782 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d008      	beq.n	80036b8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	f043 0302 	orr.w	r3, r3, #2
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	f043 0304 	orr.w	r3, r3, #4
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d043      	beq.n	8003782 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003700:	2b00      	cmp	r3, #0
 8003702:	d03e      	beq.n	8003782 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800370a:	2b60      	cmp	r3, #96	; 0x60
 800370c:	d02b      	beq.n	8003766 <HAL_CAN_IRQHandler+0x32a>
 800370e:	2b60      	cmp	r3, #96	; 0x60
 8003710:	d82e      	bhi.n	8003770 <HAL_CAN_IRQHandler+0x334>
 8003712:	2b50      	cmp	r3, #80	; 0x50
 8003714:	d022      	beq.n	800375c <HAL_CAN_IRQHandler+0x320>
 8003716:	2b50      	cmp	r3, #80	; 0x50
 8003718:	d82a      	bhi.n	8003770 <HAL_CAN_IRQHandler+0x334>
 800371a:	2b40      	cmp	r3, #64	; 0x40
 800371c:	d019      	beq.n	8003752 <HAL_CAN_IRQHandler+0x316>
 800371e:	2b40      	cmp	r3, #64	; 0x40
 8003720:	d826      	bhi.n	8003770 <HAL_CAN_IRQHandler+0x334>
 8003722:	2b30      	cmp	r3, #48	; 0x30
 8003724:	d010      	beq.n	8003748 <HAL_CAN_IRQHandler+0x30c>
 8003726:	2b30      	cmp	r3, #48	; 0x30
 8003728:	d822      	bhi.n	8003770 <HAL_CAN_IRQHandler+0x334>
 800372a:	2b10      	cmp	r3, #16
 800372c:	d002      	beq.n	8003734 <HAL_CAN_IRQHandler+0x2f8>
 800372e:	2b20      	cmp	r3, #32
 8003730:	d005      	beq.n	800373e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003732:	e01d      	b.n	8003770 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	f043 0308 	orr.w	r3, r3, #8
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800373c:	e019      	b.n	8003772 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	f043 0310 	orr.w	r3, r3, #16
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003746:	e014      	b.n	8003772 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	f043 0320 	orr.w	r3, r3, #32
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003750:	e00f      	b.n	8003772 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800375a:	e00a      	b.n	8003772 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003764:	e005      	b.n	8003772 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800376e:	e000      	b.n	8003772 <HAL_CAN_IRQHandler+0x336>
            break;
 8003770:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699a      	ldr	r2, [r3, #24]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003780:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2204      	movs	r2, #4
 8003788:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f872 	bl	8003886 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80037a2:	bf00      	nop
 80037a4:	3728      	adds	r7, #40	; 0x28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
	...

0800389c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038ac:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <__NVIC_SetPriorityGrouping+0x44>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038b8:	4013      	ands	r3, r2
 80038ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ce:	4a04      	ldr	r2, [pc, #16]	; (80038e0 <__NVIC_SetPriorityGrouping+0x44>)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	60d3      	str	r3, [r2, #12]
}
 80038d4:	bf00      	nop
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <__NVIC_GetPriorityGrouping+0x18>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	0a1b      	lsrs	r3, r3, #8
 80038ee:	f003 0307 	and.w	r3, r3, #7
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	2b00      	cmp	r3, #0
 8003910:	db0b      	blt.n	800392a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	f003 021f 	and.w	r2, r3, #31
 8003918:	4907      	ldr	r1, [pc, #28]	; (8003938 <__NVIC_EnableIRQ+0x38>)
 800391a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	2001      	movs	r0, #1
 8003922:	fa00 f202 	lsl.w	r2, r0, r2
 8003926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	e000e100 	.word	0xe000e100

0800393c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	6039      	str	r1, [r7, #0]
 8003946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394c:	2b00      	cmp	r3, #0
 800394e:	db0a      	blt.n	8003966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	b2da      	uxtb	r2, r3
 8003954:	490c      	ldr	r1, [pc, #48]	; (8003988 <__NVIC_SetPriority+0x4c>)
 8003956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395a:	0112      	lsls	r2, r2, #4
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	440b      	add	r3, r1
 8003960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003964:	e00a      	b.n	800397c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	4908      	ldr	r1, [pc, #32]	; (800398c <__NVIC_SetPriority+0x50>)
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	3b04      	subs	r3, #4
 8003974:	0112      	lsls	r2, r2, #4
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	440b      	add	r3, r1
 800397a:	761a      	strb	r2, [r3, #24]
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	e000e100 	.word	0xe000e100
 800398c:	e000ed00 	.word	0xe000ed00

08003990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003990:	b480      	push	{r7}
 8003992:	b089      	sub	sp, #36	; 0x24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f1c3 0307 	rsb	r3, r3, #7
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	bf28      	it	cs
 80039ae:	2304      	movcs	r3, #4
 80039b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2b06      	cmp	r3, #6
 80039b8:	d902      	bls.n	80039c0 <NVIC_EncodePriority+0x30>
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3b03      	subs	r3, #3
 80039be:	e000      	b.n	80039c2 <NVIC_EncodePriority+0x32>
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c4:	f04f 32ff 	mov.w	r2, #4294967295
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43da      	mvns	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	401a      	ands	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d8:	f04f 31ff 	mov.w	r1, #4294967295
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	43d9      	mvns	r1, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e8:	4313      	orrs	r3, r2
         );
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3724      	adds	r7, #36	; 0x24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a08:	d301      	bcc.n	8003a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e00f      	b.n	8003a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <SysTick_Config+0x40>)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a16:	210f      	movs	r1, #15
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1c:	f7ff ff8e 	bl	800393c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <SysTick_Config+0x40>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a26:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <SysTick_Config+0x40>)
 8003a28:	2207      	movs	r2, #7
 8003a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	e000e010 	.word	0xe000e010

08003a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b07      	cmp	r3, #7
 8003a48:	d00f      	beq.n	8003a6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b06      	cmp	r3, #6
 8003a4e:	d00c      	beq.n	8003a6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	d009      	beq.n	8003a6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d006      	beq.n	8003a6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d003      	beq.n	8003a6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a62:	2192      	movs	r1, #146	; 0x92
 8003a64:	4804      	ldr	r0, [pc, #16]	; (8003a78 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003a66:	f7fd f882 	bl	8000b6e <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ff16 	bl	800389c <__NVIC_SetPriorityGrouping>
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	08007868 	.word	0x08007868

08003a7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b0f      	cmp	r3, #15
 8003a92:	d903      	bls.n	8003a9c <HAL_NVIC_SetPriority+0x20>
 8003a94:	21aa      	movs	r1, #170	; 0xaa
 8003a96:	480e      	ldr	r0, [pc, #56]	; (8003ad0 <HAL_NVIC_SetPriority+0x54>)
 8003a98:	f7fd f869 	bl	8000b6e <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b0f      	cmp	r3, #15
 8003aa0:	d903      	bls.n	8003aaa <HAL_NVIC_SetPriority+0x2e>
 8003aa2:	21ab      	movs	r1, #171	; 0xab
 8003aa4:	480a      	ldr	r0, [pc, #40]	; (8003ad0 <HAL_NVIC_SetPriority+0x54>)
 8003aa6:	f7fd f862 	bl	8000b6e <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003aaa:	f7ff ff1b 	bl	80038e4 <__NVIC_GetPriorityGrouping>
 8003aae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	6978      	ldr	r0, [r7, #20]
 8003ab6:	f7ff ff6b 	bl	8003990 <NVIC_EncodePriority>
 8003aba:	4602      	mov	r2, r0
 8003abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff ff3a 	bl	800393c <__NVIC_SetPriority>
}
 8003ac8:	bf00      	nop
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	08007868 	.word	0x08007868

08003ad4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	da03      	bge.n	8003aee <HAL_NVIC_EnableIRQ+0x1a>
 8003ae6:	21be      	movs	r1, #190	; 0xbe
 8003ae8:	4805      	ldr	r0, [pc, #20]	; (8003b00 <HAL_NVIC_EnableIRQ+0x2c>)
 8003aea:	f7fd f840 	bl	8000b6e <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff ff04 	bl	8003900 <__NVIC_EnableIRQ>
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	08007868 	.word	0x08007868

08003b04 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7ff ff73 	bl	80039f8 <SysTick_Config>
 8003b12:	4603      	mov	r3, r0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d004      	beq.n	8003b3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e00c      	b.n	8003b54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2205      	movs	r2, #5
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0201 	bic.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a41      	ldr	r2, [pc, #260]	; (8003c80 <HAL_GPIO_Init+0x120>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d023      	beq.n	8003bc6 <HAL_GPIO_Init+0x66>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a40      	ldr	r2, [pc, #256]	; (8003c84 <HAL_GPIO_Init+0x124>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d01f      	beq.n	8003bc6 <HAL_GPIO_Init+0x66>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a3f      	ldr	r2, [pc, #252]	; (8003c88 <HAL_GPIO_Init+0x128>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01b      	beq.n	8003bc6 <HAL_GPIO_Init+0x66>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a3e      	ldr	r2, [pc, #248]	; (8003c8c <HAL_GPIO_Init+0x12c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d017      	beq.n	8003bc6 <HAL_GPIO_Init+0x66>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a3d      	ldr	r2, [pc, #244]	; (8003c90 <HAL_GPIO_Init+0x130>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d013      	beq.n	8003bc6 <HAL_GPIO_Init+0x66>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a3c      	ldr	r2, [pc, #240]	; (8003c94 <HAL_GPIO_Init+0x134>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00f      	beq.n	8003bc6 <HAL_GPIO_Init+0x66>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a3b      	ldr	r2, [pc, #236]	; (8003c98 <HAL_GPIO_Init+0x138>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00b      	beq.n	8003bc6 <HAL_GPIO_Init+0x66>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a3a      	ldr	r2, [pc, #232]	; (8003c9c <HAL_GPIO_Init+0x13c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d007      	beq.n	8003bc6 <HAL_GPIO_Init+0x66>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a39      	ldr	r2, [pc, #228]	; (8003ca0 <HAL_GPIO_Init+0x140>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_Init+0x66>
 8003bbe:	21b3      	movs	r1, #179	; 0xb3
 8003bc0:	4838      	ldr	r0, [pc, #224]	; (8003ca4 <HAL_GPIO_Init+0x144>)
 8003bc2:	f7fc ffd4 	bl	8000b6e <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_GPIO_Init+0x7c>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	0c1b      	lsrs	r3, r3, #16
 8003bd6:	041b      	lsls	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_GPIO_Init+0x84>
 8003bdc:	21b4      	movs	r1, #180	; 0xb4
 8003bde:	4831      	ldr	r0, [pc, #196]	; (8003ca4 <HAL_GPIO_Init+0x144>)
 8003be0:	f7fc ffc5 	bl	8000b6e <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d035      	beq.n	8003c58 <HAL_GPIO_Init+0xf8>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d031      	beq.n	8003c58 <HAL_GPIO_Init+0xf8>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b11      	cmp	r3, #17
 8003bfa:	d02d      	beq.n	8003c58 <HAL_GPIO_Init+0xf8>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d029      	beq.n	8003c58 <HAL_GPIO_Init+0xf8>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b12      	cmp	r3, #18
 8003c0a:	d025      	beq.n	8003c58 <HAL_GPIO_Init+0xf8>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4a25      	ldr	r2, [pc, #148]	; (8003ca8 <HAL_GPIO_Init+0x148>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d020      	beq.n	8003c58 <HAL_GPIO_Init+0xf8>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	4a24      	ldr	r2, [pc, #144]	; (8003cac <HAL_GPIO_Init+0x14c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d01b      	beq.n	8003c58 <HAL_GPIO_Init+0xf8>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4a22      	ldr	r2, [pc, #136]	; (8003cb0 <HAL_GPIO_Init+0x150>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d016      	beq.n	8003c58 <HAL_GPIO_Init+0xf8>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	4a21      	ldr	r2, [pc, #132]	; (8003cb4 <HAL_GPIO_Init+0x154>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d011      	beq.n	8003c58 <HAL_GPIO_Init+0xf8>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <HAL_GPIO_Init+0x158>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00c      	beq.n	8003c58 <HAL_GPIO_Init+0xf8>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	4a1e      	ldr	r2, [pc, #120]	; (8003cbc <HAL_GPIO_Init+0x15c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d007      	beq.n	8003c58 <HAL_GPIO_Init+0xf8>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d003      	beq.n	8003c58 <HAL_GPIO_Init+0xf8>
 8003c50:	21b5      	movs	r1, #181	; 0xb5
 8003c52:	4814      	ldr	r0, [pc, #80]	; (8003ca4 <HAL_GPIO_Init+0x144>)
 8003c54:	f7fc ff8b 	bl	8000b6e <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00b      	beq.n	8003c78 <HAL_GPIO_Init+0x118>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d007      	beq.n	8003c78 <HAL_GPIO_Init+0x118>
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d003      	beq.n	8003c78 <HAL_GPIO_Init+0x118>
 8003c70:	21b6      	movs	r1, #182	; 0xb6
 8003c72:	480c      	ldr	r0, [pc, #48]	; (8003ca4 <HAL_GPIO_Init+0x144>)
 8003c74:	f7fc ff7b 	bl	8000b6e <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
 8003c7c:	e236      	b.n	80040ec <HAL_GPIO_Init+0x58c>
 8003c7e:	bf00      	nop
 8003c80:	40020000 	.word	0x40020000
 8003c84:	40020400 	.word	0x40020400
 8003c88:	40020800 	.word	0x40020800
 8003c8c:	40020c00 	.word	0x40020c00
 8003c90:	40021000 	.word	0x40021000
 8003c94:	40021400 	.word	0x40021400
 8003c98:	40021800 	.word	0x40021800
 8003c9c:	40021c00 	.word	0x40021c00
 8003ca0:	40022000 	.word	0x40022000
 8003ca4:	080078a4 	.word	0x080078a4
 8003ca8:	10110000 	.word	0x10110000
 8003cac:	10210000 	.word	0x10210000
 8003cb0:	10310000 	.word	0x10310000
 8003cb4:	10120000 	.word	0x10120000
 8003cb8:	10220000 	.word	0x10220000
 8003cbc:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	f040 8204 	bne.w	80040e6 <HAL_GPIO_Init+0x586>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d00b      	beq.n	8003cfe <HAL_GPIO_Init+0x19e>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d007      	beq.n	8003cfe <HAL_GPIO_Init+0x19e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cf2:	2b11      	cmp	r3, #17
 8003cf4:	d003      	beq.n	8003cfe <HAL_GPIO_Init+0x19e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b12      	cmp	r3, #18
 8003cfc:	d144      	bne.n	8003d88 <HAL_GPIO_Init+0x228>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00f      	beq.n	8003d26 <HAL_GPIO_Init+0x1c6>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d00b      	beq.n	8003d26 <HAL_GPIO_Init+0x1c6>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d007      	beq.n	8003d26 <HAL_GPIO_Init+0x1c6>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_Init+0x1c6>
 8003d1e:	21c8      	movs	r1, #200	; 0xc8
 8003d20:	489e      	ldr	r0, [pc, #632]	; (8003f9c <HAL_GPIO_Init+0x43c>)
 8003d22:	f7fc ff24 	bl	8000b6e <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	2203      	movs	r2, #3
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f003 0201 	and.w	r2, r3, #1
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	2203      	movs	r2, #3
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d004      	beq.n	8003dca <HAL_GPIO_Init+0x26a>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b12      	cmp	r3, #18
 8003dc6:	f040 80b2 	bne.w	8003f2e <HAL_GPIO_Init+0x3ce>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 8089 	beq.w	8003ee6 <HAL_GPIO_Init+0x386>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	2b09      	cmp	r3, #9
 8003dda:	f000 8084 	beq.w	8003ee6 <HAL_GPIO_Init+0x386>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d07f      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d07b      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d077      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d073      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d06f      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d06b      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d067      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d063      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d05f      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d05b      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d057      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d053      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d04f      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b05      	cmp	r3, #5
 8003e4c:	d04b      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b05      	cmp	r3, #5
 8003e54:	d047      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b09      	cmp	r3, #9
 8003e5c:	d043      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b06      	cmp	r3, #6
 8003e64:	d03f      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b09      	cmp	r3, #9
 8003e6c:	d03b      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	2b07      	cmp	r3, #7
 8003e74:	d037      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b07      	cmp	r3, #7
 8003e7c:	d033      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b07      	cmp	r3, #7
 8003e84:	d02f      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d02b      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d027      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d023      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2b09      	cmp	r3, #9
 8003ea4:	d01f      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b09      	cmp	r3, #9
 8003eac:	d01b      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	2b0a      	cmp	r3, #10
 8003eb4:	d017      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b0a      	cmp	r3, #10
 8003ebc:	d013      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b0c      	cmp	r3, #12
 8003ec4:	d00f      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b0c      	cmp	r3, #12
 8003ecc:	d00b      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b0c      	cmp	r3, #12
 8003ed4:	d007      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b0f      	cmp	r3, #15
 8003edc:	d003      	beq.n	8003ee6 <HAL_GPIO_Init+0x386>
 8003ede:	21e0      	movs	r1, #224	; 0xe0
 8003ee0:	482e      	ldr	r0, [pc, #184]	; (8003f9c <HAL_GPIO_Init+0x43c>)
 8003ee2:	f7fc fe44 	bl	8000b6e <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	08da      	lsrs	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3208      	adds	r2, #8
 8003eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	220f      	movs	r2, #15
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4013      	ands	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	08da      	lsrs	r2, r3, #3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3208      	adds	r2, #8
 8003f28:	69b9      	ldr	r1, [r7, #24]
 8003f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	2203      	movs	r2, #3
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4013      	ands	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 0203 	and.w	r2, r3, #3
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 80bb 	beq.w	80040e6 <HAL_GPIO_Init+0x586>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f70:	2300      	movs	r3, #0
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <HAL_GPIO_Init+0x440>)
 8003f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f78:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <HAL_GPIO_Init+0x440>)
 8003f7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f7e:	6453      	str	r3, [r2, #68]	; 0x44
 8003f80:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <HAL_GPIO_Init+0x440>)
 8003f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f8c:	4a05      	ldr	r2, [pc, #20]	; (8003fa4 <HAL_GPIO_Init+0x444>)
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	3302      	adds	r3, #2
 8003f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	e005      	b.n	8003fa8 <HAL_GPIO_Init+0x448>
 8003f9c:	080078a4 	.word	0x080078a4
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	40013800 	.word	0x40013800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a4f      	ldr	r2, [pc, #316]	; (8004100 <HAL_GPIO_Init+0x5a0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d02b      	beq.n	800401e <HAL_GPIO_Init+0x4be>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a4e      	ldr	r2, [pc, #312]	; (8004104 <HAL_GPIO_Init+0x5a4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d025      	beq.n	800401a <HAL_GPIO_Init+0x4ba>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a4d      	ldr	r2, [pc, #308]	; (8004108 <HAL_GPIO_Init+0x5a8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d01f      	beq.n	8004016 <HAL_GPIO_Init+0x4b6>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a4c      	ldr	r2, [pc, #304]	; (800410c <HAL_GPIO_Init+0x5ac>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d019      	beq.n	8004012 <HAL_GPIO_Init+0x4b2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a4b      	ldr	r2, [pc, #300]	; (8004110 <HAL_GPIO_Init+0x5b0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <HAL_GPIO_Init+0x4ae>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a4a      	ldr	r2, [pc, #296]	; (8004114 <HAL_GPIO_Init+0x5b4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00d      	beq.n	800400a <HAL_GPIO_Init+0x4aa>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a49      	ldr	r2, [pc, #292]	; (8004118 <HAL_GPIO_Init+0x5b8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d007      	beq.n	8004006 <HAL_GPIO_Init+0x4a6>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a48      	ldr	r2, [pc, #288]	; (800411c <HAL_GPIO_Init+0x5bc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d101      	bne.n	8004002 <HAL_GPIO_Init+0x4a2>
 8003ffe:	2307      	movs	r3, #7
 8004000:	e00e      	b.n	8004020 <HAL_GPIO_Init+0x4c0>
 8004002:	2308      	movs	r3, #8
 8004004:	e00c      	b.n	8004020 <HAL_GPIO_Init+0x4c0>
 8004006:	2306      	movs	r3, #6
 8004008:	e00a      	b.n	8004020 <HAL_GPIO_Init+0x4c0>
 800400a:	2305      	movs	r3, #5
 800400c:	e008      	b.n	8004020 <HAL_GPIO_Init+0x4c0>
 800400e:	2304      	movs	r3, #4
 8004010:	e006      	b.n	8004020 <HAL_GPIO_Init+0x4c0>
 8004012:	2303      	movs	r3, #3
 8004014:	e004      	b.n	8004020 <HAL_GPIO_Init+0x4c0>
 8004016:	2302      	movs	r3, #2
 8004018:	e002      	b.n	8004020 <HAL_GPIO_Init+0x4c0>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <HAL_GPIO_Init+0x4c0>
 800401e:	2300      	movs	r3, #0
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	f002 0203 	and.w	r2, r2, #3
 8004026:	0092      	lsls	r2, r2, #2
 8004028:	4093      	lsls	r3, r2
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4313      	orrs	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004030:	493b      	ldr	r1, [pc, #236]	; (8004120 <HAL_GPIO_Init+0x5c0>)
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	089b      	lsrs	r3, r3, #2
 8004036:	3302      	adds	r3, #2
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800403e:	4b39      	ldr	r3, [pc, #228]	; (8004124 <HAL_GPIO_Init+0x5c4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	43db      	mvns	r3, r3
 8004048:	69ba      	ldr	r2, [r7, #24]
 800404a:	4013      	ands	r3, r2
 800404c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_Init+0x502>
        {
          temp |= iocurrent;
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004062:	4a30      	ldr	r2, [pc, #192]	; (8004124 <HAL_GPIO_Init+0x5c4>)
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004068:	4b2e      	ldr	r3, [pc, #184]	; (8004124 <HAL_GPIO_Init+0x5c4>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	43db      	mvns	r3, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	4013      	ands	r3, r2
 8004076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x52c>
        {
          temp |= iocurrent;
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800408c:	4a25      	ldr	r2, [pc, #148]	; (8004124 <HAL_GPIO_Init+0x5c4>)
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004092:	4b24      	ldr	r3, [pc, #144]	; (8004124 <HAL_GPIO_Init+0x5c4>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	43db      	mvns	r3, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4013      	ands	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_GPIO_Init+0x556>
        {
          temp |= iocurrent;
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040b6:	4a1b      	ldr	r2, [pc, #108]	; (8004124 <HAL_GPIO_Init+0x5c4>)
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <HAL_GPIO_Init+0x5c4>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	43db      	mvns	r3, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040e0:	4a10      	ldr	r2, [pc, #64]	; (8004124 <HAL_GPIO_Init+0x5c4>)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	3301      	adds	r3, #1
 80040ea:	61fb      	str	r3, [r7, #28]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	2b0f      	cmp	r3, #15
 80040f0:	f67f ade6 	bls.w	8003cc0 <HAL_GPIO_Init+0x160>
      }
    }
  }
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop
 80040f8:	3720      	adds	r7, #32
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40020000 	.word	0x40020000
 8004104:	40020400 	.word	0x40020400
 8004108:	40020800 	.word	0x40020800
 800410c:	40020c00 	.word	0x40020c00
 8004110:	40021000 	.word	0x40021000
 8004114:	40021400 	.word	0x40021400
 8004118:	40021800 	.word	0x40021800
 800411c:	40021c00 	.word	0x40021c00
 8004120:	40013800 	.word	0x40013800
 8004124:	40013c00 	.word	0x40013c00

08004128 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e30d      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2b0f      	cmp	r3, #15
 8004140:	d903      	bls.n	800414a <HAL_RCC_OscConfig+0x22>
 8004142:	21e8      	movs	r1, #232	; 0xe8
 8004144:	48a3      	ldr	r0, [pc, #652]	; (80043d4 <HAL_RCC_OscConfig+0x2ac>)
 8004146:	f7fc fd12 	bl	8000b6e <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 8088 	beq.w	8004268 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00d      	beq.n	800417c <HAL_RCC_OscConfig+0x54>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004168:	d008      	beq.n	800417c <HAL_RCC_OscConfig+0x54>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004172:	d003      	beq.n	800417c <HAL_RCC_OscConfig+0x54>
 8004174:	21ed      	movs	r1, #237	; 0xed
 8004176:	4897      	ldr	r0, [pc, #604]	; (80043d4 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	f7fc fcf9 	bl	8000b6e <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800417c:	4b96      	ldr	r3, [pc, #600]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 030c 	and.w	r3, r3, #12
 8004184:	2b04      	cmp	r3, #4
 8004186:	d00c      	beq.n	80041a2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004188:	4b93      	ldr	r3, [pc, #588]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004190:	2b08      	cmp	r3, #8
 8004192:	d112      	bne.n	80041ba <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004194:	4b90      	ldr	r3, [pc, #576]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a0:	d10b      	bne.n	80041ba <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a2:	4b8d      	ldr	r3, [pc, #564]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d05b      	beq.n	8004266 <HAL_RCC_OscConfig+0x13e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d157      	bne.n	8004266 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e2cd      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041c2:	d106      	bne.n	80041d2 <HAL_RCC_OscConfig+0xaa>
 80041c4:	4b84      	ldr	r3, [pc, #528]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a83      	ldr	r2, [pc, #524]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	e01d      	b.n	800420e <HAL_RCC_OscConfig+0xe6>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041da:	d10c      	bne.n	80041f6 <HAL_RCC_OscConfig+0xce>
 80041dc:	4b7e      	ldr	r3, [pc, #504]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a7d      	ldr	r2, [pc, #500]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	4b7b      	ldr	r3, [pc, #492]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a7a      	ldr	r2, [pc, #488]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f2:	6013      	str	r3, [r2, #0]
 80041f4:	e00b      	b.n	800420e <HAL_RCC_OscConfig+0xe6>
 80041f6:	4b78      	ldr	r3, [pc, #480]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a77      	ldr	r2, [pc, #476]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80041fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b75      	ldr	r3, [pc, #468]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a74      	ldr	r2, [pc, #464]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800420c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d013      	beq.n	800423e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004216:	f7fe faad 	bl	8002774 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800421e:	f7fe faa9 	bl	8002774 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b64      	cmp	r3, #100	; 0x64
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e292      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004230:	4b69      	ldr	r3, [pc, #420]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0f0      	beq.n	800421e <HAL_RCC_OscConfig+0xf6>
 800423c:	e014      	b.n	8004268 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7fe fa99 	bl	8002774 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004246:	f7fe fa95 	bl	8002774 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b64      	cmp	r3, #100	; 0x64
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e27e      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004258:	4b5f      	ldr	r3, [pc, #380]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f0      	bne.n	8004246 <HAL_RCC_OscConfig+0x11e>
 8004264:	e000      	b.n	8004268 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004266:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d079      	beq.n	8004368 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d008      	beq.n	800428e <HAL_RCC_OscConfig+0x166>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d004      	beq.n	800428e <HAL_RCC_OscConfig+0x166>
 8004284:	f240 111f 	movw	r1, #287	; 0x11f
 8004288:	4852      	ldr	r0, [pc, #328]	; (80043d4 <HAL_RCC_OscConfig+0x2ac>)
 800428a:	f7fc fc70 	bl	8000b6e <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	2b1f      	cmp	r3, #31
 8004294:	d904      	bls.n	80042a0 <HAL_RCC_OscConfig+0x178>
 8004296:	f44f 7190 	mov.w	r1, #288	; 0x120
 800429a:	484e      	ldr	r0, [pc, #312]	; (80043d4 <HAL_RCC_OscConfig+0x2ac>)
 800429c:	f7fc fc67 	bl	8000b6e <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042a0:	4b4d      	ldr	r3, [pc, #308]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 030c 	and.w	r3, r3, #12
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00b      	beq.n	80042c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ac:	4b4a      	ldr	r3, [pc, #296]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d11c      	bne.n	80042f2 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b8:	4b47      	ldr	r3, [pc, #284]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d116      	bne.n	80042f2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c4:	4b44      	ldr	r3, [pc, #272]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_OscConfig+0x1b4>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e23c      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042dc:	4b3e      	ldr	r3, [pc, #248]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	493b      	ldr	r1, [pc, #236]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f0:	e03a      	b.n	8004368 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d020      	beq.n	800433c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042fa:	4b38      	ldr	r3, [pc, #224]	; (80043dc <HAL_RCC_OscConfig+0x2b4>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fe fa38 	bl	8002774 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004308:	f7fe fa34 	bl	8002774 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e21d      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431a:	4b2f      	ldr	r3, [pc, #188]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004326:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	4928      	ldr	r1, [pc, #160]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 8004336:	4313      	orrs	r3, r2
 8004338:	600b      	str	r3, [r1, #0]
 800433a:	e015      	b.n	8004368 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800433c:	4b27      	ldr	r3, [pc, #156]	; (80043dc <HAL_RCC_OscConfig+0x2b4>)
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004342:	f7fe fa17 	bl	8002774 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800434a:	f7fe fa13 	bl	8002774 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e1fc      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435c:	4b1e      	ldr	r3, [pc, #120]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f0      	bne.n	800434a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d046      	beq.n	8004402 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_RCC_OscConfig+0x266>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d004      	beq.n	800438e <HAL_RCC_OscConfig+0x266>
 8004384:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8004388:	4812      	ldr	r0, [pc, #72]	; (80043d4 <HAL_RCC_OscConfig+0x2ac>)
 800438a:	f7fc fbf0 	bl	8000b6e <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d016      	beq.n	80043c4 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004396:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <HAL_RCC_OscConfig+0x2b8>)
 8004398:	2201      	movs	r2, #1
 800439a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439c:	f7fe f9ea 	bl	8002774 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a4:	f7fe f9e6 	bl	8002774 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e1cf      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b6:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <HAL_RCC_OscConfig+0x2b0>)
 80043b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0x27c>
 80043c2:	e01e      	b.n	8004402 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c4:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <HAL_RCC_OscConfig+0x2b8>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ca:	f7fe f9d3 	bl	8002774 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d0:	e011      	b.n	80043f6 <HAL_RCC_OscConfig+0x2ce>
 80043d2:	bf00      	nop
 80043d4:	080078e0 	.word	0x080078e0
 80043d8:	40023800 	.word	0x40023800
 80043dc:	42470000 	.word	0x42470000
 80043e0:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e4:	f7fe f9c6 	bl	8002774 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e1af      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f6:	4b97      	ldr	r3, [pc, #604]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 80043f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80a8 	beq.w	8004560 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004410:	2300      	movs	r3, #0
 8004412:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00c      	beq.n	8004436 <HAL_RCC_OscConfig+0x30e>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d008      	beq.n	8004436 <HAL_RCC_OscConfig+0x30e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b05      	cmp	r3, #5
 800442a:	d004      	beq.n	8004436 <HAL_RCC_OscConfig+0x30e>
 800442c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8004430:	4889      	ldr	r0, [pc, #548]	; (8004658 <HAL_RCC_OscConfig+0x530>)
 8004432:	f7fc fb9c 	bl	8000b6e <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004436:	4b87      	ldr	r3, [pc, #540]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	4b83      	ldr	r3, [pc, #524]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	4a82      	ldr	r2, [pc, #520]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004450:	6413      	str	r3, [r2, #64]	; 0x40
 8004452:	4b80      	ldr	r3, [pc, #512]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004462:	4b7e      	ldr	r3, [pc, #504]	; (800465c <HAL_RCC_OscConfig+0x534>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d118      	bne.n	80044a0 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446e:	4b7b      	ldr	r3, [pc, #492]	; (800465c <HAL_RCC_OscConfig+0x534>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a7a      	ldr	r2, [pc, #488]	; (800465c <HAL_RCC_OscConfig+0x534>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447a:	f7fe f97b 	bl	8002774 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004482:	f7fe f977 	bl	8002774 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e160      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	4b71      	ldr	r3, [pc, #452]	; (800465c <HAL_RCC_OscConfig+0x534>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d106      	bne.n	80044b6 <HAL_RCC_OscConfig+0x38e>
 80044a8:	4b6a      	ldr	r3, [pc, #424]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	4a69      	ldr	r2, [pc, #420]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	6713      	str	r3, [r2, #112]	; 0x70
 80044b4:	e01c      	b.n	80044f0 <HAL_RCC_OscConfig+0x3c8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x3b0>
 80044be:	4b65      	ldr	r3, [pc, #404]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	4a64      	ldr	r2, [pc, #400]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 80044c4:	f043 0304 	orr.w	r3, r3, #4
 80044c8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ca:	4b62      	ldr	r3, [pc, #392]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	4a61      	ldr	r2, [pc, #388]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	6713      	str	r3, [r2, #112]	; 0x70
 80044d6:	e00b      	b.n	80044f0 <HAL_RCC_OscConfig+0x3c8>
 80044d8:	4b5e      	ldr	r3, [pc, #376]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	4a5d      	ldr	r2, [pc, #372]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	6713      	str	r3, [r2, #112]	; 0x70
 80044e4:	4b5b      	ldr	r3, [pc, #364]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	4a5a      	ldr	r2, [pc, #360]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 80044ea:	f023 0304 	bic.w	r3, r3, #4
 80044ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d015      	beq.n	8004524 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fe f93c 	bl	8002774 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fe f938 	bl	8002774 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e11f      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004516:	4b4f      	ldr	r3, [pc, #316]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0ee      	beq.n	8004500 <HAL_RCC_OscConfig+0x3d8>
 8004522:	e014      	b.n	800454e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004524:	f7fe f926 	bl	8002774 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452a:	e00a      	b.n	8004542 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800452c:	f7fe f922 	bl	8002774 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	; 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e109      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004542:	4b44      	ldr	r3, [pc, #272]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1ee      	bne.n	800452c <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800454e:	7dfb      	ldrb	r3, [r7, #23]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004554:	4b3f      	ldr	r3, [pc, #252]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	4a3e      	ldr	r2, [pc, #248]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 800455a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800455e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00c      	beq.n	8004582 <HAL_RCC_OscConfig+0x45a>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d008      	beq.n	8004582 <HAL_RCC_OscConfig+0x45a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d004      	beq.n	8004582 <HAL_RCC_OscConfig+0x45a>
 8004578:	f240 11cf 	movw	r1, #463	; 0x1cf
 800457c:	4836      	ldr	r0, [pc, #216]	; (8004658 <HAL_RCC_OscConfig+0x530>)
 800457e:	f7fc faf6 	bl	8000b6e <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 80e4 	beq.w	8004754 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800458c:	4b31      	ldr	r3, [pc, #196]	; (8004654 <HAL_RCC_OscConfig+0x52c>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 030c 	and.w	r3, r3, #12
 8004594:	2b08      	cmp	r3, #8
 8004596:	f000 80ae 	beq.w	80046f6 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	f040 8092 	bne.w	80046c8 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	69db      	ldr	r3, [r3, #28]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d009      	beq.n	80045c0 <HAL_RCC_OscConfig+0x498>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b4:	d004      	beq.n	80045c0 <HAL_RCC_OscConfig+0x498>
 80045b6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80045ba:	4827      	ldr	r0, [pc, #156]	; (8004658 <HAL_RCC_OscConfig+0x530>)
 80045bc:	f7fc fad7 	bl	8000b6e <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	2b3f      	cmp	r3, #63	; 0x3f
 80045c6:	d904      	bls.n	80045d2 <HAL_RCC_OscConfig+0x4aa>
 80045c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80045cc:	4822      	ldr	r0, [pc, #136]	; (8004658 <HAL_RCC_OscConfig+0x530>)
 80045ce:	f7fc face 	bl	8000b6e <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	2b31      	cmp	r3, #49	; 0x31
 80045d8:	d904      	bls.n	80045e4 <HAL_RCC_OscConfig+0x4bc>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80045e2:	d904      	bls.n	80045ee <HAL_RCC_OscConfig+0x4c6>
 80045e4:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80045e8:	481b      	ldr	r0, [pc, #108]	; (8004658 <HAL_RCC_OscConfig+0x530>)
 80045ea:	f7fc fac0 	bl	8000b6e <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d010      	beq.n	8004618 <HAL_RCC_OscConfig+0x4f0>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d00c      	beq.n	8004618 <HAL_RCC_OscConfig+0x4f0>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004602:	2b06      	cmp	r3, #6
 8004604:	d008      	beq.n	8004618 <HAL_RCC_OscConfig+0x4f0>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	2b08      	cmp	r3, #8
 800460c:	d004      	beq.n	8004618 <HAL_RCC_OscConfig+0x4f0>
 800460e:	f240 11db 	movw	r1, #475	; 0x1db
 8004612:	4811      	ldr	r0, [pc, #68]	; (8004658 <HAL_RCC_OscConfig+0x530>)
 8004614:	f7fc faab 	bl	8000b6e <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	2b01      	cmp	r3, #1
 800461e:	d903      	bls.n	8004628 <HAL_RCC_OscConfig+0x500>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	2b0f      	cmp	r3, #15
 8004626:	d904      	bls.n	8004632 <HAL_RCC_OscConfig+0x50a>
 8004628:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800462c:	480a      	ldr	r0, [pc, #40]	; (8004658 <HAL_RCC_OscConfig+0x530>)
 800462e:	f7fc fa9e 	bl	8000b6e <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004632:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCC_OscConfig+0x538>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004638:	f7fe f89c 	bl	8002774 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463e:	e011      	b.n	8004664 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004640:	f7fe f898 	bl	8002774 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d90a      	bls.n	8004664 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e081      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
 8004652:	bf00      	nop
 8004654:	40023800 	.word	0x40023800
 8004658:	080078e0 	.word	0x080078e0
 800465c:	40007000 	.word	0x40007000
 8004660:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004664:	4b3e      	ldr	r3, [pc, #248]	; (8004760 <HAL_RCC_OscConfig+0x638>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1e7      	bne.n	8004640 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	019b      	lsls	r3, r3, #6
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	085b      	lsrs	r3, r3, #1
 8004688:	3b01      	subs	r3, #1
 800468a:	041b      	lsls	r3, r3, #16
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	061b      	lsls	r3, r3, #24
 8004694:	4932      	ldr	r1, [pc, #200]	; (8004760 <HAL_RCC_OscConfig+0x638>)
 8004696:	4313      	orrs	r3, r2
 8004698:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800469a:	4b32      	ldr	r3, [pc, #200]	; (8004764 <HAL_RCC_OscConfig+0x63c>)
 800469c:	2201      	movs	r2, #1
 800469e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a0:	f7fe f868 	bl	8002774 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a8:	f7fe f864 	bl	8002774 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e04d      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ba:	4b29      	ldr	r3, [pc, #164]	; (8004760 <HAL_RCC_OscConfig+0x638>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0f0      	beq.n	80046a8 <HAL_RCC_OscConfig+0x580>
 80046c6:	e045      	b.n	8004754 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c8:	4b26      	ldr	r3, [pc, #152]	; (8004764 <HAL_RCC_OscConfig+0x63c>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f7fe f851 	bl	8002774 <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d6:	f7fe f84d 	bl	8002774 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e036      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e8:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <HAL_RCC_OscConfig+0x638>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1f0      	bne.n	80046d6 <HAL_RCC_OscConfig+0x5ae>
 80046f4:	e02e      	b.n	8004754 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e029      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004702:	4b17      	ldr	r3, [pc, #92]	; (8004760 <HAL_RCC_OscConfig+0x638>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	429a      	cmp	r2, r3
 8004714:	d11c      	bne.n	8004750 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d115      	bne.n	8004750 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800472a:	4013      	ands	r3, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004730:	4293      	cmp	r3, r2
 8004732:	d10d      	bne.n	8004750 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800473e:	429a      	cmp	r2, r3
 8004740:	d106      	bne.n	8004750 <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40023800 	.word	0x40023800
 8004764:	42470060 	.word	0x42470060

08004768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e174      	b.n	8004a66 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_RCC_ClockConfig+0x24>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b0f      	cmp	r3, #15
 800478a:	d904      	bls.n	8004796 <HAL_RCC_ClockConfig+0x2e>
 800478c:	f240 2151 	movw	r1, #593	; 0x251
 8004790:	487b      	ldr	r0, [pc, #492]	; (8004980 <HAL_RCC_ClockConfig+0x218>)
 8004792:	f7fc f9ec 	bl	8000b6e <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d019      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x68>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d016      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x68>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d013      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x68>
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d010      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x68>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d00d      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x68>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b05      	cmp	r3, #5
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x68>
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	2b06      	cmp	r3, #6
 80047be:	d007      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x68>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b07      	cmp	r3, #7
 80047c4:	d004      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x68>
 80047c6:	f240 2152 	movw	r1, #594	; 0x252
 80047ca:	486d      	ldr	r0, [pc, #436]	; (8004980 <HAL_RCC_ClockConfig+0x218>)
 80047cc:	f7fc f9cf 	bl	8000b6e <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047d0:	4b6c      	ldr	r3, [pc, #432]	; (8004984 <HAL_RCC_ClockConfig+0x21c>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d90c      	bls.n	80047f8 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b69      	ldr	r3, [pc, #420]	; (8004984 <HAL_RCC_ClockConfig+0x21c>)
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e6:	4b67      	ldr	r3, [pc, #412]	; (8004984 <HAL_RCC_ClockConfig+0x21c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e136      	b.n	8004a66 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d049      	beq.n	8004898 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d005      	beq.n	800481c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004810:	4b5d      	ldr	r3, [pc, #372]	; (8004988 <HAL_RCC_ClockConfig+0x220>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	4a5c      	ldr	r2, [pc, #368]	; (8004988 <HAL_RCC_ClockConfig+0x220>)
 8004816:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800481a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004828:	4b57      	ldr	r3, [pc, #348]	; (8004988 <HAL_RCC_ClockConfig+0x220>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4a56      	ldr	r2, [pc, #344]	; (8004988 <HAL_RCC_ClockConfig+0x220>)
 800482e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004832:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d024      	beq.n	8004886 <HAL_RCC_ClockConfig+0x11e>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2b80      	cmp	r3, #128	; 0x80
 8004842:	d020      	beq.n	8004886 <HAL_RCC_ClockConfig+0x11e>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b90      	cmp	r3, #144	; 0x90
 800484a:	d01c      	beq.n	8004886 <HAL_RCC_ClockConfig+0x11e>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2ba0      	cmp	r3, #160	; 0xa0
 8004852:	d018      	beq.n	8004886 <HAL_RCC_ClockConfig+0x11e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2bb0      	cmp	r3, #176	; 0xb0
 800485a:	d014      	beq.n	8004886 <HAL_RCC_ClockConfig+0x11e>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2bc0      	cmp	r3, #192	; 0xc0
 8004862:	d010      	beq.n	8004886 <HAL_RCC_ClockConfig+0x11e>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2bd0      	cmp	r3, #208	; 0xd0
 800486a:	d00c      	beq.n	8004886 <HAL_RCC_ClockConfig+0x11e>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2be0      	cmp	r3, #224	; 0xe0
 8004872:	d008      	beq.n	8004886 <HAL_RCC_ClockConfig+0x11e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2bf0      	cmp	r3, #240	; 0xf0
 800487a:	d004      	beq.n	8004886 <HAL_RCC_ClockConfig+0x11e>
 800487c:	f240 2175 	movw	r1, #629	; 0x275
 8004880:	483f      	ldr	r0, [pc, #252]	; (8004980 <HAL_RCC_ClockConfig+0x218>)
 8004882:	f7fc f974 	bl	8000b6e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004886:	4b40      	ldr	r3, [pc, #256]	; (8004988 <HAL_RCC_ClockConfig+0x220>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	493d      	ldr	r1, [pc, #244]	; (8004988 <HAL_RCC_ClockConfig+0x220>)
 8004894:	4313      	orrs	r3, r2
 8004896:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d059      	beq.n	8004958 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d010      	beq.n	80048ce <HAL_RCC_ClockConfig+0x166>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d00c      	beq.n	80048ce <HAL_RCC_ClockConfig+0x166>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d008      	beq.n	80048ce <HAL_RCC_ClockConfig+0x166>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d004      	beq.n	80048ce <HAL_RCC_ClockConfig+0x166>
 80048c4:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80048c8:	482d      	ldr	r0, [pc, #180]	; (8004980 <HAL_RCC_ClockConfig+0x218>)
 80048ca:	f7fc f950 	bl	8000b6e <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d107      	bne.n	80048e6 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d6:	4b2c      	ldr	r3, [pc, #176]	; (8004988 <HAL_RCC_ClockConfig+0x220>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d119      	bne.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e0bf      	b.n	8004a66 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d003      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d107      	bne.n	8004906 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f6:	4b24      	ldr	r3, [pc, #144]	; (8004988 <HAL_RCC_ClockConfig+0x220>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e0af      	b.n	8004a66 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004906:	4b20      	ldr	r3, [pc, #128]	; (8004988 <HAL_RCC_ClockConfig+0x220>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e0a7      	b.n	8004a66 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004916:	4b1c      	ldr	r3, [pc, #112]	; (8004988 <HAL_RCC_ClockConfig+0x220>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f023 0203 	bic.w	r2, r3, #3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	4919      	ldr	r1, [pc, #100]	; (8004988 <HAL_RCC_ClockConfig+0x220>)
 8004924:	4313      	orrs	r3, r2
 8004926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004928:	f7fd ff24 	bl	8002774 <HAL_GetTick>
 800492c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492e:	e00a      	b.n	8004946 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004930:	f7fd ff20 	bl	8002774 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f241 3288 	movw	r2, #5000	; 0x1388
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e08f      	b.n	8004a66 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004946:	4b10      	ldr	r3, [pc, #64]	; (8004988 <HAL_RCC_ClockConfig+0x220>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 020c 	and.w	r2, r3, #12
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	429a      	cmp	r2, r3
 8004956:	d1eb      	bne.n	8004930 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004958:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <HAL_RCC_ClockConfig+0x21c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 030f 	and.w	r3, r3, #15
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d212      	bcs.n	800498c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004966:	4b07      	ldr	r3, [pc, #28]	; (8004984 <HAL_RCC_ClockConfig+0x21c>)
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <HAL_RCC_ClockConfig+0x21c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d007      	beq.n	800498c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e072      	b.n	8004a66 <HAL_RCC_ClockConfig+0x2fe>
 8004980:	080078e0 	.word	0x080078e0
 8004984:	40023c00 	.word	0x40023c00
 8004988:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d025      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d018      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x26a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a8:	d013      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x26a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049b2:	d00e      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x26a>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80049bc:	d009      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x26a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80049c6:	d004      	beq.n	80049d2 <HAL_RCC_ClockConfig+0x26a>
 80049c8:	f240 21ba 	movw	r1, #698	; 0x2ba
 80049cc:	4828      	ldr	r0, [pc, #160]	; (8004a70 <HAL_RCC_ClockConfig+0x308>)
 80049ce:	f7fc f8ce 	bl	8000b6e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d2:	4b28      	ldr	r3, [pc, #160]	; (8004a74 <HAL_RCC_ClockConfig+0x30c>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	4925      	ldr	r1, [pc, #148]	; (8004a74 <HAL_RCC_ClockConfig+0x30c>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d026      	beq.n	8004a3e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d018      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x2c2>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a00:	d013      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x2c2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a0a:	d00e      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x2c2>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004a14:	d009      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x2c2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004a1e:	d004      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x2c2>
 8004a20:	f240 21c1 	movw	r1, #705	; 0x2c1
 8004a24:	4812      	ldr	r0, [pc, #72]	; (8004a70 <HAL_RCC_ClockConfig+0x308>)
 8004a26:	f7fc f8a2 	bl	8000b6e <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a2a:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <HAL_RCC_ClockConfig+0x30c>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	490e      	ldr	r1, [pc, #56]	; (8004a74 <HAL_RCC_ClockConfig+0x30c>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a3e:	f000 f821 	bl	8004a84 <HAL_RCC_GetSysClockFreq>
 8004a42:	4602      	mov	r2, r0
 8004a44:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <HAL_RCC_ClockConfig+0x30c>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	091b      	lsrs	r3, r3, #4
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	490a      	ldr	r1, [pc, #40]	; (8004a78 <HAL_RCC_ClockConfig+0x310>)
 8004a50:	5ccb      	ldrb	r3, [r1, r3]
 8004a52:	fa22 f303 	lsr.w	r3, r2, r3
 8004a56:	4a09      	ldr	r2, [pc, #36]	; (8004a7c <HAL_RCC_ClockConfig+0x314>)
 8004a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a5a:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <HAL_RCC_ClockConfig+0x318>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fd fe44 	bl	80026ec <HAL_InitTick>

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	080078e0 	.word	0x080078e0
 8004a74:	40023800 	.word	0x40023800
 8004a78:	08007a8c 	.word	0x08007a8c
 8004a7c:	20000000 	.word	0x20000000
 8004a80:	20000004 	.word	0x20000004

08004a84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	607b      	str	r3, [r7, #4]
 8004a90:	2300      	movs	r3, #0
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	2300      	movs	r3, #0
 8004a96:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a9c:	4b67      	ldr	r3, [pc, #412]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 030c 	and.w	r3, r3, #12
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d00d      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x40>
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	f200 80bd 	bhi.w	8004c28 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d003      	beq.n	8004abe <HAL_RCC_GetSysClockFreq+0x3a>
 8004ab6:	e0b7      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ab8:	4b61      	ldr	r3, [pc, #388]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004aba:	60bb      	str	r3, [r7, #8]
       break;
 8004abc:	e0b7      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004abe:	4b61      	ldr	r3, [pc, #388]	; (8004c44 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004ac0:	60bb      	str	r3, [r7, #8]
      break;
 8004ac2:	e0b4      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac4:	4b5d      	ldr	r3, [pc, #372]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004acc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ace:	4b5b      	ldr	r3, [pc, #364]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d04d      	beq.n	8004b76 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ada:	4b58      	ldr	r3, [pc, #352]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	099b      	lsrs	r3, r3, #6
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004aea:	f04f 0100 	mov.w	r1, #0
 8004aee:	ea02 0800 	and.w	r8, r2, r0
 8004af2:	ea03 0901 	and.w	r9, r3, r1
 8004af6:	4640      	mov	r0, r8
 8004af8:	4649      	mov	r1, r9
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	014b      	lsls	r3, r1, #5
 8004b04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b08:	0142      	lsls	r2, r0, #5
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	ebb0 0008 	subs.w	r0, r0, r8
 8004b12:	eb61 0109 	sbc.w	r1, r1, r9
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	018b      	lsls	r3, r1, #6
 8004b20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b24:	0182      	lsls	r2, r0, #6
 8004b26:	1a12      	subs	r2, r2, r0
 8004b28:	eb63 0301 	sbc.w	r3, r3, r1
 8004b2c:	f04f 0000 	mov.w	r0, #0
 8004b30:	f04f 0100 	mov.w	r1, #0
 8004b34:	00d9      	lsls	r1, r3, #3
 8004b36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b3a:	00d0      	lsls	r0, r2, #3
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	eb12 0208 	adds.w	r2, r2, r8
 8004b44:	eb43 0309 	adc.w	r3, r3, r9
 8004b48:	f04f 0000 	mov.w	r0, #0
 8004b4c:	f04f 0100 	mov.w	r1, #0
 8004b50:	0259      	lsls	r1, r3, #9
 8004b52:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b56:	0250      	lsls	r0, r2, #9
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4619      	mov	r1, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	461a      	mov	r2, r3
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	f7fb fb82 	bl	8000270 <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4613      	mov	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	e04a      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b76:	4b31      	ldr	r3, [pc, #196]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	099b      	lsrs	r3, r3, #6
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b86:	f04f 0100 	mov.w	r1, #0
 8004b8a:	ea02 0400 	and.w	r4, r2, r0
 8004b8e:	ea03 0501 	and.w	r5, r3, r1
 8004b92:	4620      	mov	r0, r4
 8004b94:	4629      	mov	r1, r5
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	014b      	lsls	r3, r1, #5
 8004ba0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ba4:	0142      	lsls	r2, r0, #5
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	4619      	mov	r1, r3
 8004baa:	1b00      	subs	r0, r0, r4
 8004bac:	eb61 0105 	sbc.w	r1, r1, r5
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	018b      	lsls	r3, r1, #6
 8004bba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bbe:	0182      	lsls	r2, r0, #6
 8004bc0:	1a12      	subs	r2, r2, r0
 8004bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8004bc6:	f04f 0000 	mov.w	r0, #0
 8004bca:	f04f 0100 	mov.w	r1, #0
 8004bce:	00d9      	lsls	r1, r3, #3
 8004bd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bd4:	00d0      	lsls	r0, r2, #3
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	1912      	adds	r2, r2, r4
 8004bdc:	eb45 0303 	adc.w	r3, r5, r3
 8004be0:	f04f 0000 	mov.w	r0, #0
 8004be4:	f04f 0100 	mov.w	r1, #0
 8004be8:	0299      	lsls	r1, r3, #10
 8004bea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004bee:	0290      	lsls	r0, r2, #10
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	f7fb fb36 	bl	8000270 <__aeabi_uldivmod>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4613      	mov	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	0c1b      	lsrs	r3, r3, #16
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	3301      	adds	r3, #1
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c24:	60bb      	str	r3, [r7, #8]
      break;
 8004c26:	e002      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c28:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004c2a:	60bb      	str	r3, [r7, #8]
      break;
 8004c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	00f42400 	.word	0x00f42400
 8004c44:	007a1200 	.word	0x007a1200

08004c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c4c:	4b03      	ldr	r3, [pc, #12]	; (8004c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	20000000 	.word	0x20000000

08004c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c64:	f7ff fff0 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	4b05      	ldr	r3, [pc, #20]	; (8004c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	0a9b      	lsrs	r3, r3, #10
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	4903      	ldr	r1, [pc, #12]	; (8004c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c76:	5ccb      	ldrb	r3, [r1, r3]
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40023800 	.word	0x40023800
 8004c84:	08007a9c 	.word	0x08007a9c

08004c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c8c:	f7ff ffdc 	bl	8004c48 <HAL_RCC_GetHCLKFreq>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	0b5b      	lsrs	r3, r3, #13
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	4903      	ldr	r1, [pc, #12]	; (8004cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	08007a9c 	.word	0x08007a9c

08004cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e0b4      	b.n	8004e2c <HAL_UART_Init+0x17c>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d031      	beq.n	8004d2e <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a59      	ldr	r2, [pc, #356]	; (8004e34 <HAL_UART_Init+0x184>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d013      	beq.n	8004cfc <HAL_UART_Init+0x4c>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a57      	ldr	r2, [pc, #348]	; (8004e38 <HAL_UART_Init+0x188>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00e      	beq.n	8004cfc <HAL_UART_Init+0x4c>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a56      	ldr	r2, [pc, #344]	; (8004e3c <HAL_UART_Init+0x18c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d009      	beq.n	8004cfc <HAL_UART_Init+0x4c>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a54      	ldr	r2, [pc, #336]	; (8004e40 <HAL_UART_Init+0x190>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d004      	beq.n	8004cfc <HAL_UART_Init+0x4c>
 8004cf2:	f240 114b 	movw	r1, #331	; 0x14b
 8004cf6:	4853      	ldr	r0, [pc, #332]	; (8004e44 <HAL_UART_Init+0x194>)
 8004cf8:	f7fb ff39 	bl	8000b6e <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d037      	beq.n	8004d74 <HAL_UART_Init+0xc4>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d0c:	d032      	beq.n	8004d74 <HAL_UART_Init+0xc4>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d16:	d02d      	beq.n	8004d74 <HAL_UART_Init+0xc4>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d20:	d028      	beq.n	8004d74 <HAL_UART_Init+0xc4>
 8004d22:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004d26:	4847      	ldr	r0, [pc, #284]	; (8004e44 <HAL_UART_Init+0x194>)
 8004d28:	f7fb ff21 	bl	8000b6e <assert_failed>
 8004d2c:	e022      	b.n	8004d74 <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a40      	ldr	r2, [pc, #256]	; (8004e34 <HAL_UART_Init+0x184>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d01d      	beq.n	8004d74 <HAL_UART_Init+0xc4>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a3e      	ldr	r2, [pc, #248]	; (8004e38 <HAL_UART_Init+0x188>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d018      	beq.n	8004d74 <HAL_UART_Init+0xc4>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a3d      	ldr	r2, [pc, #244]	; (8004e3c <HAL_UART_Init+0x18c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d013      	beq.n	8004d74 <HAL_UART_Init+0xc4>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a3d      	ldr	r2, [pc, #244]	; (8004e48 <HAL_UART_Init+0x198>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00e      	beq.n	8004d74 <HAL_UART_Init+0xc4>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a3c      	ldr	r2, [pc, #240]	; (8004e4c <HAL_UART_Init+0x19c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d009      	beq.n	8004d74 <HAL_UART_Init+0xc4>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a36      	ldr	r2, [pc, #216]	; (8004e40 <HAL_UART_Init+0x190>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_UART_Init+0xc4>
 8004d6a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004d6e:	4835      	ldr	r0, [pc, #212]	; (8004e44 <HAL_UART_Init+0x194>)
 8004d70:	f7fb fefd 	bl	8000b6e <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d009      	beq.n	8004d90 <HAL_UART_Init+0xe0>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d84:	d004      	beq.n	8004d90 <HAL_UART_Init+0xe0>
 8004d86:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8004d8a:	482e      	ldr	r0, [pc, #184]	; (8004e44 <HAL_UART_Init+0x194>)
 8004d8c:	f7fb feef 	bl	8000b6e <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <HAL_UART_Init+0xfc>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da0:	d004      	beq.n	8004dac <HAL_UART_Init+0xfc>
 8004da2:	f240 1153 	movw	r1, #339	; 0x153
 8004da6:	4827      	ldr	r0, [pc, #156]	; (8004e44 <HAL_UART_Init+0x194>)
 8004da8:	f7fb fee1 	bl	8000b6e <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d106      	bne.n	8004dc6 <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f7fd fbbb 	bl	800253c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2224      	movs	r2, #36	; 0x24
 8004dca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ddc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 fa76 	bl	80052d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004df2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e02:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e12:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3708      	adds	r7, #8
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40011000 	.word	0x40011000
 8004e38:	40004400 	.word	0x40004400
 8004e3c:	40004800 	.word	0x40004800
 8004e40:	40011400 	.word	0x40011400
 8004e44:	08007918 	.word	0x08007918
 8004e48:	40004c00 	.word	0x40004c00
 8004e4c:	40005000 	.word	0x40005000

08004e50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10d      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x52>
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f996 	bl	80051cc <UART_Receive_IT>
      return;
 8004ea0:	e0d0      	b.n	8005044 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80b0 	beq.w	800500a <HAL_UART_IRQHandler+0x1ba>
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d105      	bne.n	8004ec0 <HAL_UART_IRQHandler+0x70>
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 80a5 	beq.w	800500a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <HAL_UART_IRQHandler+0x90>
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed8:	f043 0201 	orr.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <HAL_UART_IRQHandler+0xb0>
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d005      	beq.n	8004f00 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef8:	f043 0202 	orr.w	r2, r3, #2
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <HAL_UART_IRQHandler+0xd0>
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f18:	f043 0204 	orr.w	r2, r3, #4
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00f      	beq.n	8004f4a <HAL_UART_IRQHandler+0xfa>
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d104      	bne.n	8004f3e <HAL_UART_IRQHandler+0xee>
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f42:	f043 0208 	orr.w	r2, r3, #8
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d077      	beq.n	8005042 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d007      	beq.n	8004f6c <HAL_UART_IRQHandler+0x11c>
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f930 	bl	80051cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f76:	2b40      	cmp	r3, #64	; 0x40
 8004f78:	bf0c      	ite	eq
 8004f7a:	2301      	moveq	r3, #1
 8004f7c:	2300      	movne	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d102      	bne.n	8004f94 <HAL_UART_IRQHandler+0x144>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d031      	beq.n	8004ff8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f879 	bl	800508c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa4:	2b40      	cmp	r3, #64	; 0x40
 8004fa6:	d123      	bne.n	8004ff0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695a      	ldr	r2, [r3, #20]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d013      	beq.n	8004fe8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	4a21      	ldr	r2, [pc, #132]	; (800504c <HAL_UART_IRQHandler+0x1fc>)
 8004fc6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fe fda5 	bl	8003b1c <HAL_DMA_Abort_IT>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d016      	beq.n	8005006 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fe6:	e00e      	b.n	8005006 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f845 	bl	8005078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fee:	e00a      	b.n	8005006 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f841 	bl	8005078 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff6:	e006      	b.n	8005006 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f83d 	bl	8005078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005004:	e01d      	b.n	8005042 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005006:	bf00      	nop
    return;
 8005008:	e01b      	b.n	8005042 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005010:	2b00      	cmp	r3, #0
 8005012:	d008      	beq.n	8005026 <HAL_UART_IRQHandler+0x1d6>
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f866 	bl	80050f0 <UART_Transmit_IT>
    return;
 8005024:	e00e      	b.n	8005044 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	d009      	beq.n	8005044 <HAL_UART_IRQHandler+0x1f4>
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f8ae 	bl	800519c <UART_EndTransmit_IT>
    return;
 8005040:	e000      	b.n	8005044 <HAL_UART_IRQHandler+0x1f4>
    return;
 8005042:	bf00      	nop
  }
}
 8005044:	3720      	adds	r7, #32
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	080050c9 	.word	0x080050c9

08005050 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050a2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695a      	ldr	r2, [r3, #20]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0201 	bic.w	r2, r2, #1
 80050b2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff ffc8 	bl	8005078 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050e8:	bf00      	nop
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b21      	cmp	r3, #33	; 0x21
 8005102:	d144      	bne.n	800518e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510c:	d11a      	bne.n	8005144 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005122:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d105      	bne.n	8005138 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	1c9a      	adds	r2, r3, #2
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	621a      	str	r2, [r3, #32]
 8005136:	e00e      	b.n	8005156 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	621a      	str	r2, [r3, #32]
 8005142:	e008      	b.n	8005156 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	1c59      	adds	r1, r3, #1
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6211      	str	r1, [r2, #32]
 800514e:	781a      	ldrb	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29b      	uxth	r3, r3
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	4619      	mov	r1, r3
 8005164:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10f      	bne.n	800518a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005178:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005188:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	e000      	b.n	8005190 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800518e:	2302      	movs	r3, #2
  }
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7ff ff47 	bl	8005050 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b22      	cmp	r3, #34	; 0x22
 80051de:	d171      	bne.n	80052c4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e8:	d123      	bne.n	8005232 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10e      	bne.n	8005216 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	1c9a      	adds	r2, r3, #2
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	629a      	str	r2, [r3, #40]	; 0x28
 8005214:	e029      	b.n	800526a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	b29b      	uxth	r3, r3
 800521e:	b2db      	uxtb	r3, r3
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	629a      	str	r2, [r3, #40]	; 0x28
 8005230:	e01b      	b.n	800526a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10a      	bne.n	8005250 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6858      	ldr	r0, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	1c59      	adds	r1, r3, #1
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6291      	str	r1, [r2, #40]	; 0x28
 800524a:	b2c2      	uxtb	r2, r0
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	e00c      	b.n	800526a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	1c58      	adds	r0, r3, #1
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	6288      	str	r0, [r1, #40]	; 0x28
 8005262:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29b      	uxth	r3, r3
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	4619      	mov	r1, r3
 8005278:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800527a:	2b00      	cmp	r3, #0
 800527c:	d120      	bne.n	80052c0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0220 	bic.w	r2, r2, #32
 800528c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800529c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695a      	ldr	r2, [r3, #20]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0201 	bic.w	r2, r2, #1
 80052ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7ff fed4 	bl	8005064 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	e002      	b.n	80052c6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e000      	b.n	80052c6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80052c4:	2302      	movs	r3, #2
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d4:	b0bd      	sub	sp, #244	; 0xf4
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80052dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	4bae      	ldr	r3, [pc, #696]	; (800559c <UART_SetConfig+0x2cc>)
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d904      	bls.n	80052f2 <UART_SetConfig+0x22>
 80052e8:	f640 31fb 	movw	r1, #3067	; 0xbfb
 80052ec:	48ac      	ldr	r0, [pc, #688]	; (80055a0 <UART_SetConfig+0x2d0>)
 80052ee:	f7fb fc3e 	bl	8000b6e <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80052f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <UART_SetConfig+0x42>
 80052fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005306:	d004      	beq.n	8005312 <UART_SetConfig+0x42>
 8005308:	f640 31fc 	movw	r1, #3068	; 0xbfc
 800530c:	48a4      	ldr	r0, [pc, #656]	; (80055a0 <UART_SetConfig+0x2d0>)
 800530e:	f7fb fc2e 	bl	8000b6e <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d010      	beq.n	800533e <UART_SetConfig+0x6e>
 800531c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005326:	d00a      	beq.n	800533e <UART_SetConfig+0x6e>
 8005328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005332:	d004      	beq.n	800533e <UART_SetConfig+0x6e>
 8005334:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8005338:	4899      	ldr	r0, [pc, #612]	; (80055a0 <UART_SetConfig+0x2d0>)
 800533a:	f7fb fc18 	bl	8000b6e <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800533e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005342:	695a      	ldr	r2, [r3, #20]
 8005344:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d104      	bne.n	8005358 <UART_SetConfig+0x88>
 800534e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <UART_SetConfig+0x92>
 8005358:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800535c:	4890      	ldr	r0, [pc, #576]	; (80055a0 <UART_SetConfig+0x2d0>)
 800535e:	f7fb fc06 	bl	8000b6e <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800536e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005372:	68d9      	ldr	r1, [r3, #12]
 8005374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	ea40 0301 	orr.w	r3, r0, r1
 800537e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	431a      	orrs	r2, r3
 800538e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	431a      	orrs	r2, r3
 8005396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80053a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053ae:	f021 010c 	bic.w	r1, r1, #12
 80053b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053bc:	430b      	orrs	r3, r1
 80053be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d0:	6999      	ldr	r1, [r3, #24]
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	ea40 0301 	orr.w	r3, r0, r1
 80053dc:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e8:	f040 81a9 	bne.w	800573e <UART_SetConfig+0x46e>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4b6c      	ldr	r3, [pc, #432]	; (80055a4 <UART_SetConfig+0x2d4>)
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d006      	beq.n	8005406 <UART_SetConfig+0x136>
 80053f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4b6a      	ldr	r3, [pc, #424]	; (80055a8 <UART_SetConfig+0x2d8>)
 8005400:	429a      	cmp	r2, r3
 8005402:	f040 80d5 	bne.w	80055b0 <UART_SetConfig+0x2e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005406:	f7ff fc3f 	bl	8004c88 <HAL_RCC_GetPCLK2Freq>
 800540a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800540e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005412:	461c      	mov	r4, r3
 8005414:	f04f 0500 	mov.w	r5, #0
 8005418:	4622      	mov	r2, r4
 800541a:	462b      	mov	r3, r5
 800541c:	1891      	adds	r1, r2, r2
 800541e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005422:	415b      	adcs	r3, r3
 8005424:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005428:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800542c:	1912      	adds	r2, r2, r4
 800542e:	eb45 0303 	adc.w	r3, r5, r3
 8005432:	f04f 0000 	mov.w	r0, #0
 8005436:	f04f 0100 	mov.w	r1, #0
 800543a:	00d9      	lsls	r1, r3, #3
 800543c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005440:	00d0      	lsls	r0, r2, #3
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	1911      	adds	r1, r2, r4
 8005448:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800544c:	416b      	adcs	r3, r5
 800544e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	461a      	mov	r2, r3
 800545a:	f04f 0300 	mov.w	r3, #0
 800545e:	1891      	adds	r1, r2, r2
 8005460:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005464:	415b      	adcs	r3, r3
 8005466:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800546a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800546e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005472:	f7fa fefd 	bl	8000270 <__aeabi_uldivmod>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4b4c      	ldr	r3, [pc, #304]	; (80055ac <UART_SetConfig+0x2dc>)
 800547c:	fba3 2302 	umull	r2, r3, r3, r2
 8005480:	095b      	lsrs	r3, r3, #5
 8005482:	011e      	lsls	r6, r3, #4
 8005484:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005488:	461c      	mov	r4, r3
 800548a:	f04f 0500 	mov.w	r5, #0
 800548e:	4622      	mov	r2, r4
 8005490:	462b      	mov	r3, r5
 8005492:	1891      	adds	r1, r2, r2
 8005494:	67b9      	str	r1, [r7, #120]	; 0x78
 8005496:	415b      	adcs	r3, r3
 8005498:	67fb      	str	r3, [r7, #124]	; 0x7c
 800549a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800549e:	1912      	adds	r2, r2, r4
 80054a0:	eb45 0303 	adc.w	r3, r5, r3
 80054a4:	f04f 0000 	mov.w	r0, #0
 80054a8:	f04f 0100 	mov.w	r1, #0
 80054ac:	00d9      	lsls	r1, r3, #3
 80054ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054b2:	00d0      	lsls	r0, r2, #3
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	1911      	adds	r1, r2, r4
 80054ba:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80054be:	416b      	adcs	r3, r5
 80054c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80054c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	461a      	mov	r2, r3
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	1891      	adds	r1, r2, r2
 80054d2:	6739      	str	r1, [r7, #112]	; 0x70
 80054d4:	415b      	adcs	r3, r3
 80054d6:	677b      	str	r3, [r7, #116]	; 0x74
 80054d8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80054dc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80054e0:	f7fa fec6 	bl	8000270 <__aeabi_uldivmod>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4b30      	ldr	r3, [pc, #192]	; (80055ac <UART_SetConfig+0x2dc>)
 80054ea:	fba3 1302 	umull	r1, r3, r3, r2
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	2164      	movs	r1, #100	; 0x64
 80054f2:	fb01 f303 	mul.w	r3, r1, r3
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	3332      	adds	r3, #50	; 0x32
 80054fc:	4a2b      	ldr	r2, [pc, #172]	; (80055ac <UART_SetConfig+0x2dc>)
 80054fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800550a:	441e      	add	r6, r3
 800550c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005510:	4618      	mov	r0, r3
 8005512:	f04f 0100 	mov.w	r1, #0
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	1894      	adds	r4, r2, r2
 800551c:	66bc      	str	r4, [r7, #104]	; 0x68
 800551e:	415b      	adcs	r3, r3
 8005520:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005522:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005526:	1812      	adds	r2, r2, r0
 8005528:	eb41 0303 	adc.w	r3, r1, r3
 800552c:	f04f 0400 	mov.w	r4, #0
 8005530:	f04f 0500 	mov.w	r5, #0
 8005534:	00dd      	lsls	r5, r3, #3
 8005536:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800553a:	00d4      	lsls	r4, r2, #3
 800553c:	4622      	mov	r2, r4
 800553e:	462b      	mov	r3, r5
 8005540:	1814      	adds	r4, r2, r0
 8005542:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8005546:	414b      	adcs	r3, r1
 8005548:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800554c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	461a      	mov	r2, r3
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	1891      	adds	r1, r2, r2
 800555a:	6639      	str	r1, [r7, #96]	; 0x60
 800555c:	415b      	adcs	r3, r3
 800555e:	667b      	str	r3, [r7, #100]	; 0x64
 8005560:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005564:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005568:	f7fa fe82 	bl	8000270 <__aeabi_uldivmod>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4b0e      	ldr	r3, [pc, #56]	; (80055ac <UART_SetConfig+0x2dc>)
 8005572:	fba3 1302 	umull	r1, r3, r3, r2
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	2164      	movs	r1, #100	; 0x64
 800557a:	fb01 f303 	mul.w	r3, r1, r3
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	3332      	adds	r3, #50	; 0x32
 8005584:	4a09      	ldr	r2, [pc, #36]	; (80055ac <UART_SetConfig+0x2dc>)
 8005586:	fba2 2303 	umull	r2, r3, r2, r3
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	f003 0207 	and.w	r2, r3, #7
 8005590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4432      	add	r2, r6
 8005598:	609a      	str	r2, [r3, #8]
 800559a:	e277      	b.n	8005a8c <UART_SetConfig+0x7bc>
 800559c:	00a037a0 	.word	0x00a037a0
 80055a0:	08007918 	.word	0x08007918
 80055a4:	40011000 	.word	0x40011000
 80055a8:	40011400 	.word	0x40011400
 80055ac:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055b0:	f7ff fb56 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 80055b4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055bc:	461c      	mov	r4, r3
 80055be:	f04f 0500 	mov.w	r5, #0
 80055c2:	4622      	mov	r2, r4
 80055c4:	462b      	mov	r3, r5
 80055c6:	1891      	adds	r1, r2, r2
 80055c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80055ca:	415b      	adcs	r3, r3
 80055cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055d2:	1912      	adds	r2, r2, r4
 80055d4:	eb45 0303 	adc.w	r3, r5, r3
 80055d8:	f04f 0000 	mov.w	r0, #0
 80055dc:	f04f 0100 	mov.w	r1, #0
 80055e0:	00d9      	lsls	r1, r3, #3
 80055e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055e6:	00d0      	lsls	r0, r2, #3
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	1911      	adds	r1, r2, r4
 80055ee:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80055f2:	416b      	adcs	r3, r5
 80055f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	461a      	mov	r2, r3
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	1891      	adds	r1, r2, r2
 8005606:	6539      	str	r1, [r7, #80]	; 0x50
 8005608:	415b      	adcs	r3, r3
 800560a:	657b      	str	r3, [r7, #84]	; 0x54
 800560c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005610:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8005614:	f7fa fe2c 	bl	8000270 <__aeabi_uldivmod>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4bb3      	ldr	r3, [pc, #716]	; (80058ec <UART_SetConfig+0x61c>)
 800561e:	fba3 2302 	umull	r2, r3, r3, r2
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	011e      	lsls	r6, r3, #4
 8005626:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800562a:	461c      	mov	r4, r3
 800562c:	f04f 0500 	mov.w	r5, #0
 8005630:	4622      	mov	r2, r4
 8005632:	462b      	mov	r3, r5
 8005634:	1891      	adds	r1, r2, r2
 8005636:	64b9      	str	r1, [r7, #72]	; 0x48
 8005638:	415b      	adcs	r3, r3
 800563a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800563c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005640:	1912      	adds	r2, r2, r4
 8005642:	eb45 0303 	adc.w	r3, r5, r3
 8005646:	f04f 0000 	mov.w	r0, #0
 800564a:	f04f 0100 	mov.w	r1, #0
 800564e:	00d9      	lsls	r1, r3, #3
 8005650:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005654:	00d0      	lsls	r0, r2, #3
 8005656:	4602      	mov	r2, r0
 8005658:	460b      	mov	r3, r1
 800565a:	1911      	adds	r1, r2, r4
 800565c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005660:	416b      	adcs	r3, r5
 8005662:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	461a      	mov	r2, r3
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	1891      	adds	r1, r2, r2
 8005674:	6439      	str	r1, [r7, #64]	; 0x40
 8005676:	415b      	adcs	r3, r3
 8005678:	647b      	str	r3, [r7, #68]	; 0x44
 800567a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800567e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005682:	f7fa fdf5 	bl	8000270 <__aeabi_uldivmod>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4b98      	ldr	r3, [pc, #608]	; (80058ec <UART_SetConfig+0x61c>)
 800568c:	fba3 1302 	umull	r1, r3, r3, r2
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	2164      	movs	r1, #100	; 0x64
 8005694:	fb01 f303 	mul.w	r3, r1, r3
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	00db      	lsls	r3, r3, #3
 800569c:	3332      	adds	r3, #50	; 0x32
 800569e:	4a93      	ldr	r2, [pc, #588]	; (80058ec <UART_SetConfig+0x61c>)
 80056a0:	fba2 2303 	umull	r2, r3, r2, r3
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	005b      	lsls	r3, r3, #1
 80056a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056ac:	441e      	add	r6, r3
 80056ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056b2:	4618      	mov	r0, r3
 80056b4:	f04f 0100 	mov.w	r1, #0
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	1894      	adds	r4, r2, r2
 80056be:	63bc      	str	r4, [r7, #56]	; 0x38
 80056c0:	415b      	adcs	r3, r3
 80056c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056c8:	1812      	adds	r2, r2, r0
 80056ca:	eb41 0303 	adc.w	r3, r1, r3
 80056ce:	f04f 0400 	mov.w	r4, #0
 80056d2:	f04f 0500 	mov.w	r5, #0
 80056d6:	00dd      	lsls	r5, r3, #3
 80056d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056dc:	00d4      	lsls	r4, r2, #3
 80056de:	4622      	mov	r2, r4
 80056e0:	462b      	mov	r3, r5
 80056e2:	1814      	adds	r4, r2, r0
 80056e4:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80056e8:	414b      	adcs	r3, r1
 80056ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	461a      	mov	r2, r3
 80056f6:	f04f 0300 	mov.w	r3, #0
 80056fa:	1891      	adds	r1, r2, r2
 80056fc:	6339      	str	r1, [r7, #48]	; 0x30
 80056fe:	415b      	adcs	r3, r3
 8005700:	637b      	str	r3, [r7, #52]	; 0x34
 8005702:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005706:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800570a:	f7fa fdb1 	bl	8000270 <__aeabi_uldivmod>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	4b76      	ldr	r3, [pc, #472]	; (80058ec <UART_SetConfig+0x61c>)
 8005714:	fba3 1302 	umull	r1, r3, r3, r2
 8005718:	095b      	lsrs	r3, r3, #5
 800571a:	2164      	movs	r1, #100	; 0x64
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	1ad3      	subs	r3, r2, r3
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	3332      	adds	r3, #50	; 0x32
 8005726:	4a71      	ldr	r2, [pc, #452]	; (80058ec <UART_SetConfig+0x61c>)
 8005728:	fba2 2303 	umull	r2, r3, r2, r3
 800572c:	095b      	lsrs	r3, r3, #5
 800572e:	f003 0207 	and.w	r2, r3, #7
 8005732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4432      	add	r2, r6
 800573a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800573c:	e1a6      	b.n	8005a8c <UART_SetConfig+0x7bc>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800573e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	4b6a      	ldr	r3, [pc, #424]	; (80058f0 <UART_SetConfig+0x620>)
 8005746:	429a      	cmp	r2, r3
 8005748:	d006      	beq.n	8005758 <UART_SetConfig+0x488>
 800574a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	4b68      	ldr	r3, [pc, #416]	; (80058f4 <UART_SetConfig+0x624>)
 8005752:	429a      	cmp	r2, r3
 8005754:	f040 80d0 	bne.w	80058f8 <UART_SetConfig+0x628>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005758:	f7ff fa96 	bl	8004c88 <HAL_RCC_GetPCLK2Freq>
 800575c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005760:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005764:	461c      	mov	r4, r3
 8005766:	f04f 0500 	mov.w	r5, #0
 800576a:	4622      	mov	r2, r4
 800576c:	462b      	mov	r3, r5
 800576e:	1891      	adds	r1, r2, r2
 8005770:	62b9      	str	r1, [r7, #40]	; 0x28
 8005772:	415b      	adcs	r3, r3
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005776:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800577a:	1912      	adds	r2, r2, r4
 800577c:	eb45 0303 	adc.w	r3, r5, r3
 8005780:	f04f 0000 	mov.w	r0, #0
 8005784:	f04f 0100 	mov.w	r1, #0
 8005788:	00d9      	lsls	r1, r3, #3
 800578a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800578e:	00d0      	lsls	r0, r2, #3
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	eb12 0a04 	adds.w	sl, r2, r4
 8005798:	eb43 0b05 	adc.w	fp, r3, r5
 800579c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f04f 0100 	mov.w	r1, #0
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	008b      	lsls	r3, r1, #2
 80057b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057b6:	0082      	lsls	r2, r0, #2
 80057b8:	4650      	mov	r0, sl
 80057ba:	4659      	mov	r1, fp
 80057bc:	f7fa fd58 	bl	8000270 <__aeabi_uldivmod>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4b49      	ldr	r3, [pc, #292]	; (80058ec <UART_SetConfig+0x61c>)
 80057c6:	fba3 2302 	umull	r2, r3, r3, r2
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	011e      	lsls	r6, r3, #4
 80057ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057d2:	4618      	mov	r0, r3
 80057d4:	f04f 0100 	mov.w	r1, #0
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	1894      	adds	r4, r2, r2
 80057de:	623c      	str	r4, [r7, #32]
 80057e0:	415b      	adcs	r3, r3
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
 80057e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057e8:	1812      	adds	r2, r2, r0
 80057ea:	eb41 0303 	adc.w	r3, r1, r3
 80057ee:	f04f 0400 	mov.w	r4, #0
 80057f2:	f04f 0500 	mov.w	r5, #0
 80057f6:	00dd      	lsls	r5, r3, #3
 80057f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057fc:	00d4      	lsls	r4, r2, #3
 80057fe:	4622      	mov	r2, r4
 8005800:	462b      	mov	r3, r5
 8005802:	1814      	adds	r4, r2, r0
 8005804:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005808:	414b      	adcs	r3, r1
 800580a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800580e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	4618      	mov	r0, r3
 8005816:	f04f 0100 	mov.w	r1, #0
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	f04f 0300 	mov.w	r3, #0
 8005822:	008b      	lsls	r3, r1, #2
 8005824:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005828:	0082      	lsls	r2, r0, #2
 800582a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800582e:	f7fa fd1f 	bl	8000270 <__aeabi_uldivmod>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	4b2d      	ldr	r3, [pc, #180]	; (80058ec <UART_SetConfig+0x61c>)
 8005838:	fba3 1302 	umull	r1, r3, r3, r2
 800583c:	095b      	lsrs	r3, r3, #5
 800583e:	2164      	movs	r1, #100	; 0x64
 8005840:	fb01 f303 	mul.w	r3, r1, r3
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	3332      	adds	r3, #50	; 0x32
 800584a:	4a28      	ldr	r2, [pc, #160]	; (80058ec <UART_SetConfig+0x61c>)
 800584c:	fba2 2303 	umull	r2, r3, r2, r3
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005856:	441e      	add	r6, r3
 8005858:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800585c:	4618      	mov	r0, r3
 800585e:	f04f 0100 	mov.w	r1, #0
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	1894      	adds	r4, r2, r2
 8005868:	61bc      	str	r4, [r7, #24]
 800586a:	415b      	adcs	r3, r3
 800586c:	61fb      	str	r3, [r7, #28]
 800586e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005872:	1812      	adds	r2, r2, r0
 8005874:	eb41 0303 	adc.w	r3, r1, r3
 8005878:	f04f 0400 	mov.w	r4, #0
 800587c:	f04f 0500 	mov.w	r5, #0
 8005880:	00dd      	lsls	r5, r3, #3
 8005882:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005886:	00d4      	lsls	r4, r2, #3
 8005888:	4622      	mov	r2, r4
 800588a:	462b      	mov	r3, r5
 800588c:	1814      	adds	r4, r2, r0
 800588e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8005892:	414b      	adcs	r3, r1
 8005894:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	4618      	mov	r0, r3
 80058a0:	f04f 0100 	mov.w	r1, #0
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	008b      	lsls	r3, r1, #2
 80058ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058b2:	0082      	lsls	r2, r0, #2
 80058b4:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80058b8:	f7fa fcda 	bl	8000270 <__aeabi_uldivmod>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <UART_SetConfig+0x61c>)
 80058c2:	fba3 1302 	umull	r1, r3, r3, r2
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	2164      	movs	r1, #100	; 0x64
 80058ca:	fb01 f303 	mul.w	r3, r1, r3
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	011b      	lsls	r3, r3, #4
 80058d2:	3332      	adds	r3, #50	; 0x32
 80058d4:	4a05      	ldr	r2, [pc, #20]	; (80058ec <UART_SetConfig+0x61c>)
 80058d6:	fba2 2303 	umull	r2, r3, r2, r3
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	f003 020f 	and.w	r2, r3, #15
 80058e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4432      	add	r2, r6
 80058e8:	609a      	str	r2, [r3, #8]
 80058ea:	e0cf      	b.n	8005a8c <UART_SetConfig+0x7bc>
 80058ec:	51eb851f 	.word	0x51eb851f
 80058f0:	40011000 	.word	0x40011000
 80058f4:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 80058f8:	f7ff f9b2 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 80058fc:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005900:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005904:	461c      	mov	r4, r3
 8005906:	f04f 0500 	mov.w	r5, #0
 800590a:	4622      	mov	r2, r4
 800590c:	462b      	mov	r3, r5
 800590e:	1891      	adds	r1, r2, r2
 8005910:	6139      	str	r1, [r7, #16]
 8005912:	415b      	adcs	r3, r3
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800591a:	1912      	adds	r2, r2, r4
 800591c:	eb45 0303 	adc.w	r3, r5, r3
 8005920:	f04f 0000 	mov.w	r0, #0
 8005924:	f04f 0100 	mov.w	r1, #0
 8005928:	00d9      	lsls	r1, r3, #3
 800592a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800592e:	00d0      	lsls	r0, r2, #3
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	eb12 0804 	adds.w	r8, r2, r4
 8005938:	eb43 0905 	adc.w	r9, r3, r5
 800593c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	4618      	mov	r0, r3
 8005944:	f04f 0100 	mov.w	r1, #0
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	008b      	lsls	r3, r1, #2
 8005952:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005956:	0082      	lsls	r2, r0, #2
 8005958:	4640      	mov	r0, r8
 800595a:	4649      	mov	r1, r9
 800595c:	f7fa fc88 	bl	8000270 <__aeabi_uldivmod>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4b4c      	ldr	r3, [pc, #304]	; (8005a98 <UART_SetConfig+0x7c8>)
 8005966:	fba3 2302 	umull	r2, r3, r3, r2
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	011e      	lsls	r6, r3, #4
 800596e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005972:	4618      	mov	r0, r3
 8005974:	f04f 0100 	mov.w	r1, #0
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	1894      	adds	r4, r2, r2
 800597e:	60bc      	str	r4, [r7, #8]
 8005980:	415b      	adcs	r3, r3
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005988:	1812      	adds	r2, r2, r0
 800598a:	eb41 0303 	adc.w	r3, r1, r3
 800598e:	f04f 0400 	mov.w	r4, #0
 8005992:	f04f 0500 	mov.w	r5, #0
 8005996:	00dd      	lsls	r5, r3, #3
 8005998:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800599c:	00d4      	lsls	r4, r2, #3
 800599e:	4622      	mov	r2, r4
 80059a0:	462b      	mov	r3, r5
 80059a2:	1814      	adds	r4, r2, r0
 80059a4:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80059a8:	414b      	adcs	r3, r1
 80059aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f04f 0100 	mov.w	r1, #0
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	008b      	lsls	r3, r1, #2
 80059c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059c8:	0082      	lsls	r2, r0, #2
 80059ca:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059ce:	f7fa fc4f 	bl	8000270 <__aeabi_uldivmod>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4b30      	ldr	r3, [pc, #192]	; (8005a98 <UART_SetConfig+0x7c8>)
 80059d8:	fba3 1302 	umull	r1, r3, r3, r2
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	2164      	movs	r1, #100	; 0x64
 80059e0:	fb01 f303 	mul.w	r3, r1, r3
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	011b      	lsls	r3, r3, #4
 80059e8:	3332      	adds	r3, #50	; 0x32
 80059ea:	4a2b      	ldr	r2, [pc, #172]	; (8005a98 <UART_SetConfig+0x7c8>)
 80059ec:	fba2 2303 	umull	r2, r3, r2, r3
 80059f0:	095b      	lsrs	r3, r3, #5
 80059f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059f6:	441e      	add	r6, r3
 80059f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059fc:	4618      	mov	r0, r3
 80059fe:	f04f 0100 	mov.w	r1, #0
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	1894      	adds	r4, r2, r2
 8005a08:	603c      	str	r4, [r7, #0]
 8005a0a:	415b      	adcs	r3, r3
 8005a0c:	607b      	str	r3, [r7, #4]
 8005a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a12:	1812      	adds	r2, r2, r0
 8005a14:	eb41 0303 	adc.w	r3, r1, r3
 8005a18:	f04f 0400 	mov.w	r4, #0
 8005a1c:	f04f 0500 	mov.w	r5, #0
 8005a20:	00dd      	lsls	r5, r3, #3
 8005a22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a26:	00d4      	lsls	r4, r2, #3
 8005a28:	4622      	mov	r2, r4
 8005a2a:	462b      	mov	r3, r5
 8005a2c:	1814      	adds	r4, r2, r0
 8005a2e:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8005a32:	414b      	adcs	r3, r1
 8005a34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f04f 0100 	mov.w	r1, #0
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	008b      	lsls	r3, r1, #2
 8005a4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a52:	0082      	lsls	r2, r0, #2
 8005a54:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005a58:	f7fa fc0a 	bl	8000270 <__aeabi_uldivmod>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <UART_SetConfig+0x7c8>)
 8005a62:	fba3 1302 	umull	r1, r3, r3, r2
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	2164      	movs	r1, #100	; 0x64
 8005a6a:	fb01 f303 	mul.w	r3, r1, r3
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	3332      	adds	r3, #50	; 0x32
 8005a74:	4a08      	ldr	r2, [pc, #32]	; (8005a98 <UART_SetConfig+0x7c8>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	f003 020f 	and.w	r2, r3, #15
 8005a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4432      	add	r2, r6
 8005a88:	609a      	str	r2, [r3, #8]
}
 8005a8a:	e7ff      	b.n	8005a8c <UART_SetConfig+0x7bc>
 8005a8c:	bf00      	nop
 8005a8e:	37f4      	adds	r7, #244	; 0xf4
 8005a90:	46bd      	mov	sp, r7
 8005a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a96:	bf00      	nop
 8005a98:	51eb851f 	.word	0x51eb851f

08005a9c <__assert_func>:
 8005a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a9e:	4614      	mov	r4, r2
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4b09      	ldr	r3, [pc, #36]	; (8005ac8 <__assert_func+0x2c>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4605      	mov	r5, r0
 8005aa8:	68d8      	ldr	r0, [r3, #12]
 8005aaa:	b14c      	cbz	r4, 8005ac0 <__assert_func+0x24>
 8005aac:	4b07      	ldr	r3, [pc, #28]	; (8005acc <__assert_func+0x30>)
 8005aae:	9100      	str	r1, [sp, #0]
 8005ab0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ab4:	4906      	ldr	r1, [pc, #24]	; (8005ad0 <__assert_func+0x34>)
 8005ab6:	462b      	mov	r3, r5
 8005ab8:	f000 f818 	bl	8005aec <fiprintf>
 8005abc:	f000 fce0 	bl	8006480 <abort>
 8005ac0:	4b04      	ldr	r3, [pc, #16]	; (8005ad4 <__assert_func+0x38>)
 8005ac2:	461c      	mov	r4, r3
 8005ac4:	e7f3      	b.n	8005aae <__assert_func+0x12>
 8005ac6:	bf00      	nop
 8005ac8:	2000000c 	.word	0x2000000c
 8005acc:	08007aa4 	.word	0x08007aa4
 8005ad0:	08007ab1 	.word	0x08007ab1
 8005ad4:	08007adf 	.word	0x08007adf

08005ad8 <atoi>:
 8005ad8:	220a      	movs	r2, #10
 8005ada:	2100      	movs	r1, #0
 8005adc:	f000 bc06 	b.w	80062ec <strtol>

08005ae0 <__errno>:
 8005ae0:	4b01      	ldr	r3, [pc, #4]	; (8005ae8 <__errno+0x8>)
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	2000000c 	.word	0x2000000c

08005aec <fiprintf>:
 8005aec:	b40e      	push	{r1, r2, r3}
 8005aee:	b503      	push	{r0, r1, lr}
 8005af0:	4601      	mov	r1, r0
 8005af2:	ab03      	add	r3, sp, #12
 8005af4:	4805      	ldr	r0, [pc, #20]	; (8005b0c <fiprintf+0x20>)
 8005af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005afa:	6800      	ldr	r0, [r0, #0]
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	f000 f879 	bl	8005bf4 <_vfiprintf_r>
 8005b02:	b002      	add	sp, #8
 8005b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b08:	b003      	add	sp, #12
 8005b0a:	4770      	bx	lr
 8005b0c:	2000000c 	.word	0x2000000c

08005b10 <__libc_init_array>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	4d0d      	ldr	r5, [pc, #52]	; (8005b48 <__libc_init_array+0x38>)
 8005b14:	4c0d      	ldr	r4, [pc, #52]	; (8005b4c <__libc_init_array+0x3c>)
 8005b16:	1b64      	subs	r4, r4, r5
 8005b18:	10a4      	asrs	r4, r4, #2
 8005b1a:	2600      	movs	r6, #0
 8005b1c:	42a6      	cmp	r6, r4
 8005b1e:	d109      	bne.n	8005b34 <__libc_init_array+0x24>
 8005b20:	4d0b      	ldr	r5, [pc, #44]	; (8005b50 <__libc_init_array+0x40>)
 8005b22:	4c0c      	ldr	r4, [pc, #48]	; (8005b54 <__libc_init_array+0x44>)
 8005b24:	f001 fa2c 	bl	8006f80 <_init>
 8005b28:	1b64      	subs	r4, r4, r5
 8005b2a:	10a4      	asrs	r4, r4, #2
 8005b2c:	2600      	movs	r6, #0
 8005b2e:	42a6      	cmp	r6, r4
 8005b30:	d105      	bne.n	8005b3e <__libc_init_array+0x2e>
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b38:	4798      	blx	r3
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	e7ee      	b.n	8005b1c <__libc_init_array+0xc>
 8005b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b42:	4798      	blx	r3
 8005b44:	3601      	adds	r6, #1
 8005b46:	e7f2      	b.n	8005b2e <__libc_init_array+0x1e>
 8005b48:	08007c80 	.word	0x08007c80
 8005b4c:	08007c80 	.word	0x08007c80
 8005b50:	08007c80 	.word	0x08007c80
 8005b54:	08007c84 	.word	0x08007c84

08005b58 <memcmp>:
 8005b58:	b530      	push	{r4, r5, lr}
 8005b5a:	3901      	subs	r1, #1
 8005b5c:	2400      	movs	r4, #0
 8005b5e:	42a2      	cmp	r2, r4
 8005b60:	d101      	bne.n	8005b66 <memcmp+0xe>
 8005b62:	2000      	movs	r0, #0
 8005b64:	e005      	b.n	8005b72 <memcmp+0x1a>
 8005b66:	5d03      	ldrb	r3, [r0, r4]
 8005b68:	3401      	adds	r4, #1
 8005b6a:	5d0d      	ldrb	r5, [r1, r4]
 8005b6c:	42ab      	cmp	r3, r5
 8005b6e:	d0f6      	beq.n	8005b5e <memcmp+0x6>
 8005b70:	1b58      	subs	r0, r3, r5
 8005b72:	bd30      	pop	{r4, r5, pc}

08005b74 <memcpy>:
 8005b74:	440a      	add	r2, r1
 8005b76:	4291      	cmp	r1, r2
 8005b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b7c:	d100      	bne.n	8005b80 <memcpy+0xc>
 8005b7e:	4770      	bx	lr
 8005b80:	b510      	push	{r4, lr}
 8005b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b8a:	4291      	cmp	r1, r2
 8005b8c:	d1f9      	bne.n	8005b82 <memcpy+0xe>
 8005b8e:	bd10      	pop	{r4, pc}

08005b90 <memset>:
 8005b90:	4402      	add	r2, r0
 8005b92:	4603      	mov	r3, r0
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d100      	bne.n	8005b9a <memset+0xa>
 8005b98:	4770      	bx	lr
 8005b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b9e:	e7f9      	b.n	8005b94 <memset+0x4>

08005ba0 <__sfputc_r>:
 8005ba0:	6893      	ldr	r3, [r2, #8]
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	b410      	push	{r4}
 8005ba8:	6093      	str	r3, [r2, #8]
 8005baa:	da08      	bge.n	8005bbe <__sfputc_r+0x1e>
 8005bac:	6994      	ldr	r4, [r2, #24]
 8005bae:	42a3      	cmp	r3, r4
 8005bb0:	db01      	blt.n	8005bb6 <__sfputc_r+0x16>
 8005bb2:	290a      	cmp	r1, #10
 8005bb4:	d103      	bne.n	8005bbe <__sfputc_r+0x1e>
 8005bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bba:	f000 bba1 	b.w	8006300 <__swbuf_r>
 8005bbe:	6813      	ldr	r3, [r2, #0]
 8005bc0:	1c58      	adds	r0, r3, #1
 8005bc2:	6010      	str	r0, [r2, #0]
 8005bc4:	7019      	strb	r1, [r3, #0]
 8005bc6:	4608      	mov	r0, r1
 8005bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <__sfputs_r>:
 8005bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd0:	4606      	mov	r6, r0
 8005bd2:	460f      	mov	r7, r1
 8005bd4:	4614      	mov	r4, r2
 8005bd6:	18d5      	adds	r5, r2, r3
 8005bd8:	42ac      	cmp	r4, r5
 8005bda:	d101      	bne.n	8005be0 <__sfputs_r+0x12>
 8005bdc:	2000      	movs	r0, #0
 8005bde:	e007      	b.n	8005bf0 <__sfputs_r+0x22>
 8005be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005be4:	463a      	mov	r2, r7
 8005be6:	4630      	mov	r0, r6
 8005be8:	f7ff ffda 	bl	8005ba0 <__sfputc_r>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d1f3      	bne.n	8005bd8 <__sfputs_r+0xa>
 8005bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bf4 <_vfiprintf_r>:
 8005bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf8:	460d      	mov	r5, r1
 8005bfa:	b09d      	sub	sp, #116	; 0x74
 8005bfc:	4614      	mov	r4, r2
 8005bfe:	4698      	mov	r8, r3
 8005c00:	4606      	mov	r6, r0
 8005c02:	b118      	cbz	r0, 8005c0c <_vfiprintf_r+0x18>
 8005c04:	6983      	ldr	r3, [r0, #24]
 8005c06:	b90b      	cbnz	r3, 8005c0c <_vfiprintf_r+0x18>
 8005c08:	f000 fd5c 	bl	80066c4 <__sinit>
 8005c0c:	4b89      	ldr	r3, [pc, #548]	; (8005e34 <_vfiprintf_r+0x240>)
 8005c0e:	429d      	cmp	r5, r3
 8005c10:	d11b      	bne.n	8005c4a <_vfiprintf_r+0x56>
 8005c12:	6875      	ldr	r5, [r6, #4]
 8005c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c16:	07d9      	lsls	r1, r3, #31
 8005c18:	d405      	bmi.n	8005c26 <_vfiprintf_r+0x32>
 8005c1a:	89ab      	ldrh	r3, [r5, #12]
 8005c1c:	059a      	lsls	r2, r3, #22
 8005c1e:	d402      	bmi.n	8005c26 <_vfiprintf_r+0x32>
 8005c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c22:	f000 fded 	bl	8006800 <__retarget_lock_acquire_recursive>
 8005c26:	89ab      	ldrh	r3, [r5, #12]
 8005c28:	071b      	lsls	r3, r3, #28
 8005c2a:	d501      	bpl.n	8005c30 <_vfiprintf_r+0x3c>
 8005c2c:	692b      	ldr	r3, [r5, #16]
 8005c2e:	b9eb      	cbnz	r3, 8005c6c <_vfiprintf_r+0x78>
 8005c30:	4629      	mov	r1, r5
 8005c32:	4630      	mov	r0, r6
 8005c34:	f000 fbb6 	bl	80063a4 <__swsetup_r>
 8005c38:	b1c0      	cbz	r0, 8005c6c <_vfiprintf_r+0x78>
 8005c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c3c:	07dc      	lsls	r4, r3, #31
 8005c3e:	d50e      	bpl.n	8005c5e <_vfiprintf_r+0x6a>
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295
 8005c44:	b01d      	add	sp, #116	; 0x74
 8005c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c4a:	4b7b      	ldr	r3, [pc, #492]	; (8005e38 <_vfiprintf_r+0x244>)
 8005c4c:	429d      	cmp	r5, r3
 8005c4e:	d101      	bne.n	8005c54 <_vfiprintf_r+0x60>
 8005c50:	68b5      	ldr	r5, [r6, #8]
 8005c52:	e7df      	b.n	8005c14 <_vfiprintf_r+0x20>
 8005c54:	4b79      	ldr	r3, [pc, #484]	; (8005e3c <_vfiprintf_r+0x248>)
 8005c56:	429d      	cmp	r5, r3
 8005c58:	bf08      	it	eq
 8005c5a:	68f5      	ldreq	r5, [r6, #12]
 8005c5c:	e7da      	b.n	8005c14 <_vfiprintf_r+0x20>
 8005c5e:	89ab      	ldrh	r3, [r5, #12]
 8005c60:	0598      	lsls	r0, r3, #22
 8005c62:	d4ed      	bmi.n	8005c40 <_vfiprintf_r+0x4c>
 8005c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c66:	f000 fdcc 	bl	8006802 <__retarget_lock_release_recursive>
 8005c6a:	e7e9      	b.n	8005c40 <_vfiprintf_r+0x4c>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c70:	2320      	movs	r3, #32
 8005c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c76:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c7a:	2330      	movs	r3, #48	; 0x30
 8005c7c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005e40 <_vfiprintf_r+0x24c>
 8005c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c84:	f04f 0901 	mov.w	r9, #1
 8005c88:	4623      	mov	r3, r4
 8005c8a:	469a      	mov	sl, r3
 8005c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c90:	b10a      	cbz	r2, 8005c96 <_vfiprintf_r+0xa2>
 8005c92:	2a25      	cmp	r2, #37	; 0x25
 8005c94:	d1f9      	bne.n	8005c8a <_vfiprintf_r+0x96>
 8005c96:	ebba 0b04 	subs.w	fp, sl, r4
 8005c9a:	d00b      	beq.n	8005cb4 <_vfiprintf_r+0xc0>
 8005c9c:	465b      	mov	r3, fp
 8005c9e:	4622      	mov	r2, r4
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f7ff ff93 	bl	8005bce <__sfputs_r>
 8005ca8:	3001      	adds	r0, #1
 8005caa:	f000 80aa 	beq.w	8005e02 <_vfiprintf_r+0x20e>
 8005cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cb0:	445a      	add	r2, fp
 8005cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8005cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 80a2 	beq.w	8005e02 <_vfiprintf_r+0x20e>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cc8:	f10a 0a01 	add.w	sl, sl, #1
 8005ccc:	9304      	str	r3, [sp, #16]
 8005cce:	9307      	str	r3, [sp, #28]
 8005cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8005cd6:	4654      	mov	r4, sl
 8005cd8:	2205      	movs	r2, #5
 8005cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cde:	4858      	ldr	r0, [pc, #352]	; (8005e40 <_vfiprintf_r+0x24c>)
 8005ce0:	f7fa fa76 	bl	80001d0 <memchr>
 8005ce4:	9a04      	ldr	r2, [sp, #16]
 8005ce6:	b9d8      	cbnz	r0, 8005d20 <_vfiprintf_r+0x12c>
 8005ce8:	06d1      	lsls	r1, r2, #27
 8005cea:	bf44      	itt	mi
 8005cec:	2320      	movmi	r3, #32
 8005cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cf2:	0713      	lsls	r3, r2, #28
 8005cf4:	bf44      	itt	mi
 8005cf6:	232b      	movmi	r3, #43	; 0x2b
 8005cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8005d00:	2b2a      	cmp	r3, #42	; 0x2a
 8005d02:	d015      	beq.n	8005d30 <_vfiprintf_r+0x13c>
 8005d04:	9a07      	ldr	r2, [sp, #28]
 8005d06:	4654      	mov	r4, sl
 8005d08:	2000      	movs	r0, #0
 8005d0a:	f04f 0c0a 	mov.w	ip, #10
 8005d0e:	4621      	mov	r1, r4
 8005d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d14:	3b30      	subs	r3, #48	; 0x30
 8005d16:	2b09      	cmp	r3, #9
 8005d18:	d94e      	bls.n	8005db8 <_vfiprintf_r+0x1c4>
 8005d1a:	b1b0      	cbz	r0, 8005d4a <_vfiprintf_r+0x156>
 8005d1c:	9207      	str	r2, [sp, #28]
 8005d1e:	e014      	b.n	8005d4a <_vfiprintf_r+0x156>
 8005d20:	eba0 0308 	sub.w	r3, r0, r8
 8005d24:	fa09 f303 	lsl.w	r3, r9, r3
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	9304      	str	r3, [sp, #16]
 8005d2c:	46a2      	mov	sl, r4
 8005d2e:	e7d2      	b.n	8005cd6 <_vfiprintf_r+0xe2>
 8005d30:	9b03      	ldr	r3, [sp, #12]
 8005d32:	1d19      	adds	r1, r3, #4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	9103      	str	r1, [sp, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bfbb      	ittet	lt
 8005d3c:	425b      	neglt	r3, r3
 8005d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8005d42:	9307      	strge	r3, [sp, #28]
 8005d44:	9307      	strlt	r3, [sp, #28]
 8005d46:	bfb8      	it	lt
 8005d48:	9204      	strlt	r2, [sp, #16]
 8005d4a:	7823      	ldrb	r3, [r4, #0]
 8005d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8005d4e:	d10c      	bne.n	8005d6a <_vfiprintf_r+0x176>
 8005d50:	7863      	ldrb	r3, [r4, #1]
 8005d52:	2b2a      	cmp	r3, #42	; 0x2a
 8005d54:	d135      	bne.n	8005dc2 <_vfiprintf_r+0x1ce>
 8005d56:	9b03      	ldr	r3, [sp, #12]
 8005d58:	1d1a      	adds	r2, r3, #4
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	9203      	str	r2, [sp, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bfb8      	it	lt
 8005d62:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d66:	3402      	adds	r4, #2
 8005d68:	9305      	str	r3, [sp, #20]
 8005d6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005e50 <_vfiprintf_r+0x25c>
 8005d6e:	7821      	ldrb	r1, [r4, #0]
 8005d70:	2203      	movs	r2, #3
 8005d72:	4650      	mov	r0, sl
 8005d74:	f7fa fa2c 	bl	80001d0 <memchr>
 8005d78:	b140      	cbz	r0, 8005d8c <_vfiprintf_r+0x198>
 8005d7a:	2340      	movs	r3, #64	; 0x40
 8005d7c:	eba0 000a 	sub.w	r0, r0, sl
 8005d80:	fa03 f000 	lsl.w	r0, r3, r0
 8005d84:	9b04      	ldr	r3, [sp, #16]
 8005d86:	4303      	orrs	r3, r0
 8005d88:	3401      	adds	r4, #1
 8005d8a:	9304      	str	r3, [sp, #16]
 8005d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d90:	482c      	ldr	r0, [pc, #176]	; (8005e44 <_vfiprintf_r+0x250>)
 8005d92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d96:	2206      	movs	r2, #6
 8005d98:	f7fa fa1a 	bl	80001d0 <memchr>
 8005d9c:	2800      	cmp	r0, #0
 8005d9e:	d03f      	beq.n	8005e20 <_vfiprintf_r+0x22c>
 8005da0:	4b29      	ldr	r3, [pc, #164]	; (8005e48 <_vfiprintf_r+0x254>)
 8005da2:	bb1b      	cbnz	r3, 8005dec <_vfiprintf_r+0x1f8>
 8005da4:	9b03      	ldr	r3, [sp, #12]
 8005da6:	3307      	adds	r3, #7
 8005da8:	f023 0307 	bic.w	r3, r3, #7
 8005dac:	3308      	adds	r3, #8
 8005dae:	9303      	str	r3, [sp, #12]
 8005db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db2:	443b      	add	r3, r7
 8005db4:	9309      	str	r3, [sp, #36]	; 0x24
 8005db6:	e767      	b.n	8005c88 <_vfiprintf_r+0x94>
 8005db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	2001      	movs	r0, #1
 8005dc0:	e7a5      	b.n	8005d0e <_vfiprintf_r+0x11a>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	3401      	adds	r4, #1
 8005dc6:	9305      	str	r3, [sp, #20]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	f04f 0c0a 	mov.w	ip, #10
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dd4:	3a30      	subs	r2, #48	; 0x30
 8005dd6:	2a09      	cmp	r2, #9
 8005dd8:	d903      	bls.n	8005de2 <_vfiprintf_r+0x1ee>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0c5      	beq.n	8005d6a <_vfiprintf_r+0x176>
 8005dde:	9105      	str	r1, [sp, #20]
 8005de0:	e7c3      	b.n	8005d6a <_vfiprintf_r+0x176>
 8005de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005de6:	4604      	mov	r4, r0
 8005de8:	2301      	movs	r3, #1
 8005dea:	e7f0      	b.n	8005dce <_vfiprintf_r+0x1da>
 8005dec:	ab03      	add	r3, sp, #12
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	462a      	mov	r2, r5
 8005df2:	4b16      	ldr	r3, [pc, #88]	; (8005e4c <_vfiprintf_r+0x258>)
 8005df4:	a904      	add	r1, sp, #16
 8005df6:	4630      	mov	r0, r6
 8005df8:	f3af 8000 	nop.w
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	1c78      	adds	r0, r7, #1
 8005e00:	d1d6      	bne.n	8005db0 <_vfiprintf_r+0x1bc>
 8005e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e04:	07d9      	lsls	r1, r3, #31
 8005e06:	d405      	bmi.n	8005e14 <_vfiprintf_r+0x220>
 8005e08:	89ab      	ldrh	r3, [r5, #12]
 8005e0a:	059a      	lsls	r2, r3, #22
 8005e0c:	d402      	bmi.n	8005e14 <_vfiprintf_r+0x220>
 8005e0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e10:	f000 fcf7 	bl	8006802 <__retarget_lock_release_recursive>
 8005e14:	89ab      	ldrh	r3, [r5, #12]
 8005e16:	065b      	lsls	r3, r3, #25
 8005e18:	f53f af12 	bmi.w	8005c40 <_vfiprintf_r+0x4c>
 8005e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e1e:	e711      	b.n	8005c44 <_vfiprintf_r+0x50>
 8005e20:	ab03      	add	r3, sp, #12
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	462a      	mov	r2, r5
 8005e26:	4b09      	ldr	r3, [pc, #36]	; (8005e4c <_vfiprintf_r+0x258>)
 8005e28:	a904      	add	r1, sp, #16
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	f000 f880 	bl	8005f30 <_printf_i>
 8005e30:	e7e4      	b.n	8005dfc <_vfiprintf_r+0x208>
 8005e32:	bf00      	nop
 8005e34:	08007c38 	.word	0x08007c38
 8005e38:	08007c58 	.word	0x08007c58
 8005e3c:	08007c18 	.word	0x08007c18
 8005e40:	08007ae4 	.word	0x08007ae4
 8005e44:	08007aee 	.word	0x08007aee
 8005e48:	00000000 	.word	0x00000000
 8005e4c:	08005bcf 	.word	0x08005bcf
 8005e50:	08007aea 	.word	0x08007aea

08005e54 <_printf_common>:
 8005e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e58:	4616      	mov	r6, r2
 8005e5a:	4699      	mov	r9, r3
 8005e5c:	688a      	ldr	r2, [r1, #8]
 8005e5e:	690b      	ldr	r3, [r1, #16]
 8005e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e64:	4293      	cmp	r3, r2
 8005e66:	bfb8      	it	lt
 8005e68:	4613      	movlt	r3, r2
 8005e6a:	6033      	str	r3, [r6, #0]
 8005e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e70:	4607      	mov	r7, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	b10a      	cbz	r2, 8005e7a <_printf_common+0x26>
 8005e76:	3301      	adds	r3, #1
 8005e78:	6033      	str	r3, [r6, #0]
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	0699      	lsls	r1, r3, #26
 8005e7e:	bf42      	ittt	mi
 8005e80:	6833      	ldrmi	r3, [r6, #0]
 8005e82:	3302      	addmi	r3, #2
 8005e84:	6033      	strmi	r3, [r6, #0]
 8005e86:	6825      	ldr	r5, [r4, #0]
 8005e88:	f015 0506 	ands.w	r5, r5, #6
 8005e8c:	d106      	bne.n	8005e9c <_printf_common+0x48>
 8005e8e:	f104 0a19 	add.w	sl, r4, #25
 8005e92:	68e3      	ldr	r3, [r4, #12]
 8005e94:	6832      	ldr	r2, [r6, #0]
 8005e96:	1a9b      	subs	r3, r3, r2
 8005e98:	42ab      	cmp	r3, r5
 8005e9a:	dc26      	bgt.n	8005eea <_printf_common+0x96>
 8005e9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ea0:	1e13      	subs	r3, r2, #0
 8005ea2:	6822      	ldr	r2, [r4, #0]
 8005ea4:	bf18      	it	ne
 8005ea6:	2301      	movne	r3, #1
 8005ea8:	0692      	lsls	r2, r2, #26
 8005eaa:	d42b      	bmi.n	8005f04 <_printf_common+0xb0>
 8005eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	47c0      	blx	r8
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	d01e      	beq.n	8005ef8 <_printf_common+0xa4>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	68e5      	ldr	r5, [r4, #12]
 8005ebe:	6832      	ldr	r2, [r6, #0]
 8005ec0:	f003 0306 	and.w	r3, r3, #6
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	bf08      	it	eq
 8005ec8:	1aad      	subeq	r5, r5, r2
 8005eca:	68a3      	ldr	r3, [r4, #8]
 8005ecc:	6922      	ldr	r2, [r4, #16]
 8005ece:	bf0c      	ite	eq
 8005ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ed4:	2500      	movne	r5, #0
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	bfc4      	itt	gt
 8005eda:	1a9b      	subgt	r3, r3, r2
 8005edc:	18ed      	addgt	r5, r5, r3
 8005ede:	2600      	movs	r6, #0
 8005ee0:	341a      	adds	r4, #26
 8005ee2:	42b5      	cmp	r5, r6
 8005ee4:	d11a      	bne.n	8005f1c <_printf_common+0xc8>
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	e008      	b.n	8005efc <_printf_common+0xa8>
 8005eea:	2301      	movs	r3, #1
 8005eec:	4652      	mov	r2, sl
 8005eee:	4649      	mov	r1, r9
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	47c0      	blx	r8
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d103      	bne.n	8005f00 <_printf_common+0xac>
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8005efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f00:	3501      	adds	r5, #1
 8005f02:	e7c6      	b.n	8005e92 <_printf_common+0x3e>
 8005f04:	18e1      	adds	r1, r4, r3
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	2030      	movs	r0, #48	; 0x30
 8005f0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f0e:	4422      	add	r2, r4
 8005f10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f18:	3302      	adds	r3, #2
 8005f1a:	e7c7      	b.n	8005eac <_printf_common+0x58>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	4622      	mov	r2, r4
 8005f20:	4649      	mov	r1, r9
 8005f22:	4638      	mov	r0, r7
 8005f24:	47c0      	blx	r8
 8005f26:	3001      	adds	r0, #1
 8005f28:	d0e6      	beq.n	8005ef8 <_printf_common+0xa4>
 8005f2a:	3601      	adds	r6, #1
 8005f2c:	e7d9      	b.n	8005ee2 <_printf_common+0x8e>
	...

08005f30 <_printf_i>:
 8005f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f34:	460c      	mov	r4, r1
 8005f36:	4691      	mov	r9, r2
 8005f38:	7e27      	ldrb	r7, [r4, #24]
 8005f3a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f3c:	2f78      	cmp	r7, #120	; 0x78
 8005f3e:	4680      	mov	r8, r0
 8005f40:	469a      	mov	sl, r3
 8005f42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f46:	d807      	bhi.n	8005f58 <_printf_i+0x28>
 8005f48:	2f62      	cmp	r7, #98	; 0x62
 8005f4a:	d80a      	bhi.n	8005f62 <_printf_i+0x32>
 8005f4c:	2f00      	cmp	r7, #0
 8005f4e:	f000 80d8 	beq.w	8006102 <_printf_i+0x1d2>
 8005f52:	2f58      	cmp	r7, #88	; 0x58
 8005f54:	f000 80a3 	beq.w	800609e <_printf_i+0x16e>
 8005f58:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f60:	e03a      	b.n	8005fd8 <_printf_i+0xa8>
 8005f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f66:	2b15      	cmp	r3, #21
 8005f68:	d8f6      	bhi.n	8005f58 <_printf_i+0x28>
 8005f6a:	a001      	add	r0, pc, #4	; (adr r0, 8005f70 <_printf_i+0x40>)
 8005f6c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005f70:	08005fc9 	.word	0x08005fc9
 8005f74:	08005fdd 	.word	0x08005fdd
 8005f78:	08005f59 	.word	0x08005f59
 8005f7c:	08005f59 	.word	0x08005f59
 8005f80:	08005f59 	.word	0x08005f59
 8005f84:	08005f59 	.word	0x08005f59
 8005f88:	08005fdd 	.word	0x08005fdd
 8005f8c:	08005f59 	.word	0x08005f59
 8005f90:	08005f59 	.word	0x08005f59
 8005f94:	08005f59 	.word	0x08005f59
 8005f98:	08005f59 	.word	0x08005f59
 8005f9c:	080060e9 	.word	0x080060e9
 8005fa0:	0800600d 	.word	0x0800600d
 8005fa4:	080060cb 	.word	0x080060cb
 8005fa8:	08005f59 	.word	0x08005f59
 8005fac:	08005f59 	.word	0x08005f59
 8005fb0:	0800610b 	.word	0x0800610b
 8005fb4:	08005f59 	.word	0x08005f59
 8005fb8:	0800600d 	.word	0x0800600d
 8005fbc:	08005f59 	.word	0x08005f59
 8005fc0:	08005f59 	.word	0x08005f59
 8005fc4:	080060d3 	.word	0x080060d3
 8005fc8:	680b      	ldr	r3, [r1, #0]
 8005fca:	1d1a      	adds	r2, r3, #4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	600a      	str	r2, [r1, #0]
 8005fd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0a3      	b.n	8006124 <_printf_i+0x1f4>
 8005fdc:	6825      	ldr	r5, [r4, #0]
 8005fde:	6808      	ldr	r0, [r1, #0]
 8005fe0:	062e      	lsls	r6, r5, #24
 8005fe2:	f100 0304 	add.w	r3, r0, #4
 8005fe6:	d50a      	bpl.n	8005ffe <_printf_i+0xce>
 8005fe8:	6805      	ldr	r5, [r0, #0]
 8005fea:	600b      	str	r3, [r1, #0]
 8005fec:	2d00      	cmp	r5, #0
 8005fee:	da03      	bge.n	8005ff8 <_printf_i+0xc8>
 8005ff0:	232d      	movs	r3, #45	; 0x2d
 8005ff2:	426d      	negs	r5, r5
 8005ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ff8:	485e      	ldr	r0, [pc, #376]	; (8006174 <_printf_i+0x244>)
 8005ffa:	230a      	movs	r3, #10
 8005ffc:	e019      	b.n	8006032 <_printf_i+0x102>
 8005ffe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006002:	6805      	ldr	r5, [r0, #0]
 8006004:	600b      	str	r3, [r1, #0]
 8006006:	bf18      	it	ne
 8006008:	b22d      	sxthne	r5, r5
 800600a:	e7ef      	b.n	8005fec <_printf_i+0xbc>
 800600c:	680b      	ldr	r3, [r1, #0]
 800600e:	6825      	ldr	r5, [r4, #0]
 8006010:	1d18      	adds	r0, r3, #4
 8006012:	6008      	str	r0, [r1, #0]
 8006014:	0628      	lsls	r0, r5, #24
 8006016:	d501      	bpl.n	800601c <_printf_i+0xec>
 8006018:	681d      	ldr	r5, [r3, #0]
 800601a:	e002      	b.n	8006022 <_printf_i+0xf2>
 800601c:	0669      	lsls	r1, r5, #25
 800601e:	d5fb      	bpl.n	8006018 <_printf_i+0xe8>
 8006020:	881d      	ldrh	r5, [r3, #0]
 8006022:	4854      	ldr	r0, [pc, #336]	; (8006174 <_printf_i+0x244>)
 8006024:	2f6f      	cmp	r7, #111	; 0x6f
 8006026:	bf0c      	ite	eq
 8006028:	2308      	moveq	r3, #8
 800602a:	230a      	movne	r3, #10
 800602c:	2100      	movs	r1, #0
 800602e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006032:	6866      	ldr	r6, [r4, #4]
 8006034:	60a6      	str	r6, [r4, #8]
 8006036:	2e00      	cmp	r6, #0
 8006038:	bfa2      	ittt	ge
 800603a:	6821      	ldrge	r1, [r4, #0]
 800603c:	f021 0104 	bicge.w	r1, r1, #4
 8006040:	6021      	strge	r1, [r4, #0]
 8006042:	b90d      	cbnz	r5, 8006048 <_printf_i+0x118>
 8006044:	2e00      	cmp	r6, #0
 8006046:	d04d      	beq.n	80060e4 <_printf_i+0x1b4>
 8006048:	4616      	mov	r6, r2
 800604a:	fbb5 f1f3 	udiv	r1, r5, r3
 800604e:	fb03 5711 	mls	r7, r3, r1, r5
 8006052:	5dc7      	ldrb	r7, [r0, r7]
 8006054:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006058:	462f      	mov	r7, r5
 800605a:	42bb      	cmp	r3, r7
 800605c:	460d      	mov	r5, r1
 800605e:	d9f4      	bls.n	800604a <_printf_i+0x11a>
 8006060:	2b08      	cmp	r3, #8
 8006062:	d10b      	bne.n	800607c <_printf_i+0x14c>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	07df      	lsls	r7, r3, #31
 8006068:	d508      	bpl.n	800607c <_printf_i+0x14c>
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	6861      	ldr	r1, [r4, #4]
 800606e:	4299      	cmp	r1, r3
 8006070:	bfde      	ittt	le
 8006072:	2330      	movle	r3, #48	; 0x30
 8006074:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006078:	f106 36ff 	addle.w	r6, r6, #4294967295
 800607c:	1b92      	subs	r2, r2, r6
 800607e:	6122      	str	r2, [r4, #16]
 8006080:	f8cd a000 	str.w	sl, [sp]
 8006084:	464b      	mov	r3, r9
 8006086:	aa03      	add	r2, sp, #12
 8006088:	4621      	mov	r1, r4
 800608a:	4640      	mov	r0, r8
 800608c:	f7ff fee2 	bl	8005e54 <_printf_common>
 8006090:	3001      	adds	r0, #1
 8006092:	d14c      	bne.n	800612e <_printf_i+0x1fe>
 8006094:	f04f 30ff 	mov.w	r0, #4294967295
 8006098:	b004      	add	sp, #16
 800609a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800609e:	4835      	ldr	r0, [pc, #212]	; (8006174 <_printf_i+0x244>)
 80060a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	680e      	ldr	r6, [r1, #0]
 80060a8:	061f      	lsls	r7, r3, #24
 80060aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80060ae:	600e      	str	r6, [r1, #0]
 80060b0:	d514      	bpl.n	80060dc <_printf_i+0x1ac>
 80060b2:	07d9      	lsls	r1, r3, #31
 80060b4:	bf44      	itt	mi
 80060b6:	f043 0320 	orrmi.w	r3, r3, #32
 80060ba:	6023      	strmi	r3, [r4, #0]
 80060bc:	b91d      	cbnz	r5, 80060c6 <_printf_i+0x196>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	f023 0320 	bic.w	r3, r3, #32
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	2310      	movs	r3, #16
 80060c8:	e7b0      	b.n	800602c <_printf_i+0xfc>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	f043 0320 	orr.w	r3, r3, #32
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	2378      	movs	r3, #120	; 0x78
 80060d4:	4828      	ldr	r0, [pc, #160]	; (8006178 <_printf_i+0x248>)
 80060d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060da:	e7e3      	b.n	80060a4 <_printf_i+0x174>
 80060dc:	065e      	lsls	r6, r3, #25
 80060de:	bf48      	it	mi
 80060e0:	b2ad      	uxthmi	r5, r5
 80060e2:	e7e6      	b.n	80060b2 <_printf_i+0x182>
 80060e4:	4616      	mov	r6, r2
 80060e6:	e7bb      	b.n	8006060 <_printf_i+0x130>
 80060e8:	680b      	ldr	r3, [r1, #0]
 80060ea:	6826      	ldr	r6, [r4, #0]
 80060ec:	6960      	ldr	r0, [r4, #20]
 80060ee:	1d1d      	adds	r5, r3, #4
 80060f0:	600d      	str	r5, [r1, #0]
 80060f2:	0635      	lsls	r5, r6, #24
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	d501      	bpl.n	80060fc <_printf_i+0x1cc>
 80060f8:	6018      	str	r0, [r3, #0]
 80060fa:	e002      	b.n	8006102 <_printf_i+0x1d2>
 80060fc:	0671      	lsls	r1, r6, #25
 80060fe:	d5fb      	bpl.n	80060f8 <_printf_i+0x1c8>
 8006100:	8018      	strh	r0, [r3, #0]
 8006102:	2300      	movs	r3, #0
 8006104:	6123      	str	r3, [r4, #16]
 8006106:	4616      	mov	r6, r2
 8006108:	e7ba      	b.n	8006080 <_printf_i+0x150>
 800610a:	680b      	ldr	r3, [r1, #0]
 800610c:	1d1a      	adds	r2, r3, #4
 800610e:	600a      	str	r2, [r1, #0]
 8006110:	681e      	ldr	r6, [r3, #0]
 8006112:	6862      	ldr	r2, [r4, #4]
 8006114:	2100      	movs	r1, #0
 8006116:	4630      	mov	r0, r6
 8006118:	f7fa f85a 	bl	80001d0 <memchr>
 800611c:	b108      	cbz	r0, 8006122 <_printf_i+0x1f2>
 800611e:	1b80      	subs	r0, r0, r6
 8006120:	6060      	str	r0, [r4, #4]
 8006122:	6863      	ldr	r3, [r4, #4]
 8006124:	6123      	str	r3, [r4, #16]
 8006126:	2300      	movs	r3, #0
 8006128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800612c:	e7a8      	b.n	8006080 <_printf_i+0x150>
 800612e:	6923      	ldr	r3, [r4, #16]
 8006130:	4632      	mov	r2, r6
 8006132:	4649      	mov	r1, r9
 8006134:	4640      	mov	r0, r8
 8006136:	47d0      	blx	sl
 8006138:	3001      	adds	r0, #1
 800613a:	d0ab      	beq.n	8006094 <_printf_i+0x164>
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	079b      	lsls	r3, r3, #30
 8006140:	d413      	bmi.n	800616a <_printf_i+0x23a>
 8006142:	68e0      	ldr	r0, [r4, #12]
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	4298      	cmp	r0, r3
 8006148:	bfb8      	it	lt
 800614a:	4618      	movlt	r0, r3
 800614c:	e7a4      	b.n	8006098 <_printf_i+0x168>
 800614e:	2301      	movs	r3, #1
 8006150:	4632      	mov	r2, r6
 8006152:	4649      	mov	r1, r9
 8006154:	4640      	mov	r0, r8
 8006156:	47d0      	blx	sl
 8006158:	3001      	adds	r0, #1
 800615a:	d09b      	beq.n	8006094 <_printf_i+0x164>
 800615c:	3501      	adds	r5, #1
 800615e:	68e3      	ldr	r3, [r4, #12]
 8006160:	9903      	ldr	r1, [sp, #12]
 8006162:	1a5b      	subs	r3, r3, r1
 8006164:	42ab      	cmp	r3, r5
 8006166:	dcf2      	bgt.n	800614e <_printf_i+0x21e>
 8006168:	e7eb      	b.n	8006142 <_printf_i+0x212>
 800616a:	2500      	movs	r5, #0
 800616c:	f104 0619 	add.w	r6, r4, #25
 8006170:	e7f5      	b.n	800615e <_printf_i+0x22e>
 8006172:	bf00      	nop
 8006174:	08007af5 	.word	0x08007af5
 8006178:	08007b06 	.word	0x08007b06

0800617c <sniprintf>:
 800617c:	b40c      	push	{r2, r3}
 800617e:	b530      	push	{r4, r5, lr}
 8006180:	4b17      	ldr	r3, [pc, #92]	; (80061e0 <sniprintf+0x64>)
 8006182:	1e0c      	subs	r4, r1, #0
 8006184:	681d      	ldr	r5, [r3, #0]
 8006186:	b09d      	sub	sp, #116	; 0x74
 8006188:	da08      	bge.n	800619c <sniprintf+0x20>
 800618a:	238b      	movs	r3, #139	; 0x8b
 800618c:	602b      	str	r3, [r5, #0]
 800618e:	f04f 30ff 	mov.w	r0, #4294967295
 8006192:	b01d      	add	sp, #116	; 0x74
 8006194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006198:	b002      	add	sp, #8
 800619a:	4770      	bx	lr
 800619c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80061a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80061a4:	bf14      	ite	ne
 80061a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80061aa:	4623      	moveq	r3, r4
 80061ac:	9304      	str	r3, [sp, #16]
 80061ae:	9307      	str	r3, [sp, #28]
 80061b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061b4:	9002      	str	r0, [sp, #8]
 80061b6:	9006      	str	r0, [sp, #24]
 80061b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80061bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80061be:	ab21      	add	r3, sp, #132	; 0x84
 80061c0:	a902      	add	r1, sp, #8
 80061c2:	4628      	mov	r0, r5
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	f000 fcc7 	bl	8006b58 <_svfiprintf_r>
 80061ca:	1c43      	adds	r3, r0, #1
 80061cc:	bfbc      	itt	lt
 80061ce:	238b      	movlt	r3, #139	; 0x8b
 80061d0:	602b      	strlt	r3, [r5, #0]
 80061d2:	2c00      	cmp	r4, #0
 80061d4:	d0dd      	beq.n	8006192 <sniprintf+0x16>
 80061d6:	9b02      	ldr	r3, [sp, #8]
 80061d8:	2200      	movs	r2, #0
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	e7d9      	b.n	8006192 <sniprintf+0x16>
 80061de:	bf00      	nop
 80061e0:	2000000c 	.word	0x2000000c

080061e4 <_strtol_l.isra.0>:
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ea:	d001      	beq.n	80061f0 <_strtol_l.isra.0+0xc>
 80061ec:	2b24      	cmp	r3, #36	; 0x24
 80061ee:	d906      	bls.n	80061fe <_strtol_l.isra.0+0x1a>
 80061f0:	f7ff fc76 	bl	8005ae0 <__errno>
 80061f4:	2316      	movs	r3, #22
 80061f6:	6003      	str	r3, [r0, #0]
 80061f8:	2000      	movs	r0, #0
 80061fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061fe:	4f3a      	ldr	r7, [pc, #232]	; (80062e8 <_strtol_l.isra.0+0x104>)
 8006200:	468e      	mov	lr, r1
 8006202:	4676      	mov	r6, lr
 8006204:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006208:	5de5      	ldrb	r5, [r4, r7]
 800620a:	f015 0508 	ands.w	r5, r5, #8
 800620e:	d1f8      	bne.n	8006202 <_strtol_l.isra.0+0x1e>
 8006210:	2c2d      	cmp	r4, #45	; 0x2d
 8006212:	d134      	bne.n	800627e <_strtol_l.isra.0+0x9a>
 8006214:	f89e 4000 	ldrb.w	r4, [lr]
 8006218:	f04f 0801 	mov.w	r8, #1
 800621c:	f106 0e02 	add.w	lr, r6, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d05c      	beq.n	80062de <_strtol_l.isra.0+0xfa>
 8006224:	2b10      	cmp	r3, #16
 8006226:	d10c      	bne.n	8006242 <_strtol_l.isra.0+0x5e>
 8006228:	2c30      	cmp	r4, #48	; 0x30
 800622a:	d10a      	bne.n	8006242 <_strtol_l.isra.0+0x5e>
 800622c:	f89e 4000 	ldrb.w	r4, [lr]
 8006230:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006234:	2c58      	cmp	r4, #88	; 0x58
 8006236:	d14d      	bne.n	80062d4 <_strtol_l.isra.0+0xf0>
 8006238:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800623c:	2310      	movs	r3, #16
 800623e:	f10e 0e02 	add.w	lr, lr, #2
 8006242:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006246:	f10c 3cff 	add.w	ip, ip, #4294967295
 800624a:	2600      	movs	r6, #0
 800624c:	fbbc f9f3 	udiv	r9, ip, r3
 8006250:	4635      	mov	r5, r6
 8006252:	fb03 ca19 	mls	sl, r3, r9, ip
 8006256:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800625a:	2f09      	cmp	r7, #9
 800625c:	d818      	bhi.n	8006290 <_strtol_l.isra.0+0xac>
 800625e:	463c      	mov	r4, r7
 8006260:	42a3      	cmp	r3, r4
 8006262:	dd24      	ble.n	80062ae <_strtol_l.isra.0+0xca>
 8006264:	2e00      	cmp	r6, #0
 8006266:	db1f      	blt.n	80062a8 <_strtol_l.isra.0+0xc4>
 8006268:	45a9      	cmp	r9, r5
 800626a:	d31d      	bcc.n	80062a8 <_strtol_l.isra.0+0xc4>
 800626c:	d101      	bne.n	8006272 <_strtol_l.isra.0+0x8e>
 800626e:	45a2      	cmp	sl, r4
 8006270:	db1a      	blt.n	80062a8 <_strtol_l.isra.0+0xc4>
 8006272:	fb05 4503 	mla	r5, r5, r3, r4
 8006276:	2601      	movs	r6, #1
 8006278:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800627c:	e7eb      	b.n	8006256 <_strtol_l.isra.0+0x72>
 800627e:	2c2b      	cmp	r4, #43	; 0x2b
 8006280:	bf08      	it	eq
 8006282:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006286:	46a8      	mov	r8, r5
 8006288:	bf08      	it	eq
 800628a:	f106 0e02 	addeq.w	lr, r6, #2
 800628e:	e7c7      	b.n	8006220 <_strtol_l.isra.0+0x3c>
 8006290:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006294:	2f19      	cmp	r7, #25
 8006296:	d801      	bhi.n	800629c <_strtol_l.isra.0+0xb8>
 8006298:	3c37      	subs	r4, #55	; 0x37
 800629a:	e7e1      	b.n	8006260 <_strtol_l.isra.0+0x7c>
 800629c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80062a0:	2f19      	cmp	r7, #25
 80062a2:	d804      	bhi.n	80062ae <_strtol_l.isra.0+0xca>
 80062a4:	3c57      	subs	r4, #87	; 0x57
 80062a6:	e7db      	b.n	8006260 <_strtol_l.isra.0+0x7c>
 80062a8:	f04f 36ff 	mov.w	r6, #4294967295
 80062ac:	e7e4      	b.n	8006278 <_strtol_l.isra.0+0x94>
 80062ae:	2e00      	cmp	r6, #0
 80062b0:	da05      	bge.n	80062be <_strtol_l.isra.0+0xda>
 80062b2:	2322      	movs	r3, #34	; 0x22
 80062b4:	6003      	str	r3, [r0, #0]
 80062b6:	4665      	mov	r5, ip
 80062b8:	b942      	cbnz	r2, 80062cc <_strtol_l.isra.0+0xe8>
 80062ba:	4628      	mov	r0, r5
 80062bc:	e79d      	b.n	80061fa <_strtol_l.isra.0+0x16>
 80062be:	f1b8 0f00 	cmp.w	r8, #0
 80062c2:	d000      	beq.n	80062c6 <_strtol_l.isra.0+0xe2>
 80062c4:	426d      	negs	r5, r5
 80062c6:	2a00      	cmp	r2, #0
 80062c8:	d0f7      	beq.n	80062ba <_strtol_l.isra.0+0xd6>
 80062ca:	b10e      	cbz	r6, 80062d0 <_strtol_l.isra.0+0xec>
 80062cc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80062d0:	6011      	str	r1, [r2, #0]
 80062d2:	e7f2      	b.n	80062ba <_strtol_l.isra.0+0xd6>
 80062d4:	2430      	movs	r4, #48	; 0x30
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1b3      	bne.n	8006242 <_strtol_l.isra.0+0x5e>
 80062da:	2308      	movs	r3, #8
 80062dc:	e7b1      	b.n	8006242 <_strtol_l.isra.0+0x5e>
 80062de:	2c30      	cmp	r4, #48	; 0x30
 80062e0:	d0a4      	beq.n	800622c <_strtol_l.isra.0+0x48>
 80062e2:	230a      	movs	r3, #10
 80062e4:	e7ad      	b.n	8006242 <_strtol_l.isra.0+0x5e>
 80062e6:	bf00      	nop
 80062e8:	08007b18 	.word	0x08007b18

080062ec <strtol>:
 80062ec:	4613      	mov	r3, r2
 80062ee:	460a      	mov	r2, r1
 80062f0:	4601      	mov	r1, r0
 80062f2:	4802      	ldr	r0, [pc, #8]	; (80062fc <strtol+0x10>)
 80062f4:	6800      	ldr	r0, [r0, #0]
 80062f6:	f7ff bf75 	b.w	80061e4 <_strtol_l.isra.0>
 80062fa:	bf00      	nop
 80062fc:	2000000c 	.word	0x2000000c

08006300 <__swbuf_r>:
 8006300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006302:	460e      	mov	r6, r1
 8006304:	4614      	mov	r4, r2
 8006306:	4605      	mov	r5, r0
 8006308:	b118      	cbz	r0, 8006312 <__swbuf_r+0x12>
 800630a:	6983      	ldr	r3, [r0, #24]
 800630c:	b90b      	cbnz	r3, 8006312 <__swbuf_r+0x12>
 800630e:	f000 f9d9 	bl	80066c4 <__sinit>
 8006312:	4b21      	ldr	r3, [pc, #132]	; (8006398 <__swbuf_r+0x98>)
 8006314:	429c      	cmp	r4, r3
 8006316:	d12b      	bne.n	8006370 <__swbuf_r+0x70>
 8006318:	686c      	ldr	r4, [r5, #4]
 800631a:	69a3      	ldr	r3, [r4, #24]
 800631c:	60a3      	str	r3, [r4, #8]
 800631e:	89a3      	ldrh	r3, [r4, #12]
 8006320:	071a      	lsls	r2, r3, #28
 8006322:	d52f      	bpl.n	8006384 <__swbuf_r+0x84>
 8006324:	6923      	ldr	r3, [r4, #16]
 8006326:	b36b      	cbz	r3, 8006384 <__swbuf_r+0x84>
 8006328:	6923      	ldr	r3, [r4, #16]
 800632a:	6820      	ldr	r0, [r4, #0]
 800632c:	1ac0      	subs	r0, r0, r3
 800632e:	6963      	ldr	r3, [r4, #20]
 8006330:	b2f6      	uxtb	r6, r6
 8006332:	4283      	cmp	r3, r0
 8006334:	4637      	mov	r7, r6
 8006336:	dc04      	bgt.n	8006342 <__swbuf_r+0x42>
 8006338:	4621      	mov	r1, r4
 800633a:	4628      	mov	r0, r5
 800633c:	f000 f92e 	bl	800659c <_fflush_r>
 8006340:	bb30      	cbnz	r0, 8006390 <__swbuf_r+0x90>
 8006342:	68a3      	ldr	r3, [r4, #8]
 8006344:	3b01      	subs	r3, #1
 8006346:	60a3      	str	r3, [r4, #8]
 8006348:	6823      	ldr	r3, [r4, #0]
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	6022      	str	r2, [r4, #0]
 800634e:	701e      	strb	r6, [r3, #0]
 8006350:	6963      	ldr	r3, [r4, #20]
 8006352:	3001      	adds	r0, #1
 8006354:	4283      	cmp	r3, r0
 8006356:	d004      	beq.n	8006362 <__swbuf_r+0x62>
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	07db      	lsls	r3, r3, #31
 800635c:	d506      	bpl.n	800636c <__swbuf_r+0x6c>
 800635e:	2e0a      	cmp	r6, #10
 8006360:	d104      	bne.n	800636c <__swbuf_r+0x6c>
 8006362:	4621      	mov	r1, r4
 8006364:	4628      	mov	r0, r5
 8006366:	f000 f919 	bl	800659c <_fflush_r>
 800636a:	b988      	cbnz	r0, 8006390 <__swbuf_r+0x90>
 800636c:	4638      	mov	r0, r7
 800636e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006370:	4b0a      	ldr	r3, [pc, #40]	; (800639c <__swbuf_r+0x9c>)
 8006372:	429c      	cmp	r4, r3
 8006374:	d101      	bne.n	800637a <__swbuf_r+0x7a>
 8006376:	68ac      	ldr	r4, [r5, #8]
 8006378:	e7cf      	b.n	800631a <__swbuf_r+0x1a>
 800637a:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <__swbuf_r+0xa0>)
 800637c:	429c      	cmp	r4, r3
 800637e:	bf08      	it	eq
 8006380:	68ec      	ldreq	r4, [r5, #12]
 8006382:	e7ca      	b.n	800631a <__swbuf_r+0x1a>
 8006384:	4621      	mov	r1, r4
 8006386:	4628      	mov	r0, r5
 8006388:	f000 f80c 	bl	80063a4 <__swsetup_r>
 800638c:	2800      	cmp	r0, #0
 800638e:	d0cb      	beq.n	8006328 <__swbuf_r+0x28>
 8006390:	f04f 37ff 	mov.w	r7, #4294967295
 8006394:	e7ea      	b.n	800636c <__swbuf_r+0x6c>
 8006396:	bf00      	nop
 8006398:	08007c38 	.word	0x08007c38
 800639c:	08007c58 	.word	0x08007c58
 80063a0:	08007c18 	.word	0x08007c18

080063a4 <__swsetup_r>:
 80063a4:	4b32      	ldr	r3, [pc, #200]	; (8006470 <__swsetup_r+0xcc>)
 80063a6:	b570      	push	{r4, r5, r6, lr}
 80063a8:	681d      	ldr	r5, [r3, #0]
 80063aa:	4606      	mov	r6, r0
 80063ac:	460c      	mov	r4, r1
 80063ae:	b125      	cbz	r5, 80063ba <__swsetup_r+0x16>
 80063b0:	69ab      	ldr	r3, [r5, #24]
 80063b2:	b913      	cbnz	r3, 80063ba <__swsetup_r+0x16>
 80063b4:	4628      	mov	r0, r5
 80063b6:	f000 f985 	bl	80066c4 <__sinit>
 80063ba:	4b2e      	ldr	r3, [pc, #184]	; (8006474 <__swsetup_r+0xd0>)
 80063bc:	429c      	cmp	r4, r3
 80063be:	d10f      	bne.n	80063e0 <__swsetup_r+0x3c>
 80063c0:	686c      	ldr	r4, [r5, #4]
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063c8:	0719      	lsls	r1, r3, #28
 80063ca:	d42c      	bmi.n	8006426 <__swsetup_r+0x82>
 80063cc:	06dd      	lsls	r5, r3, #27
 80063ce:	d411      	bmi.n	80063f4 <__swsetup_r+0x50>
 80063d0:	2309      	movs	r3, #9
 80063d2:	6033      	str	r3, [r6, #0]
 80063d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063d8:	81a3      	strh	r3, [r4, #12]
 80063da:	f04f 30ff 	mov.w	r0, #4294967295
 80063de:	e03e      	b.n	800645e <__swsetup_r+0xba>
 80063e0:	4b25      	ldr	r3, [pc, #148]	; (8006478 <__swsetup_r+0xd4>)
 80063e2:	429c      	cmp	r4, r3
 80063e4:	d101      	bne.n	80063ea <__swsetup_r+0x46>
 80063e6:	68ac      	ldr	r4, [r5, #8]
 80063e8:	e7eb      	b.n	80063c2 <__swsetup_r+0x1e>
 80063ea:	4b24      	ldr	r3, [pc, #144]	; (800647c <__swsetup_r+0xd8>)
 80063ec:	429c      	cmp	r4, r3
 80063ee:	bf08      	it	eq
 80063f0:	68ec      	ldreq	r4, [r5, #12]
 80063f2:	e7e6      	b.n	80063c2 <__swsetup_r+0x1e>
 80063f4:	0758      	lsls	r0, r3, #29
 80063f6:	d512      	bpl.n	800641e <__swsetup_r+0x7a>
 80063f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063fa:	b141      	cbz	r1, 800640e <__swsetup_r+0x6a>
 80063fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006400:	4299      	cmp	r1, r3
 8006402:	d002      	beq.n	800640a <__swsetup_r+0x66>
 8006404:	4630      	mov	r0, r6
 8006406:	f000 fa7b 	bl	8006900 <_free_r>
 800640a:	2300      	movs	r3, #0
 800640c:	6363      	str	r3, [r4, #52]	; 0x34
 800640e:	89a3      	ldrh	r3, [r4, #12]
 8006410:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006414:	81a3      	strh	r3, [r4, #12]
 8006416:	2300      	movs	r3, #0
 8006418:	6063      	str	r3, [r4, #4]
 800641a:	6923      	ldr	r3, [r4, #16]
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	f043 0308 	orr.w	r3, r3, #8
 8006424:	81a3      	strh	r3, [r4, #12]
 8006426:	6923      	ldr	r3, [r4, #16]
 8006428:	b94b      	cbnz	r3, 800643e <__swsetup_r+0x9a>
 800642a:	89a3      	ldrh	r3, [r4, #12]
 800642c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006434:	d003      	beq.n	800643e <__swsetup_r+0x9a>
 8006436:	4621      	mov	r1, r4
 8006438:	4630      	mov	r0, r6
 800643a:	f000 fa07 	bl	800684c <__smakebuf_r>
 800643e:	89a0      	ldrh	r0, [r4, #12]
 8006440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006444:	f010 0301 	ands.w	r3, r0, #1
 8006448:	d00a      	beq.n	8006460 <__swsetup_r+0xbc>
 800644a:	2300      	movs	r3, #0
 800644c:	60a3      	str	r3, [r4, #8]
 800644e:	6963      	ldr	r3, [r4, #20]
 8006450:	425b      	negs	r3, r3
 8006452:	61a3      	str	r3, [r4, #24]
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	b943      	cbnz	r3, 800646a <__swsetup_r+0xc6>
 8006458:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800645c:	d1ba      	bne.n	80063d4 <__swsetup_r+0x30>
 800645e:	bd70      	pop	{r4, r5, r6, pc}
 8006460:	0781      	lsls	r1, r0, #30
 8006462:	bf58      	it	pl
 8006464:	6963      	ldrpl	r3, [r4, #20]
 8006466:	60a3      	str	r3, [r4, #8]
 8006468:	e7f4      	b.n	8006454 <__swsetup_r+0xb0>
 800646a:	2000      	movs	r0, #0
 800646c:	e7f7      	b.n	800645e <__swsetup_r+0xba>
 800646e:	bf00      	nop
 8006470:	2000000c 	.word	0x2000000c
 8006474:	08007c38 	.word	0x08007c38
 8006478:	08007c58 	.word	0x08007c58
 800647c:	08007c18 	.word	0x08007c18

08006480 <abort>:
 8006480:	b508      	push	{r3, lr}
 8006482:	2006      	movs	r0, #6
 8006484:	f000 fca0 	bl	8006dc8 <raise>
 8006488:	2001      	movs	r0, #1
 800648a:	f7fb ff49 	bl	8002320 <_exit>
	...

08006490 <__sflush_r>:
 8006490:	898a      	ldrh	r2, [r1, #12]
 8006492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006496:	4605      	mov	r5, r0
 8006498:	0710      	lsls	r0, r2, #28
 800649a:	460c      	mov	r4, r1
 800649c:	d458      	bmi.n	8006550 <__sflush_r+0xc0>
 800649e:	684b      	ldr	r3, [r1, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	dc05      	bgt.n	80064b0 <__sflush_r+0x20>
 80064a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	dc02      	bgt.n	80064b0 <__sflush_r+0x20>
 80064aa:	2000      	movs	r0, #0
 80064ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064b2:	2e00      	cmp	r6, #0
 80064b4:	d0f9      	beq.n	80064aa <__sflush_r+0x1a>
 80064b6:	2300      	movs	r3, #0
 80064b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064bc:	682f      	ldr	r7, [r5, #0]
 80064be:	602b      	str	r3, [r5, #0]
 80064c0:	d032      	beq.n	8006528 <__sflush_r+0x98>
 80064c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064c4:	89a3      	ldrh	r3, [r4, #12]
 80064c6:	075a      	lsls	r2, r3, #29
 80064c8:	d505      	bpl.n	80064d6 <__sflush_r+0x46>
 80064ca:	6863      	ldr	r3, [r4, #4]
 80064cc:	1ac0      	subs	r0, r0, r3
 80064ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064d0:	b10b      	cbz	r3, 80064d6 <__sflush_r+0x46>
 80064d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064d4:	1ac0      	subs	r0, r0, r3
 80064d6:	2300      	movs	r3, #0
 80064d8:	4602      	mov	r2, r0
 80064da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064dc:	6a21      	ldr	r1, [r4, #32]
 80064de:	4628      	mov	r0, r5
 80064e0:	47b0      	blx	r6
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	d106      	bne.n	80064f6 <__sflush_r+0x66>
 80064e8:	6829      	ldr	r1, [r5, #0]
 80064ea:	291d      	cmp	r1, #29
 80064ec:	d82c      	bhi.n	8006548 <__sflush_r+0xb8>
 80064ee:	4a2a      	ldr	r2, [pc, #168]	; (8006598 <__sflush_r+0x108>)
 80064f0:	40ca      	lsrs	r2, r1
 80064f2:	07d6      	lsls	r6, r2, #31
 80064f4:	d528      	bpl.n	8006548 <__sflush_r+0xb8>
 80064f6:	2200      	movs	r2, #0
 80064f8:	6062      	str	r2, [r4, #4]
 80064fa:	04d9      	lsls	r1, r3, #19
 80064fc:	6922      	ldr	r2, [r4, #16]
 80064fe:	6022      	str	r2, [r4, #0]
 8006500:	d504      	bpl.n	800650c <__sflush_r+0x7c>
 8006502:	1c42      	adds	r2, r0, #1
 8006504:	d101      	bne.n	800650a <__sflush_r+0x7a>
 8006506:	682b      	ldr	r3, [r5, #0]
 8006508:	b903      	cbnz	r3, 800650c <__sflush_r+0x7c>
 800650a:	6560      	str	r0, [r4, #84]	; 0x54
 800650c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800650e:	602f      	str	r7, [r5, #0]
 8006510:	2900      	cmp	r1, #0
 8006512:	d0ca      	beq.n	80064aa <__sflush_r+0x1a>
 8006514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006518:	4299      	cmp	r1, r3
 800651a:	d002      	beq.n	8006522 <__sflush_r+0x92>
 800651c:	4628      	mov	r0, r5
 800651e:	f000 f9ef 	bl	8006900 <_free_r>
 8006522:	2000      	movs	r0, #0
 8006524:	6360      	str	r0, [r4, #52]	; 0x34
 8006526:	e7c1      	b.n	80064ac <__sflush_r+0x1c>
 8006528:	6a21      	ldr	r1, [r4, #32]
 800652a:	2301      	movs	r3, #1
 800652c:	4628      	mov	r0, r5
 800652e:	47b0      	blx	r6
 8006530:	1c41      	adds	r1, r0, #1
 8006532:	d1c7      	bne.n	80064c4 <__sflush_r+0x34>
 8006534:	682b      	ldr	r3, [r5, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0c4      	beq.n	80064c4 <__sflush_r+0x34>
 800653a:	2b1d      	cmp	r3, #29
 800653c:	d001      	beq.n	8006542 <__sflush_r+0xb2>
 800653e:	2b16      	cmp	r3, #22
 8006540:	d101      	bne.n	8006546 <__sflush_r+0xb6>
 8006542:	602f      	str	r7, [r5, #0]
 8006544:	e7b1      	b.n	80064aa <__sflush_r+0x1a>
 8006546:	89a3      	ldrh	r3, [r4, #12]
 8006548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800654c:	81a3      	strh	r3, [r4, #12]
 800654e:	e7ad      	b.n	80064ac <__sflush_r+0x1c>
 8006550:	690f      	ldr	r7, [r1, #16]
 8006552:	2f00      	cmp	r7, #0
 8006554:	d0a9      	beq.n	80064aa <__sflush_r+0x1a>
 8006556:	0793      	lsls	r3, r2, #30
 8006558:	680e      	ldr	r6, [r1, #0]
 800655a:	bf08      	it	eq
 800655c:	694b      	ldreq	r3, [r1, #20]
 800655e:	600f      	str	r7, [r1, #0]
 8006560:	bf18      	it	ne
 8006562:	2300      	movne	r3, #0
 8006564:	eba6 0807 	sub.w	r8, r6, r7
 8006568:	608b      	str	r3, [r1, #8]
 800656a:	f1b8 0f00 	cmp.w	r8, #0
 800656e:	dd9c      	ble.n	80064aa <__sflush_r+0x1a>
 8006570:	6a21      	ldr	r1, [r4, #32]
 8006572:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006574:	4643      	mov	r3, r8
 8006576:	463a      	mov	r2, r7
 8006578:	4628      	mov	r0, r5
 800657a:	47b0      	blx	r6
 800657c:	2800      	cmp	r0, #0
 800657e:	dc06      	bgt.n	800658e <__sflush_r+0xfe>
 8006580:	89a3      	ldrh	r3, [r4, #12]
 8006582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006586:	81a3      	strh	r3, [r4, #12]
 8006588:	f04f 30ff 	mov.w	r0, #4294967295
 800658c:	e78e      	b.n	80064ac <__sflush_r+0x1c>
 800658e:	4407      	add	r7, r0
 8006590:	eba8 0800 	sub.w	r8, r8, r0
 8006594:	e7e9      	b.n	800656a <__sflush_r+0xda>
 8006596:	bf00      	nop
 8006598:	20400001 	.word	0x20400001

0800659c <_fflush_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	690b      	ldr	r3, [r1, #16]
 80065a0:	4605      	mov	r5, r0
 80065a2:	460c      	mov	r4, r1
 80065a4:	b913      	cbnz	r3, 80065ac <_fflush_r+0x10>
 80065a6:	2500      	movs	r5, #0
 80065a8:	4628      	mov	r0, r5
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	b118      	cbz	r0, 80065b6 <_fflush_r+0x1a>
 80065ae:	6983      	ldr	r3, [r0, #24]
 80065b0:	b90b      	cbnz	r3, 80065b6 <_fflush_r+0x1a>
 80065b2:	f000 f887 	bl	80066c4 <__sinit>
 80065b6:	4b14      	ldr	r3, [pc, #80]	; (8006608 <_fflush_r+0x6c>)
 80065b8:	429c      	cmp	r4, r3
 80065ba:	d11b      	bne.n	80065f4 <_fflush_r+0x58>
 80065bc:	686c      	ldr	r4, [r5, #4]
 80065be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0ef      	beq.n	80065a6 <_fflush_r+0xa>
 80065c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065c8:	07d0      	lsls	r0, r2, #31
 80065ca:	d404      	bmi.n	80065d6 <_fflush_r+0x3a>
 80065cc:	0599      	lsls	r1, r3, #22
 80065ce:	d402      	bmi.n	80065d6 <_fflush_r+0x3a>
 80065d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065d2:	f000 f915 	bl	8006800 <__retarget_lock_acquire_recursive>
 80065d6:	4628      	mov	r0, r5
 80065d8:	4621      	mov	r1, r4
 80065da:	f7ff ff59 	bl	8006490 <__sflush_r>
 80065de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065e0:	07da      	lsls	r2, r3, #31
 80065e2:	4605      	mov	r5, r0
 80065e4:	d4e0      	bmi.n	80065a8 <_fflush_r+0xc>
 80065e6:	89a3      	ldrh	r3, [r4, #12]
 80065e8:	059b      	lsls	r3, r3, #22
 80065ea:	d4dd      	bmi.n	80065a8 <_fflush_r+0xc>
 80065ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ee:	f000 f908 	bl	8006802 <__retarget_lock_release_recursive>
 80065f2:	e7d9      	b.n	80065a8 <_fflush_r+0xc>
 80065f4:	4b05      	ldr	r3, [pc, #20]	; (800660c <_fflush_r+0x70>)
 80065f6:	429c      	cmp	r4, r3
 80065f8:	d101      	bne.n	80065fe <_fflush_r+0x62>
 80065fa:	68ac      	ldr	r4, [r5, #8]
 80065fc:	e7df      	b.n	80065be <_fflush_r+0x22>
 80065fe:	4b04      	ldr	r3, [pc, #16]	; (8006610 <_fflush_r+0x74>)
 8006600:	429c      	cmp	r4, r3
 8006602:	bf08      	it	eq
 8006604:	68ec      	ldreq	r4, [r5, #12]
 8006606:	e7da      	b.n	80065be <_fflush_r+0x22>
 8006608:	08007c38 	.word	0x08007c38
 800660c:	08007c58 	.word	0x08007c58
 8006610:	08007c18 	.word	0x08007c18

08006614 <std>:
 8006614:	2300      	movs	r3, #0
 8006616:	b510      	push	{r4, lr}
 8006618:	4604      	mov	r4, r0
 800661a:	e9c0 3300 	strd	r3, r3, [r0]
 800661e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006622:	6083      	str	r3, [r0, #8]
 8006624:	8181      	strh	r1, [r0, #12]
 8006626:	6643      	str	r3, [r0, #100]	; 0x64
 8006628:	81c2      	strh	r2, [r0, #14]
 800662a:	6183      	str	r3, [r0, #24]
 800662c:	4619      	mov	r1, r3
 800662e:	2208      	movs	r2, #8
 8006630:	305c      	adds	r0, #92	; 0x5c
 8006632:	f7ff faad 	bl	8005b90 <memset>
 8006636:	4b05      	ldr	r3, [pc, #20]	; (800664c <std+0x38>)
 8006638:	6263      	str	r3, [r4, #36]	; 0x24
 800663a:	4b05      	ldr	r3, [pc, #20]	; (8006650 <std+0x3c>)
 800663c:	62a3      	str	r3, [r4, #40]	; 0x28
 800663e:	4b05      	ldr	r3, [pc, #20]	; (8006654 <std+0x40>)
 8006640:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006642:	4b05      	ldr	r3, [pc, #20]	; (8006658 <std+0x44>)
 8006644:	6224      	str	r4, [r4, #32]
 8006646:	6323      	str	r3, [r4, #48]	; 0x30
 8006648:	bd10      	pop	{r4, pc}
 800664a:	bf00      	nop
 800664c:	08006e01 	.word	0x08006e01
 8006650:	08006e23 	.word	0x08006e23
 8006654:	08006e5b 	.word	0x08006e5b
 8006658:	08006e7f 	.word	0x08006e7f

0800665c <_cleanup_r>:
 800665c:	4901      	ldr	r1, [pc, #4]	; (8006664 <_cleanup_r+0x8>)
 800665e:	f000 b8af 	b.w	80067c0 <_fwalk_reent>
 8006662:	bf00      	nop
 8006664:	0800659d 	.word	0x0800659d

08006668 <__sfmoreglue>:
 8006668:	b570      	push	{r4, r5, r6, lr}
 800666a:	1e4a      	subs	r2, r1, #1
 800666c:	2568      	movs	r5, #104	; 0x68
 800666e:	4355      	muls	r5, r2
 8006670:	460e      	mov	r6, r1
 8006672:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006676:	f000 f993 	bl	80069a0 <_malloc_r>
 800667a:	4604      	mov	r4, r0
 800667c:	b140      	cbz	r0, 8006690 <__sfmoreglue+0x28>
 800667e:	2100      	movs	r1, #0
 8006680:	e9c0 1600 	strd	r1, r6, [r0]
 8006684:	300c      	adds	r0, #12
 8006686:	60a0      	str	r0, [r4, #8]
 8006688:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800668c:	f7ff fa80 	bl	8005b90 <memset>
 8006690:	4620      	mov	r0, r4
 8006692:	bd70      	pop	{r4, r5, r6, pc}

08006694 <__sfp_lock_acquire>:
 8006694:	4801      	ldr	r0, [pc, #4]	; (800669c <__sfp_lock_acquire+0x8>)
 8006696:	f000 b8b3 	b.w	8006800 <__retarget_lock_acquire_recursive>
 800669a:	bf00      	nop
 800669c:	200016bc 	.word	0x200016bc

080066a0 <__sfp_lock_release>:
 80066a0:	4801      	ldr	r0, [pc, #4]	; (80066a8 <__sfp_lock_release+0x8>)
 80066a2:	f000 b8ae 	b.w	8006802 <__retarget_lock_release_recursive>
 80066a6:	bf00      	nop
 80066a8:	200016bc 	.word	0x200016bc

080066ac <__sinit_lock_acquire>:
 80066ac:	4801      	ldr	r0, [pc, #4]	; (80066b4 <__sinit_lock_acquire+0x8>)
 80066ae:	f000 b8a7 	b.w	8006800 <__retarget_lock_acquire_recursive>
 80066b2:	bf00      	nop
 80066b4:	200016b7 	.word	0x200016b7

080066b8 <__sinit_lock_release>:
 80066b8:	4801      	ldr	r0, [pc, #4]	; (80066c0 <__sinit_lock_release+0x8>)
 80066ba:	f000 b8a2 	b.w	8006802 <__retarget_lock_release_recursive>
 80066be:	bf00      	nop
 80066c0:	200016b7 	.word	0x200016b7

080066c4 <__sinit>:
 80066c4:	b510      	push	{r4, lr}
 80066c6:	4604      	mov	r4, r0
 80066c8:	f7ff fff0 	bl	80066ac <__sinit_lock_acquire>
 80066cc:	69a3      	ldr	r3, [r4, #24]
 80066ce:	b11b      	cbz	r3, 80066d8 <__sinit+0x14>
 80066d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d4:	f7ff bff0 	b.w	80066b8 <__sinit_lock_release>
 80066d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066dc:	6523      	str	r3, [r4, #80]	; 0x50
 80066de:	4b13      	ldr	r3, [pc, #76]	; (800672c <__sinit+0x68>)
 80066e0:	4a13      	ldr	r2, [pc, #76]	; (8006730 <__sinit+0x6c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80066e6:	42a3      	cmp	r3, r4
 80066e8:	bf04      	itt	eq
 80066ea:	2301      	moveq	r3, #1
 80066ec:	61a3      	streq	r3, [r4, #24]
 80066ee:	4620      	mov	r0, r4
 80066f0:	f000 f820 	bl	8006734 <__sfp>
 80066f4:	6060      	str	r0, [r4, #4]
 80066f6:	4620      	mov	r0, r4
 80066f8:	f000 f81c 	bl	8006734 <__sfp>
 80066fc:	60a0      	str	r0, [r4, #8]
 80066fe:	4620      	mov	r0, r4
 8006700:	f000 f818 	bl	8006734 <__sfp>
 8006704:	2200      	movs	r2, #0
 8006706:	60e0      	str	r0, [r4, #12]
 8006708:	2104      	movs	r1, #4
 800670a:	6860      	ldr	r0, [r4, #4]
 800670c:	f7ff ff82 	bl	8006614 <std>
 8006710:	68a0      	ldr	r0, [r4, #8]
 8006712:	2201      	movs	r2, #1
 8006714:	2109      	movs	r1, #9
 8006716:	f7ff ff7d 	bl	8006614 <std>
 800671a:	68e0      	ldr	r0, [r4, #12]
 800671c:	2202      	movs	r2, #2
 800671e:	2112      	movs	r1, #18
 8006720:	f7ff ff78 	bl	8006614 <std>
 8006724:	2301      	movs	r3, #1
 8006726:	61a3      	str	r3, [r4, #24]
 8006728:	e7d2      	b.n	80066d0 <__sinit+0xc>
 800672a:	bf00      	nop
 800672c:	08007ae0 	.word	0x08007ae0
 8006730:	0800665d 	.word	0x0800665d

08006734 <__sfp>:
 8006734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006736:	4607      	mov	r7, r0
 8006738:	f7ff ffac 	bl	8006694 <__sfp_lock_acquire>
 800673c:	4b1e      	ldr	r3, [pc, #120]	; (80067b8 <__sfp+0x84>)
 800673e:	681e      	ldr	r6, [r3, #0]
 8006740:	69b3      	ldr	r3, [r6, #24]
 8006742:	b913      	cbnz	r3, 800674a <__sfp+0x16>
 8006744:	4630      	mov	r0, r6
 8006746:	f7ff ffbd 	bl	80066c4 <__sinit>
 800674a:	3648      	adds	r6, #72	; 0x48
 800674c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006750:	3b01      	subs	r3, #1
 8006752:	d503      	bpl.n	800675c <__sfp+0x28>
 8006754:	6833      	ldr	r3, [r6, #0]
 8006756:	b30b      	cbz	r3, 800679c <__sfp+0x68>
 8006758:	6836      	ldr	r6, [r6, #0]
 800675a:	e7f7      	b.n	800674c <__sfp+0x18>
 800675c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006760:	b9d5      	cbnz	r5, 8006798 <__sfp+0x64>
 8006762:	4b16      	ldr	r3, [pc, #88]	; (80067bc <__sfp+0x88>)
 8006764:	60e3      	str	r3, [r4, #12]
 8006766:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800676a:	6665      	str	r5, [r4, #100]	; 0x64
 800676c:	f000 f847 	bl	80067fe <__retarget_lock_init_recursive>
 8006770:	f7ff ff96 	bl	80066a0 <__sfp_lock_release>
 8006774:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006778:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800677c:	6025      	str	r5, [r4, #0]
 800677e:	61a5      	str	r5, [r4, #24]
 8006780:	2208      	movs	r2, #8
 8006782:	4629      	mov	r1, r5
 8006784:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006788:	f7ff fa02 	bl	8005b90 <memset>
 800678c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006790:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006794:	4620      	mov	r0, r4
 8006796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006798:	3468      	adds	r4, #104	; 0x68
 800679a:	e7d9      	b.n	8006750 <__sfp+0x1c>
 800679c:	2104      	movs	r1, #4
 800679e:	4638      	mov	r0, r7
 80067a0:	f7ff ff62 	bl	8006668 <__sfmoreglue>
 80067a4:	4604      	mov	r4, r0
 80067a6:	6030      	str	r0, [r6, #0]
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d1d5      	bne.n	8006758 <__sfp+0x24>
 80067ac:	f7ff ff78 	bl	80066a0 <__sfp_lock_release>
 80067b0:	230c      	movs	r3, #12
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	e7ee      	b.n	8006794 <__sfp+0x60>
 80067b6:	bf00      	nop
 80067b8:	08007ae0 	.word	0x08007ae0
 80067bc:	ffff0001 	.word	0xffff0001

080067c0 <_fwalk_reent>:
 80067c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067c4:	4606      	mov	r6, r0
 80067c6:	4688      	mov	r8, r1
 80067c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067cc:	2700      	movs	r7, #0
 80067ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067d2:	f1b9 0901 	subs.w	r9, r9, #1
 80067d6:	d505      	bpl.n	80067e4 <_fwalk_reent+0x24>
 80067d8:	6824      	ldr	r4, [r4, #0]
 80067da:	2c00      	cmp	r4, #0
 80067dc:	d1f7      	bne.n	80067ce <_fwalk_reent+0xe>
 80067de:	4638      	mov	r0, r7
 80067e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067e4:	89ab      	ldrh	r3, [r5, #12]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d907      	bls.n	80067fa <_fwalk_reent+0x3a>
 80067ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067ee:	3301      	adds	r3, #1
 80067f0:	d003      	beq.n	80067fa <_fwalk_reent+0x3a>
 80067f2:	4629      	mov	r1, r5
 80067f4:	4630      	mov	r0, r6
 80067f6:	47c0      	blx	r8
 80067f8:	4307      	orrs	r7, r0
 80067fa:	3568      	adds	r5, #104	; 0x68
 80067fc:	e7e9      	b.n	80067d2 <_fwalk_reent+0x12>

080067fe <__retarget_lock_init_recursive>:
 80067fe:	4770      	bx	lr

08006800 <__retarget_lock_acquire_recursive>:
 8006800:	4770      	bx	lr

08006802 <__retarget_lock_release_recursive>:
 8006802:	4770      	bx	lr

08006804 <__swhatbuf_r>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	460e      	mov	r6, r1
 8006808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680c:	2900      	cmp	r1, #0
 800680e:	b096      	sub	sp, #88	; 0x58
 8006810:	4614      	mov	r4, r2
 8006812:	461d      	mov	r5, r3
 8006814:	da07      	bge.n	8006826 <__swhatbuf_r+0x22>
 8006816:	2300      	movs	r3, #0
 8006818:	602b      	str	r3, [r5, #0]
 800681a:	89b3      	ldrh	r3, [r6, #12]
 800681c:	061a      	lsls	r2, r3, #24
 800681e:	d410      	bmi.n	8006842 <__swhatbuf_r+0x3e>
 8006820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006824:	e00e      	b.n	8006844 <__swhatbuf_r+0x40>
 8006826:	466a      	mov	r2, sp
 8006828:	f000 fb50 	bl	8006ecc <_fstat_r>
 800682c:	2800      	cmp	r0, #0
 800682e:	dbf2      	blt.n	8006816 <__swhatbuf_r+0x12>
 8006830:	9a01      	ldr	r2, [sp, #4]
 8006832:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006836:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800683a:	425a      	negs	r2, r3
 800683c:	415a      	adcs	r2, r3
 800683e:	602a      	str	r2, [r5, #0]
 8006840:	e7ee      	b.n	8006820 <__swhatbuf_r+0x1c>
 8006842:	2340      	movs	r3, #64	; 0x40
 8006844:	2000      	movs	r0, #0
 8006846:	6023      	str	r3, [r4, #0]
 8006848:	b016      	add	sp, #88	; 0x58
 800684a:	bd70      	pop	{r4, r5, r6, pc}

0800684c <__smakebuf_r>:
 800684c:	898b      	ldrh	r3, [r1, #12]
 800684e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006850:	079d      	lsls	r5, r3, #30
 8006852:	4606      	mov	r6, r0
 8006854:	460c      	mov	r4, r1
 8006856:	d507      	bpl.n	8006868 <__smakebuf_r+0x1c>
 8006858:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	6123      	str	r3, [r4, #16]
 8006860:	2301      	movs	r3, #1
 8006862:	6163      	str	r3, [r4, #20]
 8006864:	b002      	add	sp, #8
 8006866:	bd70      	pop	{r4, r5, r6, pc}
 8006868:	ab01      	add	r3, sp, #4
 800686a:	466a      	mov	r2, sp
 800686c:	f7ff ffca 	bl	8006804 <__swhatbuf_r>
 8006870:	9900      	ldr	r1, [sp, #0]
 8006872:	4605      	mov	r5, r0
 8006874:	4630      	mov	r0, r6
 8006876:	f000 f893 	bl	80069a0 <_malloc_r>
 800687a:	b948      	cbnz	r0, 8006890 <__smakebuf_r+0x44>
 800687c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006880:	059a      	lsls	r2, r3, #22
 8006882:	d4ef      	bmi.n	8006864 <__smakebuf_r+0x18>
 8006884:	f023 0303 	bic.w	r3, r3, #3
 8006888:	f043 0302 	orr.w	r3, r3, #2
 800688c:	81a3      	strh	r3, [r4, #12]
 800688e:	e7e3      	b.n	8006858 <__smakebuf_r+0xc>
 8006890:	4b0d      	ldr	r3, [pc, #52]	; (80068c8 <__smakebuf_r+0x7c>)
 8006892:	62b3      	str	r3, [r6, #40]	; 0x28
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	6020      	str	r0, [r4, #0]
 8006898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689c:	81a3      	strh	r3, [r4, #12]
 800689e:	9b00      	ldr	r3, [sp, #0]
 80068a0:	6163      	str	r3, [r4, #20]
 80068a2:	9b01      	ldr	r3, [sp, #4]
 80068a4:	6120      	str	r0, [r4, #16]
 80068a6:	b15b      	cbz	r3, 80068c0 <__smakebuf_r+0x74>
 80068a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068ac:	4630      	mov	r0, r6
 80068ae:	f000 fb1f 	bl	8006ef0 <_isatty_r>
 80068b2:	b128      	cbz	r0, 80068c0 <__smakebuf_r+0x74>
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	81a3      	strh	r3, [r4, #12]
 80068c0:	89a0      	ldrh	r0, [r4, #12]
 80068c2:	4305      	orrs	r5, r0
 80068c4:	81a5      	strh	r5, [r4, #12]
 80068c6:	e7cd      	b.n	8006864 <__smakebuf_r+0x18>
 80068c8:	0800665d 	.word	0x0800665d

080068cc <memmove>:
 80068cc:	4288      	cmp	r0, r1
 80068ce:	b510      	push	{r4, lr}
 80068d0:	eb01 0402 	add.w	r4, r1, r2
 80068d4:	d902      	bls.n	80068dc <memmove+0x10>
 80068d6:	4284      	cmp	r4, r0
 80068d8:	4623      	mov	r3, r4
 80068da:	d807      	bhi.n	80068ec <memmove+0x20>
 80068dc:	1e43      	subs	r3, r0, #1
 80068de:	42a1      	cmp	r1, r4
 80068e0:	d008      	beq.n	80068f4 <memmove+0x28>
 80068e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068ea:	e7f8      	b.n	80068de <memmove+0x12>
 80068ec:	4402      	add	r2, r0
 80068ee:	4601      	mov	r1, r0
 80068f0:	428a      	cmp	r2, r1
 80068f2:	d100      	bne.n	80068f6 <memmove+0x2a>
 80068f4:	bd10      	pop	{r4, pc}
 80068f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068fe:	e7f7      	b.n	80068f0 <memmove+0x24>

08006900 <_free_r>:
 8006900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006902:	2900      	cmp	r1, #0
 8006904:	d048      	beq.n	8006998 <_free_r+0x98>
 8006906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800690a:	9001      	str	r0, [sp, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f1a1 0404 	sub.w	r4, r1, #4
 8006912:	bfb8      	it	lt
 8006914:	18e4      	addlt	r4, r4, r3
 8006916:	f000 fb0d 	bl	8006f34 <__malloc_lock>
 800691a:	4a20      	ldr	r2, [pc, #128]	; (800699c <_free_r+0x9c>)
 800691c:	9801      	ldr	r0, [sp, #4]
 800691e:	6813      	ldr	r3, [r2, #0]
 8006920:	4615      	mov	r5, r2
 8006922:	b933      	cbnz	r3, 8006932 <_free_r+0x32>
 8006924:	6063      	str	r3, [r4, #4]
 8006926:	6014      	str	r4, [r2, #0]
 8006928:	b003      	add	sp, #12
 800692a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800692e:	f000 bb07 	b.w	8006f40 <__malloc_unlock>
 8006932:	42a3      	cmp	r3, r4
 8006934:	d90b      	bls.n	800694e <_free_r+0x4e>
 8006936:	6821      	ldr	r1, [r4, #0]
 8006938:	1862      	adds	r2, r4, r1
 800693a:	4293      	cmp	r3, r2
 800693c:	bf04      	itt	eq
 800693e:	681a      	ldreq	r2, [r3, #0]
 8006940:	685b      	ldreq	r3, [r3, #4]
 8006942:	6063      	str	r3, [r4, #4]
 8006944:	bf04      	itt	eq
 8006946:	1852      	addeq	r2, r2, r1
 8006948:	6022      	streq	r2, [r4, #0]
 800694a:	602c      	str	r4, [r5, #0]
 800694c:	e7ec      	b.n	8006928 <_free_r+0x28>
 800694e:	461a      	mov	r2, r3
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	b10b      	cbz	r3, 8006958 <_free_r+0x58>
 8006954:	42a3      	cmp	r3, r4
 8006956:	d9fa      	bls.n	800694e <_free_r+0x4e>
 8006958:	6811      	ldr	r1, [r2, #0]
 800695a:	1855      	adds	r5, r2, r1
 800695c:	42a5      	cmp	r5, r4
 800695e:	d10b      	bne.n	8006978 <_free_r+0x78>
 8006960:	6824      	ldr	r4, [r4, #0]
 8006962:	4421      	add	r1, r4
 8006964:	1854      	adds	r4, r2, r1
 8006966:	42a3      	cmp	r3, r4
 8006968:	6011      	str	r1, [r2, #0]
 800696a:	d1dd      	bne.n	8006928 <_free_r+0x28>
 800696c:	681c      	ldr	r4, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	6053      	str	r3, [r2, #4]
 8006972:	4421      	add	r1, r4
 8006974:	6011      	str	r1, [r2, #0]
 8006976:	e7d7      	b.n	8006928 <_free_r+0x28>
 8006978:	d902      	bls.n	8006980 <_free_r+0x80>
 800697a:	230c      	movs	r3, #12
 800697c:	6003      	str	r3, [r0, #0]
 800697e:	e7d3      	b.n	8006928 <_free_r+0x28>
 8006980:	6825      	ldr	r5, [r4, #0]
 8006982:	1961      	adds	r1, r4, r5
 8006984:	428b      	cmp	r3, r1
 8006986:	bf04      	itt	eq
 8006988:	6819      	ldreq	r1, [r3, #0]
 800698a:	685b      	ldreq	r3, [r3, #4]
 800698c:	6063      	str	r3, [r4, #4]
 800698e:	bf04      	itt	eq
 8006990:	1949      	addeq	r1, r1, r5
 8006992:	6021      	streq	r1, [r4, #0]
 8006994:	6054      	str	r4, [r2, #4]
 8006996:	e7c7      	b.n	8006928 <_free_r+0x28>
 8006998:	b003      	add	sp, #12
 800699a:	bd30      	pop	{r4, r5, pc}
 800699c:	200014a4 	.word	0x200014a4

080069a0 <_malloc_r>:
 80069a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a2:	1ccd      	adds	r5, r1, #3
 80069a4:	f025 0503 	bic.w	r5, r5, #3
 80069a8:	3508      	adds	r5, #8
 80069aa:	2d0c      	cmp	r5, #12
 80069ac:	bf38      	it	cc
 80069ae:	250c      	movcc	r5, #12
 80069b0:	2d00      	cmp	r5, #0
 80069b2:	4606      	mov	r6, r0
 80069b4:	db01      	blt.n	80069ba <_malloc_r+0x1a>
 80069b6:	42a9      	cmp	r1, r5
 80069b8:	d903      	bls.n	80069c2 <_malloc_r+0x22>
 80069ba:	230c      	movs	r3, #12
 80069bc:	6033      	str	r3, [r6, #0]
 80069be:	2000      	movs	r0, #0
 80069c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c2:	f000 fab7 	bl	8006f34 <__malloc_lock>
 80069c6:	4921      	ldr	r1, [pc, #132]	; (8006a4c <_malloc_r+0xac>)
 80069c8:	680a      	ldr	r2, [r1, #0]
 80069ca:	4614      	mov	r4, r2
 80069cc:	b99c      	cbnz	r4, 80069f6 <_malloc_r+0x56>
 80069ce:	4f20      	ldr	r7, [pc, #128]	; (8006a50 <_malloc_r+0xb0>)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	b923      	cbnz	r3, 80069de <_malloc_r+0x3e>
 80069d4:	4621      	mov	r1, r4
 80069d6:	4630      	mov	r0, r6
 80069d8:	f000 f9be 	bl	8006d58 <_sbrk_r>
 80069dc:	6038      	str	r0, [r7, #0]
 80069de:	4629      	mov	r1, r5
 80069e0:	4630      	mov	r0, r6
 80069e2:	f000 f9b9 	bl	8006d58 <_sbrk_r>
 80069e6:	1c43      	adds	r3, r0, #1
 80069e8:	d123      	bne.n	8006a32 <_malloc_r+0x92>
 80069ea:	230c      	movs	r3, #12
 80069ec:	6033      	str	r3, [r6, #0]
 80069ee:	4630      	mov	r0, r6
 80069f0:	f000 faa6 	bl	8006f40 <__malloc_unlock>
 80069f4:	e7e3      	b.n	80069be <_malloc_r+0x1e>
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	1b5b      	subs	r3, r3, r5
 80069fa:	d417      	bmi.n	8006a2c <_malloc_r+0x8c>
 80069fc:	2b0b      	cmp	r3, #11
 80069fe:	d903      	bls.n	8006a08 <_malloc_r+0x68>
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	441c      	add	r4, r3
 8006a04:	6025      	str	r5, [r4, #0]
 8006a06:	e004      	b.n	8006a12 <_malloc_r+0x72>
 8006a08:	6863      	ldr	r3, [r4, #4]
 8006a0a:	42a2      	cmp	r2, r4
 8006a0c:	bf0c      	ite	eq
 8006a0e:	600b      	streq	r3, [r1, #0]
 8006a10:	6053      	strne	r3, [r2, #4]
 8006a12:	4630      	mov	r0, r6
 8006a14:	f000 fa94 	bl	8006f40 <__malloc_unlock>
 8006a18:	f104 000b 	add.w	r0, r4, #11
 8006a1c:	1d23      	adds	r3, r4, #4
 8006a1e:	f020 0007 	bic.w	r0, r0, #7
 8006a22:	1ac2      	subs	r2, r0, r3
 8006a24:	d0cc      	beq.n	80069c0 <_malloc_r+0x20>
 8006a26:	1a1b      	subs	r3, r3, r0
 8006a28:	50a3      	str	r3, [r4, r2]
 8006a2a:	e7c9      	b.n	80069c0 <_malloc_r+0x20>
 8006a2c:	4622      	mov	r2, r4
 8006a2e:	6864      	ldr	r4, [r4, #4]
 8006a30:	e7cc      	b.n	80069cc <_malloc_r+0x2c>
 8006a32:	1cc4      	adds	r4, r0, #3
 8006a34:	f024 0403 	bic.w	r4, r4, #3
 8006a38:	42a0      	cmp	r0, r4
 8006a3a:	d0e3      	beq.n	8006a04 <_malloc_r+0x64>
 8006a3c:	1a21      	subs	r1, r4, r0
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f000 f98a 	bl	8006d58 <_sbrk_r>
 8006a44:	3001      	adds	r0, #1
 8006a46:	d1dd      	bne.n	8006a04 <_malloc_r+0x64>
 8006a48:	e7cf      	b.n	80069ea <_malloc_r+0x4a>
 8006a4a:	bf00      	nop
 8006a4c:	200014a4 	.word	0x200014a4
 8006a50:	200014a8 	.word	0x200014a8

08006a54 <_realloc_r>:
 8006a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a56:	4607      	mov	r7, r0
 8006a58:	4614      	mov	r4, r2
 8006a5a:	460e      	mov	r6, r1
 8006a5c:	b921      	cbnz	r1, 8006a68 <_realloc_r+0x14>
 8006a5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006a62:	4611      	mov	r1, r2
 8006a64:	f7ff bf9c 	b.w	80069a0 <_malloc_r>
 8006a68:	b922      	cbnz	r2, 8006a74 <_realloc_r+0x20>
 8006a6a:	f7ff ff49 	bl	8006900 <_free_r>
 8006a6e:	4625      	mov	r5, r4
 8006a70:	4628      	mov	r0, r5
 8006a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a74:	f000 fa6a 	bl	8006f4c <_malloc_usable_size_r>
 8006a78:	42a0      	cmp	r0, r4
 8006a7a:	d20f      	bcs.n	8006a9c <_realloc_r+0x48>
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	4638      	mov	r0, r7
 8006a80:	f7ff ff8e 	bl	80069a0 <_malloc_r>
 8006a84:	4605      	mov	r5, r0
 8006a86:	2800      	cmp	r0, #0
 8006a88:	d0f2      	beq.n	8006a70 <_realloc_r+0x1c>
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	f7ff f871 	bl	8005b74 <memcpy>
 8006a92:	4631      	mov	r1, r6
 8006a94:	4638      	mov	r0, r7
 8006a96:	f7ff ff33 	bl	8006900 <_free_r>
 8006a9a:	e7e9      	b.n	8006a70 <_realloc_r+0x1c>
 8006a9c:	4635      	mov	r5, r6
 8006a9e:	e7e7      	b.n	8006a70 <_realloc_r+0x1c>

08006aa0 <__ssputs_r>:
 8006aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa4:	688e      	ldr	r6, [r1, #8]
 8006aa6:	429e      	cmp	r6, r3
 8006aa8:	4682      	mov	sl, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	4690      	mov	r8, r2
 8006aae:	461f      	mov	r7, r3
 8006ab0:	d838      	bhi.n	8006b24 <__ssputs_r+0x84>
 8006ab2:	898a      	ldrh	r2, [r1, #12]
 8006ab4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ab8:	d032      	beq.n	8006b20 <__ssputs_r+0x80>
 8006aba:	6825      	ldr	r5, [r4, #0]
 8006abc:	6909      	ldr	r1, [r1, #16]
 8006abe:	eba5 0901 	sub.w	r9, r5, r1
 8006ac2:	6965      	ldr	r5, [r4, #20]
 8006ac4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ac8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006acc:	3301      	adds	r3, #1
 8006ace:	444b      	add	r3, r9
 8006ad0:	106d      	asrs	r5, r5, #1
 8006ad2:	429d      	cmp	r5, r3
 8006ad4:	bf38      	it	cc
 8006ad6:	461d      	movcc	r5, r3
 8006ad8:	0553      	lsls	r3, r2, #21
 8006ada:	d531      	bpl.n	8006b40 <__ssputs_r+0xa0>
 8006adc:	4629      	mov	r1, r5
 8006ade:	f7ff ff5f 	bl	80069a0 <_malloc_r>
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	b950      	cbnz	r0, 8006afc <__ssputs_r+0x5c>
 8006ae6:	230c      	movs	r3, #12
 8006ae8:	f8ca 3000 	str.w	r3, [sl]
 8006aec:	89a3      	ldrh	r3, [r4, #12]
 8006aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afc:	6921      	ldr	r1, [r4, #16]
 8006afe:	464a      	mov	r2, r9
 8006b00:	f7ff f838 	bl	8005b74 <memcpy>
 8006b04:	89a3      	ldrh	r3, [r4, #12]
 8006b06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b0e:	81a3      	strh	r3, [r4, #12]
 8006b10:	6126      	str	r6, [r4, #16]
 8006b12:	6165      	str	r5, [r4, #20]
 8006b14:	444e      	add	r6, r9
 8006b16:	eba5 0509 	sub.w	r5, r5, r9
 8006b1a:	6026      	str	r6, [r4, #0]
 8006b1c:	60a5      	str	r5, [r4, #8]
 8006b1e:	463e      	mov	r6, r7
 8006b20:	42be      	cmp	r6, r7
 8006b22:	d900      	bls.n	8006b26 <__ssputs_r+0x86>
 8006b24:	463e      	mov	r6, r7
 8006b26:	4632      	mov	r2, r6
 8006b28:	6820      	ldr	r0, [r4, #0]
 8006b2a:	4641      	mov	r1, r8
 8006b2c:	f7ff fece 	bl	80068cc <memmove>
 8006b30:	68a3      	ldr	r3, [r4, #8]
 8006b32:	6822      	ldr	r2, [r4, #0]
 8006b34:	1b9b      	subs	r3, r3, r6
 8006b36:	4432      	add	r2, r6
 8006b38:	60a3      	str	r3, [r4, #8]
 8006b3a:	6022      	str	r2, [r4, #0]
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	e7db      	b.n	8006af8 <__ssputs_r+0x58>
 8006b40:	462a      	mov	r2, r5
 8006b42:	f7ff ff87 	bl	8006a54 <_realloc_r>
 8006b46:	4606      	mov	r6, r0
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d1e1      	bne.n	8006b10 <__ssputs_r+0x70>
 8006b4c:	6921      	ldr	r1, [r4, #16]
 8006b4e:	4650      	mov	r0, sl
 8006b50:	f7ff fed6 	bl	8006900 <_free_r>
 8006b54:	e7c7      	b.n	8006ae6 <__ssputs_r+0x46>
	...

08006b58 <_svfiprintf_r>:
 8006b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	4698      	mov	r8, r3
 8006b5e:	898b      	ldrh	r3, [r1, #12]
 8006b60:	061b      	lsls	r3, r3, #24
 8006b62:	b09d      	sub	sp, #116	; 0x74
 8006b64:	4607      	mov	r7, r0
 8006b66:	460d      	mov	r5, r1
 8006b68:	4614      	mov	r4, r2
 8006b6a:	d50e      	bpl.n	8006b8a <_svfiprintf_r+0x32>
 8006b6c:	690b      	ldr	r3, [r1, #16]
 8006b6e:	b963      	cbnz	r3, 8006b8a <_svfiprintf_r+0x32>
 8006b70:	2140      	movs	r1, #64	; 0x40
 8006b72:	f7ff ff15 	bl	80069a0 <_malloc_r>
 8006b76:	6028      	str	r0, [r5, #0]
 8006b78:	6128      	str	r0, [r5, #16]
 8006b7a:	b920      	cbnz	r0, 8006b86 <_svfiprintf_r+0x2e>
 8006b7c:	230c      	movs	r3, #12
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	f04f 30ff 	mov.w	r0, #4294967295
 8006b84:	e0d1      	b.n	8006d2a <_svfiprintf_r+0x1d2>
 8006b86:	2340      	movs	r3, #64	; 0x40
 8006b88:	616b      	str	r3, [r5, #20]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8e:	2320      	movs	r3, #32
 8006b90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b94:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b98:	2330      	movs	r3, #48	; 0x30
 8006b9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006d44 <_svfiprintf_r+0x1ec>
 8006b9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ba2:	f04f 0901 	mov.w	r9, #1
 8006ba6:	4623      	mov	r3, r4
 8006ba8:	469a      	mov	sl, r3
 8006baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bae:	b10a      	cbz	r2, 8006bb4 <_svfiprintf_r+0x5c>
 8006bb0:	2a25      	cmp	r2, #37	; 0x25
 8006bb2:	d1f9      	bne.n	8006ba8 <_svfiprintf_r+0x50>
 8006bb4:	ebba 0b04 	subs.w	fp, sl, r4
 8006bb8:	d00b      	beq.n	8006bd2 <_svfiprintf_r+0x7a>
 8006bba:	465b      	mov	r3, fp
 8006bbc:	4622      	mov	r2, r4
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f7ff ff6d 	bl	8006aa0 <__ssputs_r>
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	f000 80aa 	beq.w	8006d20 <_svfiprintf_r+0x1c8>
 8006bcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bce:	445a      	add	r2, fp
 8006bd0:	9209      	str	r2, [sp, #36]	; 0x24
 8006bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 80a2 	beq.w	8006d20 <_svfiprintf_r+0x1c8>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f04f 32ff 	mov.w	r2, #4294967295
 8006be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006be6:	f10a 0a01 	add.w	sl, sl, #1
 8006bea:	9304      	str	r3, [sp, #16]
 8006bec:	9307      	str	r3, [sp, #28]
 8006bee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bf2:	931a      	str	r3, [sp, #104]	; 0x68
 8006bf4:	4654      	mov	r4, sl
 8006bf6:	2205      	movs	r2, #5
 8006bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bfc:	4851      	ldr	r0, [pc, #324]	; (8006d44 <_svfiprintf_r+0x1ec>)
 8006bfe:	f7f9 fae7 	bl	80001d0 <memchr>
 8006c02:	9a04      	ldr	r2, [sp, #16]
 8006c04:	b9d8      	cbnz	r0, 8006c3e <_svfiprintf_r+0xe6>
 8006c06:	06d0      	lsls	r0, r2, #27
 8006c08:	bf44      	itt	mi
 8006c0a:	2320      	movmi	r3, #32
 8006c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c10:	0711      	lsls	r1, r2, #28
 8006c12:	bf44      	itt	mi
 8006c14:	232b      	movmi	r3, #43	; 0x2b
 8006c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8006c20:	d015      	beq.n	8006c4e <_svfiprintf_r+0xf6>
 8006c22:	9a07      	ldr	r2, [sp, #28]
 8006c24:	4654      	mov	r4, sl
 8006c26:	2000      	movs	r0, #0
 8006c28:	f04f 0c0a 	mov.w	ip, #10
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c32:	3b30      	subs	r3, #48	; 0x30
 8006c34:	2b09      	cmp	r3, #9
 8006c36:	d94e      	bls.n	8006cd6 <_svfiprintf_r+0x17e>
 8006c38:	b1b0      	cbz	r0, 8006c68 <_svfiprintf_r+0x110>
 8006c3a:	9207      	str	r2, [sp, #28]
 8006c3c:	e014      	b.n	8006c68 <_svfiprintf_r+0x110>
 8006c3e:	eba0 0308 	sub.w	r3, r0, r8
 8006c42:	fa09 f303 	lsl.w	r3, r9, r3
 8006c46:	4313      	orrs	r3, r2
 8006c48:	9304      	str	r3, [sp, #16]
 8006c4a:	46a2      	mov	sl, r4
 8006c4c:	e7d2      	b.n	8006bf4 <_svfiprintf_r+0x9c>
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	1d19      	adds	r1, r3, #4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	9103      	str	r1, [sp, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bfbb      	ittet	lt
 8006c5a:	425b      	neglt	r3, r3
 8006c5c:	f042 0202 	orrlt.w	r2, r2, #2
 8006c60:	9307      	strge	r3, [sp, #28]
 8006c62:	9307      	strlt	r3, [sp, #28]
 8006c64:	bfb8      	it	lt
 8006c66:	9204      	strlt	r2, [sp, #16]
 8006c68:	7823      	ldrb	r3, [r4, #0]
 8006c6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006c6c:	d10c      	bne.n	8006c88 <_svfiprintf_r+0x130>
 8006c6e:	7863      	ldrb	r3, [r4, #1]
 8006c70:	2b2a      	cmp	r3, #42	; 0x2a
 8006c72:	d135      	bne.n	8006ce0 <_svfiprintf_r+0x188>
 8006c74:	9b03      	ldr	r3, [sp, #12]
 8006c76:	1d1a      	adds	r2, r3, #4
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	9203      	str	r2, [sp, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bfb8      	it	lt
 8006c80:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c84:	3402      	adds	r4, #2
 8006c86:	9305      	str	r3, [sp, #20]
 8006c88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d54 <_svfiprintf_r+0x1fc>
 8006c8c:	7821      	ldrb	r1, [r4, #0]
 8006c8e:	2203      	movs	r2, #3
 8006c90:	4650      	mov	r0, sl
 8006c92:	f7f9 fa9d 	bl	80001d0 <memchr>
 8006c96:	b140      	cbz	r0, 8006caa <_svfiprintf_r+0x152>
 8006c98:	2340      	movs	r3, #64	; 0x40
 8006c9a:	eba0 000a 	sub.w	r0, r0, sl
 8006c9e:	fa03 f000 	lsl.w	r0, r3, r0
 8006ca2:	9b04      	ldr	r3, [sp, #16]
 8006ca4:	4303      	orrs	r3, r0
 8006ca6:	3401      	adds	r4, #1
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cae:	4826      	ldr	r0, [pc, #152]	; (8006d48 <_svfiprintf_r+0x1f0>)
 8006cb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cb4:	2206      	movs	r2, #6
 8006cb6:	f7f9 fa8b 	bl	80001d0 <memchr>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d038      	beq.n	8006d30 <_svfiprintf_r+0x1d8>
 8006cbe:	4b23      	ldr	r3, [pc, #140]	; (8006d4c <_svfiprintf_r+0x1f4>)
 8006cc0:	bb1b      	cbnz	r3, 8006d0a <_svfiprintf_r+0x1b2>
 8006cc2:	9b03      	ldr	r3, [sp, #12]
 8006cc4:	3307      	adds	r3, #7
 8006cc6:	f023 0307 	bic.w	r3, r3, #7
 8006cca:	3308      	adds	r3, #8
 8006ccc:	9303      	str	r3, [sp, #12]
 8006cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd0:	4433      	add	r3, r6
 8006cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cd4:	e767      	b.n	8006ba6 <_svfiprintf_r+0x4e>
 8006cd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cda:	460c      	mov	r4, r1
 8006cdc:	2001      	movs	r0, #1
 8006cde:	e7a5      	b.n	8006c2c <_svfiprintf_r+0xd4>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	3401      	adds	r4, #1
 8006ce4:	9305      	str	r3, [sp, #20]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	f04f 0c0a 	mov.w	ip, #10
 8006cec:	4620      	mov	r0, r4
 8006cee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cf2:	3a30      	subs	r2, #48	; 0x30
 8006cf4:	2a09      	cmp	r2, #9
 8006cf6:	d903      	bls.n	8006d00 <_svfiprintf_r+0x1a8>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d0c5      	beq.n	8006c88 <_svfiprintf_r+0x130>
 8006cfc:	9105      	str	r1, [sp, #20]
 8006cfe:	e7c3      	b.n	8006c88 <_svfiprintf_r+0x130>
 8006d00:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d04:	4604      	mov	r4, r0
 8006d06:	2301      	movs	r3, #1
 8006d08:	e7f0      	b.n	8006cec <_svfiprintf_r+0x194>
 8006d0a:	ab03      	add	r3, sp, #12
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	462a      	mov	r2, r5
 8006d10:	4b0f      	ldr	r3, [pc, #60]	; (8006d50 <_svfiprintf_r+0x1f8>)
 8006d12:	a904      	add	r1, sp, #16
 8006d14:	4638      	mov	r0, r7
 8006d16:	f3af 8000 	nop.w
 8006d1a:	1c42      	adds	r2, r0, #1
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	d1d6      	bne.n	8006cce <_svfiprintf_r+0x176>
 8006d20:	89ab      	ldrh	r3, [r5, #12]
 8006d22:	065b      	lsls	r3, r3, #25
 8006d24:	f53f af2c 	bmi.w	8006b80 <_svfiprintf_r+0x28>
 8006d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d2a:	b01d      	add	sp, #116	; 0x74
 8006d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d30:	ab03      	add	r3, sp, #12
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	462a      	mov	r2, r5
 8006d36:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <_svfiprintf_r+0x1f8>)
 8006d38:	a904      	add	r1, sp, #16
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	f7ff f8f8 	bl	8005f30 <_printf_i>
 8006d40:	e7eb      	b.n	8006d1a <_svfiprintf_r+0x1c2>
 8006d42:	bf00      	nop
 8006d44:	08007ae4 	.word	0x08007ae4
 8006d48:	08007aee 	.word	0x08007aee
 8006d4c:	00000000 	.word	0x00000000
 8006d50:	08006aa1 	.word	0x08006aa1
 8006d54:	08007aea 	.word	0x08007aea

08006d58 <_sbrk_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4d06      	ldr	r5, [pc, #24]	; (8006d74 <_sbrk_r+0x1c>)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	602b      	str	r3, [r5, #0]
 8006d64:	f7fb fb54 	bl	8002410 <_sbrk>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_sbrk_r+0x1a>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_sbrk_r+0x1a>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	200016c0 	.word	0x200016c0

08006d78 <_raise_r>:
 8006d78:	291f      	cmp	r1, #31
 8006d7a:	b538      	push	{r3, r4, r5, lr}
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	460d      	mov	r5, r1
 8006d80:	d904      	bls.n	8006d8c <_raise_r+0x14>
 8006d82:	2316      	movs	r3, #22
 8006d84:	6003      	str	r3, [r0, #0]
 8006d86:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006d8e:	b112      	cbz	r2, 8006d96 <_raise_r+0x1e>
 8006d90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d94:	b94b      	cbnz	r3, 8006daa <_raise_r+0x32>
 8006d96:	4620      	mov	r0, r4
 8006d98:	f000 f830 	bl	8006dfc <_getpid_r>
 8006d9c:	462a      	mov	r2, r5
 8006d9e:	4601      	mov	r1, r0
 8006da0:	4620      	mov	r0, r4
 8006da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006da6:	f000 b817 	b.w	8006dd8 <_kill_r>
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d00a      	beq.n	8006dc4 <_raise_r+0x4c>
 8006dae:	1c59      	adds	r1, r3, #1
 8006db0:	d103      	bne.n	8006dba <_raise_r+0x42>
 8006db2:	2316      	movs	r3, #22
 8006db4:	6003      	str	r3, [r0, #0]
 8006db6:	2001      	movs	r0, #1
 8006db8:	e7e7      	b.n	8006d8a <_raise_r+0x12>
 8006dba:	2400      	movs	r4, #0
 8006dbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	4798      	blx	r3
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	e7e0      	b.n	8006d8a <_raise_r+0x12>

08006dc8 <raise>:
 8006dc8:	4b02      	ldr	r3, [pc, #8]	; (8006dd4 <raise+0xc>)
 8006dca:	4601      	mov	r1, r0
 8006dcc:	6818      	ldr	r0, [r3, #0]
 8006dce:	f7ff bfd3 	b.w	8006d78 <_raise_r>
 8006dd2:	bf00      	nop
 8006dd4:	2000000c 	.word	0x2000000c

08006dd8 <_kill_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4d07      	ldr	r5, [pc, #28]	; (8006df8 <_kill_r+0x20>)
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4604      	mov	r4, r0
 8006de0:	4608      	mov	r0, r1
 8006de2:	4611      	mov	r1, r2
 8006de4:	602b      	str	r3, [r5, #0]
 8006de6:	f7fb fa8b 	bl	8002300 <_kill>
 8006dea:	1c43      	adds	r3, r0, #1
 8006dec:	d102      	bne.n	8006df4 <_kill_r+0x1c>
 8006dee:	682b      	ldr	r3, [r5, #0]
 8006df0:	b103      	cbz	r3, 8006df4 <_kill_r+0x1c>
 8006df2:	6023      	str	r3, [r4, #0]
 8006df4:	bd38      	pop	{r3, r4, r5, pc}
 8006df6:	bf00      	nop
 8006df8:	200016c0 	.word	0x200016c0

08006dfc <_getpid_r>:
 8006dfc:	f7fb ba78 	b.w	80022f0 <_getpid>

08006e00 <__sread>:
 8006e00:	b510      	push	{r4, lr}
 8006e02:	460c      	mov	r4, r1
 8006e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e08:	f000 f8a8 	bl	8006f5c <_read_r>
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	bfab      	itete	ge
 8006e10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e12:	89a3      	ldrhlt	r3, [r4, #12]
 8006e14:	181b      	addge	r3, r3, r0
 8006e16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e1a:	bfac      	ite	ge
 8006e1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e1e:	81a3      	strhlt	r3, [r4, #12]
 8006e20:	bd10      	pop	{r4, pc}

08006e22 <__swrite>:
 8006e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e26:	461f      	mov	r7, r3
 8006e28:	898b      	ldrh	r3, [r1, #12]
 8006e2a:	05db      	lsls	r3, r3, #23
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	460c      	mov	r4, r1
 8006e30:	4616      	mov	r6, r2
 8006e32:	d505      	bpl.n	8006e40 <__swrite+0x1e>
 8006e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e38:	2302      	movs	r3, #2
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f000 f868 	bl	8006f10 <_lseek_r>
 8006e40:	89a3      	ldrh	r3, [r4, #12]
 8006e42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e4a:	81a3      	strh	r3, [r4, #12]
 8006e4c:	4632      	mov	r2, r6
 8006e4e:	463b      	mov	r3, r7
 8006e50:	4628      	mov	r0, r5
 8006e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e56:	f000 b817 	b.w	8006e88 <_write_r>

08006e5a <__sseek>:
 8006e5a:	b510      	push	{r4, lr}
 8006e5c:	460c      	mov	r4, r1
 8006e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e62:	f000 f855 	bl	8006f10 <_lseek_r>
 8006e66:	1c43      	adds	r3, r0, #1
 8006e68:	89a3      	ldrh	r3, [r4, #12]
 8006e6a:	bf15      	itete	ne
 8006e6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e76:	81a3      	strheq	r3, [r4, #12]
 8006e78:	bf18      	it	ne
 8006e7a:	81a3      	strhne	r3, [r4, #12]
 8006e7c:	bd10      	pop	{r4, pc}

08006e7e <__sclose>:
 8006e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e82:	f000 b813 	b.w	8006eac <_close_r>
	...

08006e88 <_write_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4d07      	ldr	r5, [pc, #28]	; (8006ea8 <_write_r+0x20>)
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	4608      	mov	r0, r1
 8006e90:	4611      	mov	r1, r2
 8006e92:	2200      	movs	r2, #0
 8006e94:	602a      	str	r2, [r5, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	f7fb fa69 	bl	800236e <_write>
 8006e9c:	1c43      	adds	r3, r0, #1
 8006e9e:	d102      	bne.n	8006ea6 <_write_r+0x1e>
 8006ea0:	682b      	ldr	r3, [r5, #0]
 8006ea2:	b103      	cbz	r3, 8006ea6 <_write_r+0x1e>
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	bd38      	pop	{r3, r4, r5, pc}
 8006ea8:	200016c0 	.word	0x200016c0

08006eac <_close_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4d06      	ldr	r5, [pc, #24]	; (8006ec8 <_close_r+0x1c>)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	4608      	mov	r0, r1
 8006eb6:	602b      	str	r3, [r5, #0]
 8006eb8:	f7fb fa75 	bl	80023a6 <_close>
 8006ebc:	1c43      	adds	r3, r0, #1
 8006ebe:	d102      	bne.n	8006ec6 <_close_r+0x1a>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	b103      	cbz	r3, 8006ec6 <_close_r+0x1a>
 8006ec4:	6023      	str	r3, [r4, #0]
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}
 8006ec8:	200016c0 	.word	0x200016c0

08006ecc <_fstat_r>:
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	4d07      	ldr	r5, [pc, #28]	; (8006eec <_fstat_r+0x20>)
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	4608      	mov	r0, r1
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	602b      	str	r3, [r5, #0]
 8006eda:	f7fb fa70 	bl	80023be <_fstat>
 8006ede:	1c43      	adds	r3, r0, #1
 8006ee0:	d102      	bne.n	8006ee8 <_fstat_r+0x1c>
 8006ee2:	682b      	ldr	r3, [r5, #0]
 8006ee4:	b103      	cbz	r3, 8006ee8 <_fstat_r+0x1c>
 8006ee6:	6023      	str	r3, [r4, #0]
 8006ee8:	bd38      	pop	{r3, r4, r5, pc}
 8006eea:	bf00      	nop
 8006eec:	200016c0 	.word	0x200016c0

08006ef0 <_isatty_r>:
 8006ef0:	b538      	push	{r3, r4, r5, lr}
 8006ef2:	4d06      	ldr	r5, [pc, #24]	; (8006f0c <_isatty_r+0x1c>)
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	4608      	mov	r0, r1
 8006efa:	602b      	str	r3, [r5, #0]
 8006efc:	f7fb fa6f 	bl	80023de <_isatty>
 8006f00:	1c43      	adds	r3, r0, #1
 8006f02:	d102      	bne.n	8006f0a <_isatty_r+0x1a>
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	b103      	cbz	r3, 8006f0a <_isatty_r+0x1a>
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	bd38      	pop	{r3, r4, r5, pc}
 8006f0c:	200016c0 	.word	0x200016c0

08006f10 <_lseek_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	4d07      	ldr	r5, [pc, #28]	; (8006f30 <_lseek_r+0x20>)
 8006f14:	4604      	mov	r4, r0
 8006f16:	4608      	mov	r0, r1
 8006f18:	4611      	mov	r1, r2
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	602a      	str	r2, [r5, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f7fb fa68 	bl	80023f4 <_lseek>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d102      	bne.n	8006f2e <_lseek_r+0x1e>
 8006f28:	682b      	ldr	r3, [r5, #0]
 8006f2a:	b103      	cbz	r3, 8006f2e <_lseek_r+0x1e>
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	bd38      	pop	{r3, r4, r5, pc}
 8006f30:	200016c0 	.word	0x200016c0

08006f34 <__malloc_lock>:
 8006f34:	4801      	ldr	r0, [pc, #4]	; (8006f3c <__malloc_lock+0x8>)
 8006f36:	f7ff bc63 	b.w	8006800 <__retarget_lock_acquire_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	200016b8 	.word	0x200016b8

08006f40 <__malloc_unlock>:
 8006f40:	4801      	ldr	r0, [pc, #4]	; (8006f48 <__malloc_unlock+0x8>)
 8006f42:	f7ff bc5e 	b.w	8006802 <__retarget_lock_release_recursive>
 8006f46:	bf00      	nop
 8006f48:	200016b8 	.word	0x200016b8

08006f4c <_malloc_usable_size_r>:
 8006f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f50:	1f18      	subs	r0, r3, #4
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	bfbc      	itt	lt
 8006f56:	580b      	ldrlt	r3, [r1, r0]
 8006f58:	18c0      	addlt	r0, r0, r3
 8006f5a:	4770      	bx	lr

08006f5c <_read_r>:
 8006f5c:	b538      	push	{r3, r4, r5, lr}
 8006f5e:	4d07      	ldr	r5, [pc, #28]	; (8006f7c <_read_r+0x20>)
 8006f60:	4604      	mov	r4, r0
 8006f62:	4608      	mov	r0, r1
 8006f64:	4611      	mov	r1, r2
 8006f66:	2200      	movs	r2, #0
 8006f68:	602a      	str	r2, [r5, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f7fb f9e2 	bl	8002334 <_read>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	d102      	bne.n	8006f7a <_read_r+0x1e>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	b103      	cbz	r3, 8006f7a <_read_r+0x1e>
 8006f78:	6023      	str	r3, [r4, #0]
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}
 8006f7c:	200016c0 	.word	0x200016c0

08006f80 <_init>:
 8006f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f82:	bf00      	nop
 8006f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f86:	bc08      	pop	{r3}
 8006f88:	469e      	mov	lr, r3
 8006f8a:	4770      	bx	lr

08006f8c <_fini>:
 8006f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8e:	bf00      	nop
 8006f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f92:	bc08      	pop	{r3}
 8006f94:	469e      	mov	lr, r3
 8006f96:	4770      	bx	lr
