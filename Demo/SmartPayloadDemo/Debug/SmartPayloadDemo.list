
SmartPayloadDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006924  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ce8  08006ab4  08006ab4  00016ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800779c  0800779c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077a4  080077a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077a4  080077a4  000177a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077a8  080077a8  000177a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080077ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001648  200001e0  08007988  000201e0  2**4
                  ALLOC
 10 ._user_heap_stack 00001000  20001828  08007988  00021828  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d730  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026f8  00000000  00000000  0002d93c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b38  00000000  00000000  00030038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d0  00000000  00000000  00030b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020517  00000000  00000000  00031540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b756  00000000  00000000  00051a57  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb9ff  00000000  00000000  0005d1ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00118bac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003508  00000000  00000000  00118c28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a9c 	.word	0x08006a9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006a9c 	.word	0x08006a9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0

	hcan1.Instance = CAN1;
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <MX_CAN1_Init+0x6c>)
 8000576:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <MX_CAN1_Init+0x70>)
 8000578:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 6;
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <MX_CAN1_Init+0x6c>)
 800057c:	2206      	movs	r2, #6
 800057e:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000580:	4b16      	ldr	r3, [pc, #88]	; (80005dc <MX_CAN1_Init+0x6c>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <MX_CAN1_Init+0x6c>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800058c:	4b13      	ldr	r3, [pc, #76]	; (80005dc <MX_CAN1_Init+0x6c>)
 800058e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000592:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_CAN1_Init+0x6c>)
 8000596:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800059a:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_CAN1_Init+0x6c>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_CAN1_Init+0x6c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_CAN1_Init+0x6c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <MX_CAN1_Init+0x6c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_CAN1_Init+0x6c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <MX_CAN1_Init+0x6c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005c0:	4806      	ldr	r0, [pc, #24]	; (80005dc <MX_CAN1_Init+0x6c>)
 80005c2:	f002 f925 	bl	8002810 <HAL_CAN_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_CAN1_Init+0x60>
	{
		Error_Handler();
 80005cc:	f000 faca 	bl	8000b64 <Error_Handler>
	}
	user_Init(&hcan1);
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <MX_CAN1_Init+0x6c>)
 80005d2:	f000 f91d 	bl	8000810 <user_Init>

}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20001644 	.word	0x20001644
 80005e0:	40006400 	.word	0x40006400

080005e4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

	hcan2.Instance = CAN2;
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_CAN2_Init+0x64>)
 80005ea:	4a18      	ldr	r2, [pc, #96]	; (800064c <MX_CAN2_Init+0x68>)
 80005ec:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 6;
 80005ee:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_CAN2_Init+0x64>)
 80005f0:	2206      	movs	r2, #6
 80005f2:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_CAN2_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_CAN2_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_CAN2_Init+0x64>)
 8000602:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000606:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_CAN2_Init+0x64>)
 800060a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800060e:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <MX_CAN2_Init+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8000616:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_CAN2_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_CAN2_Init+0x64>)
 800061e:	2200      	movs	r2, #0
 8000620:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_CAN2_Init+0x64>)
 8000624:	2200      	movs	r2, #0
 8000626:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_CAN2_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_CAN2_Init+0x64>)
 8000630:	2200      	movs	r2, #0
 8000632:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_CAN2_Init+0x64>)
 8000636:	f002 f8eb 	bl	8002810 <HAL_CAN_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_CAN2_Init+0x60>
	{
		Error_Handler();
 8000640:	f000 fa90 	bl	8000b64 <Error_Handler>
	}

}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000161c 	.word	0x2000161c
 800064c:	40006800 	.word	0x40006800

08000650 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	; 0x30
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (canHandle->Instance == CAN1)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a62      	ldr	r2, [pc, #392]	; (80007f8 <HAL_CAN_MspInit+0x1a8>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d156      	bne.n	8000720 <HAL_CAN_MspInit+0xd0>
	{
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 8000672:	4b62      	ldr	r3, [pc, #392]	; (80007fc <HAL_CAN_MspInit+0x1ac>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	4a60      	ldr	r2, [pc, #384]	; (80007fc <HAL_CAN_MspInit+0x1ac>)
 800067a:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 800067c:	4b5f      	ldr	r3, [pc, #380]	; (80007fc <HAL_CAN_MspInit+0x1ac>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d10d      	bne.n	80006a0 <HAL_CAN_MspInit+0x50>
		{
			__HAL_RCC_CAN1_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
 8000688:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <HAL_CAN_MspInit+0x1b0>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a5c      	ldr	r2, [pc, #368]	; (8000800 <HAL_CAN_MspInit+0x1b0>)
 800068e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b5a      	ldr	r3, [pc, #360]	; (8000800 <HAL_CAN_MspInit+0x1b0>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800069c:	61bb      	str	r3, [r7, #24]
 800069e:	69bb      	ldr	r3, [r7, #24]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	4b56      	ldr	r3, [pc, #344]	; (8000800 <HAL_CAN_MspInit+0x1b0>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	4a55      	ldr	r2, [pc, #340]	; (8000800 <HAL_CAN_MspInit+0x1b0>)
 80006aa:	f043 0301 	orr.w	r3, r3, #1
 80006ae:	6313      	str	r3, [r2, #48]	; 0x30
 80006b0:	4b53      	ldr	r3, [pc, #332]	; (8000800 <HAL_CAN_MspInit+0x1b0>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b4:	f003 0301 	and.w	r3, r3, #1
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	697b      	ldr	r3, [r7, #20]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80006bc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006c0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ca:	2303      	movs	r3, #3
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006ce:	2309      	movs	r3, #9
 80006d0:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	484a      	ldr	r0, [pc, #296]	; (8000804 <HAL_CAN_MspInit+0x1b4>)
 80006da:	f003 fa29 	bl	8003b30 <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	2013      	movs	r0, #19
 80006e4:	f003 f9b2 	bl	8003a4c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80006e8:	2013      	movs	r0, #19
 80006ea:	f003 f9db 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	2014      	movs	r0, #20
 80006f4:	f003 f9aa 	bl	8003a4c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006f8:	2014      	movs	r0, #20
 80006fa:	f003 f9d3 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2015      	movs	r0, #21
 8000704:	f003 f9a2 	bl	8003a4c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000708:	2015      	movs	r0, #21
 800070a:	f003 f9cb 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2016      	movs	r0, #22
 8000714:	f003 f99a 	bl	8003a4c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000718:	2016      	movs	r0, #22
 800071a:	f003 f9c3 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 800071e:	e067      	b.n	80007f0 <HAL_CAN_MspInit+0x1a0>
	else if (canHandle->Instance == CAN2)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a38      	ldr	r2, [pc, #224]	; (8000808 <HAL_CAN_MspInit+0x1b8>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d162      	bne.n	80007f0 <HAL_CAN_MspInit+0x1a0>
		__HAL_RCC_CAN2_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b34      	ldr	r3, [pc, #208]	; (8000800 <HAL_CAN_MspInit+0x1b0>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	4a33      	ldr	r2, [pc, #204]	; (8000800 <HAL_CAN_MspInit+0x1b0>)
 8000734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000738:	6413      	str	r3, [r2, #64]	; 0x40
 800073a:	4b31      	ldr	r3, [pc, #196]	; (8000800 <HAL_CAN_MspInit+0x1b0>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
		HAL_RCC_CAN1_CLK_ENABLED++;
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <HAL_CAN_MspInit+0x1ac>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	3301      	adds	r3, #1
 800074c:	4a2b      	ldr	r2, [pc, #172]	; (80007fc <HAL_CAN_MspInit+0x1ac>)
 800074e:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 8000750:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <HAL_CAN_MspInit+0x1ac>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d10d      	bne.n	8000774 <HAL_CAN_MspInit+0x124>
			__HAL_RCC_CAN1_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	4b28      	ldr	r3, [pc, #160]	; (8000800 <HAL_CAN_MspInit+0x1b0>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	4a27      	ldr	r2, [pc, #156]	; (8000800 <HAL_CAN_MspInit+0x1b0>)
 8000762:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
 8000768:	4b25      	ldr	r3, [pc, #148]	; (8000800 <HAL_CAN_MspInit+0x1b0>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <HAL_CAN_MspInit+0x1b0>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077c:	4a20      	ldr	r2, [pc, #128]	; (8000800 <HAL_CAN_MspInit+0x1b0>)
 800077e:	f043 0302 	orr.w	r3, r3, #2
 8000782:	6313      	str	r3, [r2, #48]	; 0x30
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <HAL_CAN_MspInit+0x1b0>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	f003 0302 	and.w	r3, r3, #2
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8000790:	2360      	movs	r3, #96	; 0x60
 8000792:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80007a0:	2309      	movs	r3, #9
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4818      	ldr	r0, [pc, #96]	; (800080c <HAL_CAN_MspInit+0x1bc>)
 80007ac:	f003 f9c0 	bl	8003b30 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2100      	movs	r1, #0
 80007b4:	203f      	movs	r0, #63	; 0x3f
 80007b6:	f003 f949 	bl	8003a4c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80007ba:	203f      	movs	r0, #63	; 0x3f
 80007bc:	f003 f972 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2100      	movs	r1, #0
 80007c4:	2040      	movs	r0, #64	; 0x40
 80007c6:	f003 f941 	bl	8003a4c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80007ca:	2040      	movs	r0, #64	; 0x40
 80007cc:	f003 f96a 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	2041      	movs	r0, #65	; 0x41
 80007d6:	f003 f939 	bl	8003a4c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80007da:	2041      	movs	r0, #65	; 0x41
 80007dc:	f003 f962 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	2042      	movs	r0, #66	; 0x42
 80007e6:	f003 f931 	bl	8003a4c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 80007ea:	2042      	movs	r0, #66	; 0x42
 80007ec:	f003 f95a 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
}
 80007f0:	bf00      	nop
 80007f2:	3730      	adds	r7, #48	; 0x30
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40006400 	.word	0x40006400
 80007fc:	200001fc 	.word	0x200001fc
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000
 8000808:	40006800 	.word	0x40006800
 800080c:	40020400 	.word	0x40020400

08000810 <user_Init>:
	}
}

/* USER CODE BEGIN 1 */
static void user_Init(CAN_HandleTypeDef *hcan)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08e      	sub	sp, #56	; 0x38
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef filterConfig;
	HAL_StatusTypeDef HAL_Status;

	uint32_t filterId;

	filterId = DEVICE_ID & 0x3ff;
 8000818:	2301      	movs	r3, #1
 800081a:	637b      	str	r3, [r7, #52]	; 0x34

	filterConfig.FilterIdHigh = (filterId) << 5;
 800081c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800081e:	015b      	lsls	r3, r3, #5
 8000820:	60bb      	str	r3, [r7, #8]
	filterConfig.FilterIdLow = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMaskIdHigh = (filterId) << 5;
 8000826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000828:	015b      	lsls	r3, r3, #5
 800082a:	613b      	str	r3, [r7, #16]
	filterConfig.FilterMaskIdLow = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterBank = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8000838:	2301      	movs	r3, #1
 800083a:	623b      	str	r3, [r7, #32]
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800083c:	2301      	movs	r3, #1
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
	filterConfig.FilterActivation = ENABLE;
 8000840:	2301      	movs	r3, #1
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
	filterConfig.SlaveStartFilterBank = 14;
 8000844:	230e      	movs	r3, #14
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_Status = HAL_CAN_ConfigFilter(hcan, &filterConfig);
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	4619      	mov	r1, r3
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f002 f9fa 	bl	8002c48 <HAL_CAN_ConfigFilter>
 8000854:	4603      	mov	r3, r0
 8000856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	HAL_Status = HAL_CAN_Start(hcan);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f002 fb42 	bl	8002ee4 <HAL_CAN_Start>
 8000860:	4603      	mov	r3, r0
 8000862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if (HAL_Status != HAL_OK)
 8000866:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <user_Init+0x62>
	{
		Error_Handler();
 800086e:	f000 f979 	bl	8000b64 <Error_Handler>
	}
	HAL_Status = HAL_CAN_ActivateNotification(hcan,
 8000872:	2103      	movs	r1, #3
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f002 fdbb 	bl	80033f0 <HAL_CAN_ActivateNotification>
 800087a:	4603      	mov	r3, r0
 800087c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY);
	if (HAL_Status != HAL_OK)
 8000880:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <user_Init+0x7c>
	{
		Error_Handler();
 8000888:	f000 f96c 	bl	8000b64 <Error_Handler>
	}
}
 800088c:	bf00      	nop
 800088e:	3738      	adds	r7, #56	; 0x38
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <g_generate_crc>:
		0xce, 0x9d, 0xac };
/**
 *
 */
uint8_t g_generate_crc(uint8_t *ptr, uint16_t len)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	807b      	strh	r3, [r7, #2]
	uint8_t crc = 0x00;
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]

	while (len--)
 80008a4:	e00a      	b.n	80008bc <g_generate_crc+0x28>
	{
		crc = crc_table[crc ^ *ptr++];
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	1c5a      	adds	r2, r3, #1
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	781a      	ldrb	r2, [r3, #0]
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	4053      	eors	r3, r2
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <g_generate_crc+0x40>)
 80008b8:	5c9b      	ldrb	r3, [r3, r2]
 80008ba:	73fb      	strb	r3, [r7, #15]
	while (len--)
 80008bc:	887b      	ldrh	r3, [r7, #2]
 80008be:	1e5a      	subs	r2, r3, #1
 80008c0:	807a      	strh	r2, [r7, #2]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d1ef      	bne.n	80008a6 <g_generate_crc+0x12>
	}
	return crc;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	0800746c 	.word	0x0800746c

080008d8 <g_convert_float16_to_native_float>:

    return out;
}

float g_convert_float16_to_native_float(uint16_t value)
{
 80008d8:	b480      	push	{r7}
 80008da:	b087      	sub	sp, #28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	80fb      	strh	r3, [r7, #6]
    {
        uint32_t u;
        float f;
    };

    const union FP32 magic = { (254UL - 15UL) << 23U };
 80008e2:	f04f 43ef 	mov.w	r3, #2004877312	; 0x77800000
 80008e6:	617b      	str	r3, [r7, #20]
    const union FP32 was_inf_nan = { (127UL + 16UL) << 23U };
 80008e8:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 80008ec:	613b      	str	r3, [r7, #16]
    union FP32 out;

    out.u = (value & 0x7FFFU) << 13U;
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	035a      	lsls	r2, r3, #13
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <g_convert_float16_to_native_float+0x6c>)
 80008f4:	4013      	ands	r3, r2
 80008f6:	60fb      	str	r3, [r7, #12]
    out.f *= magic.f;
 80008f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80008fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000904:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.f >= was_inf_nan.f)
 8000908:	ed97 7a03 	vldr	s14, [r7, #12]
 800090c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000910:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000918:	db03      	blt.n	8000922 <g_convert_float16_to_native_float+0x4a>
    {
        out.u |= 255UL << 23U;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f043 43ff 	orr.w	r3, r3, #2139095040	; 0x7f800000
 8000920:	60fb      	str	r3, [r7, #12]
    }
    out.u |= (value & 0x8000UL) << 16U;
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	88fb      	ldrh	r3, [r7, #6]
 8000926:	041b      	lsls	r3, r3, #16
 8000928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800092c:	4313      	orrs	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]

    return out.f;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	ee07 3a90 	vmov	s15, r3
}
 8000936:	eeb0 0a67 	vmov.f32	s0, s15
 800093a:	371c      	adds	r7, #28
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	0fffe000 	.word	0x0fffe000

08000948 <g_take_photo>:
 */

#include "stm32f4xx_hal.h"

void g_take_photo(int32_t altitude, uint32_t lat, uint32_t lon)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]

}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <g_record>:
 *            @arg 0x01: start record
 *            @arg 0x00: stop record
 * @retval none
 */
void g_record(uint8_t start_or_stop)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]

}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <g_pitch_control>:
 *         This parameter can be one of the following values:
 *            [-5,5].
 * @retval none
 */
void g_pitch_control(int8_t pitch_ctrl)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	4603      	mov	r3, r0
 800097e:	71fb      	strb	r3, [r7, #7]

}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <g_yaw_control>:
 *         This parameter can be one of the following values:
 *            [-5,5].
 * @retval none
 */
void g_yaw_control(int8_t yaw_ctrl)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]

}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <g_gimbal_mode>:
 *            @arg 0x01: Follow
 *            @arg 0x02: Reset Position
 * @retval none
 */
void g_gimbal_mode(uint8_t mode)
{
 80009a2:	b480      	push	{r7}
 80009a4:	b083      	sub	sp, #12
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	71fb      	strb	r3, [r7, #7]

}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <g_set_gimbal_pitch>:
 * @brief  set gimbal pitch angle.
 * @param  angle
 * @retval none
 */
void g_set_gimbal_pitch(float angle)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	ed87 0a01 	vstr	s0, [r7, #4]

}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <g_set_gimbal_yaw>:
 * @brief  set gimbal yaw angle.
 * @param  angle
 * @retval none
 */
void g_set_gimbal_yaw(float angle)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	ed87 0a01 	vstr	s0, [r7, #4]

}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <g_control_zoom>:
 *            @arg 0x01: zoom stop
 *            @arg 0x02: zoom near
 * @retval none
 */
void g_control_zoom(uint8_t zoom)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]

}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_GPIO_Init+0x68>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a6c:	f001 fe5e 	bl	800272c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a70:	f000 f80e 	bl	8000a90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a74:	f7ff ffc2 	bl	80009fc <MX_GPIO_Init>
	MX_CAN1_Init();
 8000a78:	f7ff fd7a 	bl	8000570 <MX_CAN1_Init>
	MX_CAN2_Init();
 8000a7c:	f7ff fdb2 	bl	80005e4 <MX_CAN2_Init>
	MX_USART1_UART_Init();
 8000a80:	f001 fd4a 	bl	8002518 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000a84:	f001 fd72 	bl	800256c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	g_payload_init();
 8000a88:	f000 fe98 	bl	80017bc <g_payload_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000a8c:	e7fe      	b.n	8000a8c <main+0x24>
	...

08000a90 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b094      	sub	sp, #80	; 0x50
 8000a94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000a96:	f107 0320 	add.w	r3, r7, #32
 8000a9a:	2230      	movs	r2, #48	; 0x30
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f005 f828 	bl	8005af4 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <SystemClock_Config+0xcc>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	4a27      	ldr	r2, [pc, #156]	; (8000b5c <SystemClock_Config+0xcc>)
 8000abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac4:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <SystemClock_Config+0xcc>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <SystemClock_Config+0xd0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a21      	ldr	r2, [pc, #132]	; (8000b60 <SystemClock_Config+0xd0>)
 8000ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <SystemClock_Config+0xd0>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aec:	2301      	movs	r3, #1
 8000aee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af6:	2302      	movs	r3, #2
 8000af8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000b00:	2308      	movs	r3, #8
 8000b02:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000b04:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b08:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b12:	f107 0320 	add.w	r3, r7, #32
 8000b16:	4618      	mov	r0, r3
 8000b18:	f003 faec 	bl	80040f4 <HAL_RCC_OscConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000b22:	f000 f81f 	bl	8000b64 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b26:	230f      	movs	r3, #15
 8000b28:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b36:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	2105      	movs	r1, #5
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 fdf5 	bl	8004734 <HAL_RCC_ClockConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000b50:	f000 f808 	bl	8000b64 <Error_Handler>
	}
}
 8000b54:	bf00      	nop
 8000b56:	3750      	adds	r7, #80	; 0x50
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40007000 	.word	0x40007000

08000b64 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <isPowerOf2>:
static_assert((INSTANCE_SIZE_PADDED % O1HEAP_ALIGNMENT) == 0U, "Invalid instance footprint computation");

/// True if the argument is an integer power of two or zero.
O1HEAP_PRIVATE bool isPowerOf2(const size_t x);
O1HEAP_PRIVATE bool isPowerOf2(const size_t x)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
    return (x & (x - 1U)) == 0U;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	1e5a      	subs	r2, r3, #1
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4013      	ands	r3, r2
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	bf0c      	ite	eq
 8000b9c:	2301      	moveq	r3, #1
 8000b9e:	2300      	movne	r3, #0
 8000ba0:	b2db      	uxtb	r3, r3
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <log2Floor>:

/// Special case: if the argument is zero, returns zero.
O1HEAP_PRIVATE uint8_t log2Floor(const size_t x);
O1HEAP_PRIVATE uint8_t log2Floor(const size_t x)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b085      	sub	sp, #20
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
    size_t  tmp = x;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60fb      	str	r3, [r7, #12]
    uint8_t y   = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	72fb      	strb	r3, [r7, #11]
    // This is currently the only exception to the statement "routines contain neither loops nor recursion".
    // It is unclear if there is a better way to compute the binary logarithm than this.
    while (tmp > 1U)
 8000bbe:	e005      	b.n	8000bcc <log2Floor+0x1e>
    {
        tmp >>= 1U;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	085b      	lsrs	r3, r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
        y++;
 8000bc6:	7afb      	ldrb	r3, [r7, #11]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	72fb      	strb	r3, [r7, #11]
    while (tmp > 1U)
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d8f6      	bhi.n	8000bc0 <log2Floor+0x12>
    }
    return y;
 8000bd2:	7afb      	ldrb	r3, [r7, #11]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <log2Ceil>:

/// Special case: if the argument is zero, returns zero.
O1HEAP_PRIVATE uint8_t log2Ceil(const size_t x);
O1HEAP_PRIVATE uint8_t log2Ceil(const size_t x)
{
 8000be0:	b590      	push	{r4, r7, lr}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
    return (uint8_t)(log2Floor(x) + (isPowerOf2(x) ? 0U : 1U));
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ffe0 	bl	8000bae <log2Floor>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461c      	mov	r4, r3
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ffc8 	bl	8000b88 <isPowerOf2>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f083 0301 	eor.w	r3, r3, #1
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4423      	add	r3, r4
 8000c02:	b2db      	uxtb	r3, r3
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd90      	pop	{r4, r7, pc}

08000c0c <pow2>:
/// Raise 2 into the specified power.
/// You might be tempted to do something like (1U << power). WRONG! We humans are prone to forgetting things.
/// If you forget to cast your 1U to size_t or ULL, you may end up with undefined behavior.
O1HEAP_PRIVATE size_t pow2(const uint8_t power);
O1HEAP_PRIVATE size_t pow2(const uint8_t power)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
    return ((size_t) 1U) << power;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <invoke>:

O1HEAP_PRIVATE void invoke(const O1HeapHook hook);
O1HEAP_PRIVATE void invoke(const O1HeapHook hook)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
    if (hook != NULL)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <invoke+0x12>
    {
        hook();
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4798      	blx	r3
    }
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <interlink>:

/// Links two fragments so that their next/prev pointers point to each other; left goes before right.
O1HEAP_PRIVATE void interlink(Fragment* const left, Fragment* const right);
O1HEAP_PRIVATE void interlink(Fragment* const left, Fragment* const right)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
    if (O1HEAP_LIKELY(left != NULL))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	bf14      	ite	ne
 8000c54:	2301      	movne	r3, #1
 8000c56:	2300      	moveq	r3, #0
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d002      	beq.n	8000c64 <interlink+0x20>
    {
        left->header.next = right;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	601a      	str	r2, [r3, #0]
    }
    if (O1HEAP_LIKELY(right != NULL))
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	bf14      	ite	ne
 8000c6a:	2301      	movne	r3, #1
 8000c6c:	2300      	moveq	r3, #0
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <interlink+0x36>
    {
        right->header.prev = left;
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	605a      	str	r2, [r3, #4]
    }
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <rebin>:

/// Adds a new block into the appropriate bin and updates the lookup mask.
O1HEAP_PRIVATE void rebin(O1HeapInstance* const handle, Fragment* const fragment);
O1HEAP_PRIVATE void rebin(O1HeapInstance* const handle, Fragment* const fragment)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
    O1HEAP_ASSERT(handle != NULL);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d105      	bne.n	8000ca4 <rebin+0x1c>
 8000c98:	4b32      	ldr	r3, [pc, #200]	; (8000d64 <rebin+0xdc>)
 8000c9a:	4a33      	ldr	r2, [pc, #204]	; (8000d68 <rebin+0xe0>)
 8000c9c:	21b7      	movs	r1, #183	; 0xb7
 8000c9e:	4833      	ldr	r0, [pc, #204]	; (8000d6c <rebin+0xe4>)
 8000ca0:	f004 feb0 	bl	8005a04 <__assert_func>
    O1HEAP_ASSERT(fragment != NULL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d105      	bne.n	8000cb6 <rebin+0x2e>
 8000caa:	4b31      	ldr	r3, [pc, #196]	; (8000d70 <rebin+0xe8>)
 8000cac:	4a2e      	ldr	r2, [pc, #184]	; (8000d68 <rebin+0xe0>)
 8000cae:	21b8      	movs	r1, #184	; 0xb8
 8000cb0:	482e      	ldr	r0, [pc, #184]	; (8000d6c <rebin+0xe4>)
 8000cb2:	f004 fea7 	bl	8005a04 <__assert_func>
    O1HEAP_ASSERT(fragment->header.size >= FRAGMENT_SIZE_MIN);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b1f      	cmp	r3, #31
 8000cbc:	d805      	bhi.n	8000cca <rebin+0x42>
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <rebin+0xec>)
 8000cc0:	4a29      	ldr	r2, [pc, #164]	; (8000d68 <rebin+0xe0>)
 8000cc2:	21b9      	movs	r1, #185	; 0xb9
 8000cc4:	4829      	ldr	r0, [pc, #164]	; (8000d6c <rebin+0xe4>)
 8000cc6:	f004 fe9d 	bl	8005a04 <__assert_func>
    O1HEAP_ASSERT((fragment->header.size % FRAGMENT_SIZE_MIN) == 0U);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	f003 031f 	and.w	r3, r3, #31
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d005      	beq.n	8000ce2 <rebin+0x5a>
 8000cd6:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <rebin+0xf0>)
 8000cd8:	4a23      	ldr	r2, [pc, #140]	; (8000d68 <rebin+0xe0>)
 8000cda:	21ba      	movs	r1, #186	; 0xba
 8000cdc:	4823      	ldr	r0, [pc, #140]	; (8000d6c <rebin+0xe4>)
 8000cde:	f004 fe91 	bl	8005a04 <__assert_func>
    const uint8_t idx = log2Floor(fragment->header.size / FRAGMENT_SIZE_MIN);  // Round DOWN when inserting.
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ff60 	bl	8000bae <log2Floor>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	73fb      	strb	r3, [r7, #15]
    O1HEAP_ASSERT(idx < NUM_BINS_MAX);
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	2b1f      	cmp	r3, #31
 8000cf6:	d905      	bls.n	8000d04 <rebin+0x7c>
 8000cf8:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <rebin+0xf4>)
 8000cfa:	4a1b      	ldr	r2, [pc, #108]	; (8000d68 <rebin+0xe0>)
 8000cfc:	21bc      	movs	r1, #188	; 0xbc
 8000cfe:	481b      	ldr	r0, [pc, #108]	; (8000d6c <rebin+0xe4>)
 8000d00:	f004 fe80 	bl	8005a04 <__assert_func>
    // Add the new fragment to the beginning of the bin list.
    // I.e., each allocation will be returning the least-recently-used fragment -- good for caching.
    fragment->next_free = handle->bins[idx];
 8000d04:	7bfa      	ldrb	r2, [r7, #15]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	611a      	str	r2, [r3, #16]
    fragment->prev_free = NULL;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2200      	movs	r2, #0
 8000d14:	615a      	str	r2, [r3, #20]
    if (O1HEAP_LIKELY(handle->bins[idx] != NULL))
 8000d16:	7bfa      	ldrb	r2, [r7, #15]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	bf14      	ite	ne
 8000d22:	2301      	movne	r3, #1
 8000d24:	2300      	moveq	r3, #0
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d005      	beq.n	8000d38 <rebin+0xb0>
    {
        handle->bins[idx]->prev_free = fragment;
 8000d2c:	7bfa      	ldrb	r2, [r7, #15]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	615a      	str	r2, [r3, #20]
    }
    handle->bins[idx] = fragment;
 8000d38:	7bfa      	ldrb	r2, [r7, #15]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6839      	ldr	r1, [r7, #0]
 8000d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    handle->nonempty_bin_mask |= pow2(idx);
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff61 	bl	8000c0c <pow2>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d52:	431a      	orrs	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	08006ab4 	.word	0x08006ab4
 8000d68:	08007578 	.word	0x08007578
 8000d6c:	08006acc 	.word	0x08006acc
 8000d70:	08006ae4 	.word	0x08006ae4
 8000d74:	08006afc 	.word	0x08006afc
 8000d78:	08006b34 	.word	0x08006b34
 8000d7c:	08006b70 	.word	0x08006b70

08000d80 <unbin>:

/// Removes the specified block from its bin.
O1HEAP_PRIVATE void unbin(O1HeapInstance* const handle, const Fragment* const fragment);
O1HEAP_PRIVATE void unbin(O1HeapInstance* const handle, const Fragment* const fragment)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
    O1HEAP_ASSERT(handle != NULL);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d105      	bne.n	8000d9c <unbin+0x1c>
 8000d90:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <unbin+0x124>)
 8000d92:	4a45      	ldr	r2, [pc, #276]	; (8000ea8 <unbin+0x128>)
 8000d94:	21cd      	movs	r1, #205	; 0xcd
 8000d96:	4845      	ldr	r0, [pc, #276]	; (8000eac <unbin+0x12c>)
 8000d98:	f004 fe34 	bl	8005a04 <__assert_func>
    O1HEAP_ASSERT(fragment != NULL);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d105      	bne.n	8000dae <unbin+0x2e>
 8000da2:	4b43      	ldr	r3, [pc, #268]	; (8000eb0 <unbin+0x130>)
 8000da4:	4a40      	ldr	r2, [pc, #256]	; (8000ea8 <unbin+0x128>)
 8000da6:	21ce      	movs	r1, #206	; 0xce
 8000da8:	4840      	ldr	r0, [pc, #256]	; (8000eac <unbin+0x12c>)
 8000daa:	f004 fe2b 	bl	8005a04 <__assert_func>
    O1HEAP_ASSERT(fragment->header.size >= FRAGMENT_SIZE_MIN);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	2b1f      	cmp	r3, #31
 8000db4:	d805      	bhi.n	8000dc2 <unbin+0x42>
 8000db6:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <unbin+0x134>)
 8000db8:	4a3b      	ldr	r2, [pc, #236]	; (8000ea8 <unbin+0x128>)
 8000dba:	21cf      	movs	r1, #207	; 0xcf
 8000dbc:	483b      	ldr	r0, [pc, #236]	; (8000eac <unbin+0x12c>)
 8000dbe:	f004 fe21 	bl	8005a04 <__assert_func>
    O1HEAP_ASSERT((fragment->header.size % FRAGMENT_SIZE_MIN) == 0U);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f003 031f 	and.w	r3, r3, #31
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d005      	beq.n	8000dda <unbin+0x5a>
 8000dce:	4b3a      	ldr	r3, [pc, #232]	; (8000eb8 <unbin+0x138>)
 8000dd0:	4a35      	ldr	r2, [pc, #212]	; (8000ea8 <unbin+0x128>)
 8000dd2:	21d0      	movs	r1, #208	; 0xd0
 8000dd4:	4835      	ldr	r0, [pc, #212]	; (8000eac <unbin+0x12c>)
 8000dd6:	f004 fe15 	bl	8005a04 <__assert_func>
    const uint8_t idx = log2Floor(fragment->header.size / FRAGMENT_SIZE_MIN);  // Round DOWN when removing.
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff fee4 	bl	8000bae <log2Floor>
 8000de6:	4603      	mov	r3, r0
 8000de8:	73fb      	strb	r3, [r7, #15]
    O1HEAP_ASSERT(idx < NUM_BINS_MAX);
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	2b1f      	cmp	r3, #31
 8000dee:	d905      	bls.n	8000dfc <unbin+0x7c>
 8000df0:	4b32      	ldr	r3, [pc, #200]	; (8000ebc <unbin+0x13c>)
 8000df2:	4a2d      	ldr	r2, [pc, #180]	; (8000ea8 <unbin+0x128>)
 8000df4:	21d2      	movs	r1, #210	; 0xd2
 8000df6:	482d      	ldr	r0, [pc, #180]	; (8000eac <unbin+0x12c>)
 8000df8:	f004 fe04 	bl	8005a04 <__assert_func>
    // Remove the bin from the free fragment list.
    if (O1HEAP_LIKELY(fragment->next_free != NULL))
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	691b      	ldr	r3, [r3, #16]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	bf14      	ite	ne
 8000e04:	2301      	movne	r3, #1
 8000e06:	2300      	moveq	r3, #0
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d004      	beq.n	8000e18 <unbin+0x98>
    {
        fragment->next_free->prev_free = fragment->prev_free;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	683a      	ldr	r2, [r7, #0]
 8000e14:	6952      	ldr	r2, [r2, #20]
 8000e16:	615a      	str	r2, [r3, #20]
    }
    if (O1HEAP_LIKELY(fragment->prev_free != NULL))
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	bf14      	ite	ne
 8000e20:	2301      	movne	r3, #1
 8000e22:	2300      	moveq	r3, #0
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d004      	beq.n	8000e34 <unbin+0xb4>
    {
        fragment->prev_free->next_free = fragment->next_free;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	6912      	ldr	r2, [r2, #16]
 8000e32:	611a      	str	r2, [r3, #16]
    }
    // Update the bin header.
    if (O1HEAP_LIKELY(handle->bins[idx] == fragment))
 8000e34:	7bfa      	ldrb	r2, [r7, #15]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	bf0c      	ite	eq
 8000e42:	2301      	moveq	r3, #1
 8000e44:	2300      	movne	r3, #0
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d027      	beq.n	8000e9c <unbin+0x11c>
    {
        O1HEAP_ASSERT(fragment->prev_free == NULL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d005      	beq.n	8000e60 <unbin+0xe0>
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <unbin+0x140>)
 8000e56:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <unbin+0x128>)
 8000e58:	21df      	movs	r1, #223	; 0xdf
 8000e5a:	4814      	ldr	r0, [pc, #80]	; (8000eac <unbin+0x12c>)
 8000e5c:	f004 fdd2 	bl	8005a04 <__assert_func>
        handle->bins[idx] = fragment->next_free;
 8000e60:	7bfa      	ldrb	r2, [r7, #15]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	6919      	ldr	r1, [r3, #16]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        if (O1HEAP_LIKELY(handle->bins[idx] == NULL))
 8000e6c:	7bfa      	ldrb	r2, [r7, #15]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bf0c      	ite	eq
 8000e78:	2301      	moveq	r3, #1
 8000e7a:	2300      	movne	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00c      	beq.n	8000e9c <unbin+0x11c>
        {
            handle->nonempty_bin_mask &= ~pow2(idx);
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fec1 	bl	8000c0c <pow2>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	43da      	mvns	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e94:	401a      	ands	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        }
    }
}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	08006ab4 	.word	0x08006ab4
 8000ea8:	08007590 	.word	0x08007590
 8000eac:	08006acc 	.word	0x08006acc
 8000eb0:	08006ae4 	.word	0x08006ae4
 8000eb4:	08006afc 	.word	0x08006afc
 8000eb8:	08006b34 	.word	0x08006b34
 8000ebc:	08006b70 	.word	0x08006b70
 8000ec0:	08006b8c 	.word	0x08006b8c

08000ec4 <o1heapInit>:

O1HeapInstance* o1heapInit(void* const      base,
                           const size_t     size,
                           const O1HeapHook critical_section_enter,
                           const O1HeapHook critical_section_leave)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	603b      	str	r3, [r7, #0]
    O1HeapInstance* out = NULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    if ((base != NULL) && ((((size_t) base) % O1HEAP_ALIGNMENT) == 0U) &&
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80b0 	beq.w	800103e <o1heapInit+0x17a>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f003 030f 	and.w	r3, r3, #15
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f040 80aa 	bne.w	800103e <o1heapInit+0x17a>
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	2bcf      	cmp	r3, #207	; 0xcf
 8000eee:	f240 80a6 	bls.w	800103e <o1heapInit+0x17a>
        (size >= (INSTANCE_SIZE_PADDED + FRAGMENT_SIZE_MIN)))
    {
        // Allocate the core heap metadata structure in the beginning of the arena.
        O1HEAP_ASSERT(((size_t) base) % sizeof(O1HeapInstance*) == 0U);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d005      	beq.n	8000f08 <o1heapInit+0x44>
 8000efc:	4b52      	ldr	r3, [pc, #328]	; (8001048 <o1heapInit+0x184>)
 8000efe:	4a53      	ldr	r2, [pc, #332]	; (800104c <o1heapInit+0x188>)
 8000f00:	21f4      	movs	r1, #244	; 0xf4
 8000f02:	4853      	ldr	r0, [pc, #332]	; (8001050 <o1heapInit+0x18c>)
 8000f04:	f004 fd7e 	bl	8005a04 <__assert_func>
        out                         = (O1HeapInstance*) base;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	61fb      	str	r3, [r7, #28]
        out->nonempty_bin_mask      = 0U;
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        out->critical_section_enter = critical_section_enter;
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        out->critical_section_leave = critical_section_leave;
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        for (size_t i = 0; i < NUM_BINS_MAX; i++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
 8000f28:	e007      	b.n	8000f3a <o1heapInit+0x76>
        {
            out->bins[i] = NULL;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	2100      	movs	r1, #0
 8000f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (size_t i = 0; i < NUM_BINS_MAX; i++)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	3301      	adds	r3, #1
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	2b1f      	cmp	r3, #31
 8000f3e:	d9f4      	bls.n	8000f2a <o1heapInit+0x66>
        }

        // Limit and align the capacity.
        size_t capacity = size - INSTANCE_SIZE_PADDED;
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	3bb0      	subs	r3, #176	; 0xb0
 8000f44:	617b      	str	r3, [r7, #20]
        if (capacity > FRAGMENT_SIZE_MAX)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f4c:	d910      	bls.n	8000f70 <o1heapInit+0xac>
        {
            capacity = FRAGMENT_SIZE_MAX;
 8000f4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000f52:	617b      	str	r3, [r7, #20]
        }
        while ((capacity % FRAGMENT_SIZE_MIN) != 0)
 8000f54:	e00c      	b.n	8000f70 <o1heapInit+0xac>
        {
            O1HEAP_ASSERT(capacity > 0U);
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d106      	bne.n	8000f6a <o1heapInit+0xa6>
 8000f5c:	4b3d      	ldr	r3, [pc, #244]	; (8001054 <o1heapInit+0x190>)
 8000f5e:	4a3b      	ldr	r2, [pc, #236]	; (800104c <o1heapInit+0x188>)
 8000f60:	f44f 7183 	mov.w	r1, #262	; 0x106
 8000f64:	483a      	ldr	r0, [pc, #232]	; (8001050 <o1heapInit+0x18c>)
 8000f66:	f004 fd4d 	bl	8005a04 <__assert_func>
            capacity--;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
        while ((capacity % FRAGMENT_SIZE_MIN) != 0)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f003 031f 	and.w	r3, r3, #31
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1ed      	bne.n	8000f56 <o1heapInit+0x92>
        }
        O1HEAP_ASSERT((capacity % FRAGMENT_SIZE_MIN) == 0);
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f003 031f 	and.w	r3, r3, #31
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d006      	beq.n	8000f92 <o1heapInit+0xce>
 8000f84:	4b34      	ldr	r3, [pc, #208]	; (8001058 <o1heapInit+0x194>)
 8000f86:	4a31      	ldr	r2, [pc, #196]	; (800104c <o1heapInit+0x188>)
 8000f88:	f240 1109 	movw	r1, #265	; 0x109
 8000f8c:	4830      	ldr	r0, [pc, #192]	; (8001050 <o1heapInit+0x18c>)
 8000f8e:	f004 fd39 	bl	8005a04 <__assert_func>
        O1HEAP_ASSERT((capacity >= FRAGMENT_SIZE_MIN) && (capacity <= FRAGMENT_SIZE_MAX));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2b1f      	cmp	r3, #31
 8000f96:	d903      	bls.n	8000fa0 <o1heapInit+0xdc>
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f9e:	d906      	bls.n	8000fae <o1heapInit+0xea>
 8000fa0:	4b2e      	ldr	r3, [pc, #184]	; (800105c <o1heapInit+0x198>)
 8000fa2:	4a2a      	ldr	r2, [pc, #168]	; (800104c <o1heapInit+0x188>)
 8000fa4:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8000fa8:	4829      	ldr	r0, [pc, #164]	; (8001050 <o1heapInit+0x18c>)
 8000faa:	f004 fd2b 	bl	8005a04 <__assert_func>

        // Initialize the root fragment.
        Fragment* const frag = (Fragment*) (void*) (((uint8_t*) base) + INSTANCE_SIZE_PADDED);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	33b0      	adds	r3, #176	; 0xb0
 8000fb2:	613b      	str	r3, [r7, #16]
        O1HEAP_ASSERT((((size_t) frag) % O1HEAP_ALIGNMENT) == 0U);
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d006      	beq.n	8000fcc <o1heapInit+0x108>
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <o1heapInit+0x19c>)
 8000fc0:	4a22      	ldr	r2, [pc, #136]	; (800104c <o1heapInit+0x188>)
 8000fc2:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8000fc6:	4822      	ldr	r0, [pc, #136]	; (8001050 <o1heapInit+0x18c>)
 8000fc8:	f004 fd1c 	bl	8005a04 <__assert_func>
        frag->header.next = NULL;
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
        frag->header.prev = NULL;
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
        frag->header.size = capacity;
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	609a      	str	r2, [r3, #8]
        frag->header.used = false;
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	731a      	strb	r2, [r3, #12]
        frag->next_free   = NULL;
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
        frag->prev_free   = NULL;
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
        rebin(out, frag);
 8000ff0:	6939      	ldr	r1, [r7, #16]
 8000ff2:	69f8      	ldr	r0, [r7, #28]
 8000ff4:	f7ff fe48 	bl	8000c88 <rebin>
        O1HEAP_ASSERT(out->nonempty_bin_mask != 0U);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <o1heapInit+0x14c>
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <o1heapInit+0x1a0>)
 8001004:	4a11      	ldr	r2, [pc, #68]	; (800104c <o1heapInit+0x188>)
 8001006:	f44f 718b 	mov.w	r1, #278	; 0x116
 800100a:	4811      	ldr	r0, [pc, #68]	; (8001050 <o1heapInit+0x18c>)
 800100c:	f004 fcfa 	bl	8005a04 <__assert_func>

        // Initialize the diagnostics.
        out->diagnostics.capacity          = capacity;
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        out->diagnostics.allocated         = 0U;
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	2200      	movs	r2, #0
 800101c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        out->diagnostics.peak_allocated    = 0U;
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	2200      	movs	r2, #0
 8001024:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        out->diagnostics.peak_request_size = 0U;
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	2200      	movs	r2, #0
 800102c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        out->diagnostics.oom_count         = 0U;
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	f04f 0400 	mov.w	r4, #0
 800103a:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
    }

    return out;
 800103e:	69fb      	ldr	r3, [r7, #28]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3724      	adds	r7, #36	; 0x24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}
 8001048:	08006bb0 	.word	0x08006bb0
 800104c:	0800756c 	.word	0x0800756c
 8001050:	08006acc 	.word	0x08006acc
 8001054:	08006be0 	.word	0x08006be0
 8001058:	08006bf0 	.word	0x08006bf0
 800105c:	08006c20 	.word	0x08006c20
 8001060:	08006c78 	.word	0x08006c78
 8001064:	08006ca8 	.word	0x08006ca8

08001068 <o1heapAllocate>:

void* o1heapAllocate(O1HeapInstance* const handle, const size_t amount)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b08d      	sub	sp, #52	; 0x34
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
    O1HEAP_ASSERT(handle != NULL);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d106      	bne.n	8001086 <o1heapAllocate+0x1e>
 8001078:	4bab      	ldr	r3, [pc, #684]	; (8001328 <o1heapAllocate+0x2c0>)
 800107a:	4aac      	ldr	r2, [pc, #688]	; (800132c <o1heapAllocate+0x2c4>)
 800107c:	f240 1125 	movw	r1, #293	; 0x125
 8001080:	48ab      	ldr	r0, [pc, #684]	; (8001330 <o1heapAllocate+0x2c8>)
 8001082:	f004 fcbf 	bl	8005a04 <__assert_func>
    O1HEAP_ASSERT(handle->diagnostics.capacity <= FRAGMENT_SIZE_MAX);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800108c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001090:	d906      	bls.n	80010a0 <o1heapAllocate+0x38>
 8001092:	4ba8      	ldr	r3, [pc, #672]	; (8001334 <o1heapAllocate+0x2cc>)
 8001094:	4aa5      	ldr	r2, [pc, #660]	; (800132c <o1heapAllocate+0x2c4>)
 8001096:	f44f 7193 	mov.w	r1, #294	; 0x126
 800109a:	48a5      	ldr	r0, [pc, #660]	; (8001330 <o1heapAllocate+0x2c8>)
 800109c:	f004 fcb2 	bl	8005a04 <__assert_func>
    void* out = NULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c

    // If the amount approaches approx. SIZE_MAX/2, an undetected integer overflow may occur.
    // To avoid that, we do not attempt allocation if the amount exceeds the hard limit.
    // We perform multiple redundant checks to account for a possible unaccounted overflow.
    if (O1HEAP_LIKELY((amount > 0U) && (amount <= (handle->diagnostics.capacity - O1HEAP_ALIGNMENT))))
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	bf14      	ite	ne
 80010aa:	2301      	movne	r3, #1
 80010ac:	2300      	moveq	r3, #0
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 819f 	beq.w	80013f4 <o1heapAllocate+0x38c>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010bc:	3b10      	subs	r3, #16
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	bf94      	ite	ls
 80010c4:	2301      	movls	r3, #1
 80010c6:	2300      	movhi	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8192 	beq.w	80013f4 <o1heapAllocate+0x38c>
    {
        // Add the header size and align the allocation size to the power of 2.
        // See "Timing-Predictable Memory Allocation In Hard Real-Time Systems", Herter, page 27.
        const size_t fragment_size = pow2(log2Ceil(amount + O1HEAP_ALIGNMENT));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	3310      	adds	r3, #16
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fd83 	bl	8000be0 <log2Ceil>
 80010da:	4603      	mov	r3, r0
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fd95 	bl	8000c0c <pow2>
 80010e2:	62b8      	str	r0, [r7, #40]	; 0x28
        O1HEAP_ASSERT(fragment_size <= FRAGMENT_SIZE_MAX);
 80010e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80010ea:	d906      	bls.n	80010fa <o1heapAllocate+0x92>
 80010ec:	4b92      	ldr	r3, [pc, #584]	; (8001338 <o1heapAllocate+0x2d0>)
 80010ee:	4a8f      	ldr	r2, [pc, #572]	; (800132c <o1heapAllocate+0x2c4>)
 80010f0:	f240 1131 	movw	r1, #305	; 0x131
 80010f4:	488e      	ldr	r0, [pc, #568]	; (8001330 <o1heapAllocate+0x2c8>)
 80010f6:	f004 fc85 	bl	8005a04 <__assert_func>
        O1HEAP_ASSERT(fragment_size >= FRAGMENT_SIZE_MIN);
 80010fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fc:	2b1f      	cmp	r3, #31
 80010fe:	d806      	bhi.n	800110e <o1heapAllocate+0xa6>
 8001100:	4b8e      	ldr	r3, [pc, #568]	; (800133c <o1heapAllocate+0x2d4>)
 8001102:	4a8a      	ldr	r2, [pc, #552]	; (800132c <o1heapAllocate+0x2c4>)
 8001104:	f44f 7199 	mov.w	r1, #306	; 0x132
 8001108:	4889      	ldr	r0, [pc, #548]	; (8001330 <o1heapAllocate+0x2c8>)
 800110a:	f004 fc7b 	bl	8005a04 <__assert_func>
        O1HEAP_ASSERT(fragment_size >= amount + O1HEAP_ALIGNMENT);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	3310      	adds	r3, #16
 8001112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001114:	429a      	cmp	r2, r3
 8001116:	d206      	bcs.n	8001126 <o1heapAllocate+0xbe>
 8001118:	4b89      	ldr	r3, [pc, #548]	; (8001340 <o1heapAllocate+0x2d8>)
 800111a:	4a84      	ldr	r2, [pc, #528]	; (800132c <o1heapAllocate+0x2c4>)
 800111c:	f240 1133 	movw	r1, #307	; 0x133
 8001120:	4883      	ldr	r0, [pc, #524]	; (8001330 <o1heapAllocate+0x2c8>)
 8001122:	f004 fc6f 	bl	8005a04 <__assert_func>
        O1HEAP_ASSERT(isPowerOf2(fragment_size));
 8001126:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001128:	f7ff fd2e 	bl	8000b88 <isPowerOf2>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d106      	bne.n	8001140 <o1heapAllocate+0xd8>
 8001132:	4b84      	ldr	r3, [pc, #528]	; (8001344 <o1heapAllocate+0x2dc>)
 8001134:	4a7d      	ldr	r2, [pc, #500]	; (800132c <o1heapAllocate+0x2c4>)
 8001136:	f44f 719a 	mov.w	r1, #308	; 0x134
 800113a:	487d      	ldr	r0, [pc, #500]	; (8001330 <o1heapAllocate+0x2c8>)
 800113c:	f004 fc62 	bl	8005a04 <__assert_func>

        const uint8_t optimal_bin_index = log2Ceil(fragment_size / FRAGMENT_SIZE_MIN);  // Use CEIL when fetching.
 8001140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fd4b 	bl	8000be0 <log2Ceil>
 800114a:	4603      	mov	r3, r0
 800114c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        O1HEAP_ASSERT(optimal_bin_index < NUM_BINS_MAX);
 8001150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001154:	2b1f      	cmp	r3, #31
 8001156:	d906      	bls.n	8001166 <o1heapAllocate+0xfe>
 8001158:	4b7b      	ldr	r3, [pc, #492]	; (8001348 <o1heapAllocate+0x2e0>)
 800115a:	4a74      	ldr	r2, [pc, #464]	; (800132c <o1heapAllocate+0x2c4>)
 800115c:	f240 1137 	movw	r1, #311	; 0x137
 8001160:	4873      	ldr	r0, [pc, #460]	; (8001330 <o1heapAllocate+0x2c8>)
 8001162:	f004 fc4f 	bl	8005a04 <__assert_func>
        const size_t candidate_bin_mask = ~(pow2(optimal_bin_index) - 1U);
 8001166:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fd4e 	bl	8000c0c <pow2>
 8001170:	4603      	mov	r3, r0
 8001172:	3b01      	subs	r3, #1
 8001174:	43db      	mvns	r3, r3
 8001176:	623b      	str	r3, [r7, #32]

        invoke(handle->critical_section_enter);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fd53 	bl	8000c2a <invoke>

        // Find the smallest non-empty bin we can use.
        const size_t suitable_bins     = handle->nonempty_bin_mask & candidate_bin_mask;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800118a:	6a3a      	ldr	r2, [r7, #32]
 800118c:	4013      	ands	r3, r2
 800118e:	61fb      	str	r3, [r7, #28]
        const size_t smallest_bin_mask = suitable_bins & ~(suitable_bins - 1U);  // Clear all bits but the lowest.
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	425b      	negs	r3, r3
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if (O1HEAP_LIKELY(smallest_bin_mask != 0))
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	bf14      	ite	ne
 80011a0:	2301      	movne	r3, #1
 80011a2:	2300      	moveq	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f000 812b 	beq.w	8001402 <o1heapAllocate+0x39a>
        {
            O1HEAP_ASSERT(isPowerOf2(smallest_bin_mask));
 80011ac:	69b8      	ldr	r0, [r7, #24]
 80011ae:	f7ff fceb 	bl	8000b88 <isPowerOf2>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d106      	bne.n	80011c6 <o1heapAllocate+0x15e>
 80011b8:	4b64      	ldr	r3, [pc, #400]	; (800134c <o1heapAllocate+0x2e4>)
 80011ba:	4a5c      	ldr	r2, [pc, #368]	; (800132c <o1heapAllocate+0x2c4>)
 80011bc:	f240 1141 	movw	r1, #321	; 0x141
 80011c0:	485b      	ldr	r0, [pc, #364]	; (8001330 <o1heapAllocate+0x2c8>)
 80011c2:	f004 fc1f 	bl	8005a04 <__assert_func>
            const uint8_t bin_index = log2Floor(smallest_bin_mask);
 80011c6:	69b8      	ldr	r0, [r7, #24]
 80011c8:	f7ff fcf1 	bl	8000bae <log2Floor>
 80011cc:	4603      	mov	r3, r0
 80011ce:	75fb      	strb	r3, [r7, #23]
            O1HEAP_ASSERT(bin_index >= optimal_bin_index);
 80011d0:	7dfa      	ldrb	r2, [r7, #23]
 80011d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d206      	bcs.n	80011e8 <o1heapAllocate+0x180>
 80011da:	4b5d      	ldr	r3, [pc, #372]	; (8001350 <o1heapAllocate+0x2e8>)
 80011dc:	4a53      	ldr	r2, [pc, #332]	; (800132c <o1heapAllocate+0x2c4>)
 80011de:	f240 1143 	movw	r1, #323	; 0x143
 80011e2:	4853      	ldr	r0, [pc, #332]	; (8001330 <o1heapAllocate+0x2c8>)
 80011e4:	f004 fc0e 	bl	8005a04 <__assert_func>
            O1HEAP_ASSERT(bin_index < NUM_BINS_MAX);
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	2b1f      	cmp	r3, #31
 80011ec:	d906      	bls.n	80011fc <o1heapAllocate+0x194>
 80011ee:	4b59      	ldr	r3, [pc, #356]	; (8001354 <o1heapAllocate+0x2ec>)
 80011f0:	4a4e      	ldr	r2, [pc, #312]	; (800132c <o1heapAllocate+0x2c4>)
 80011f2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80011f6:	484e      	ldr	r0, [pc, #312]	; (8001330 <o1heapAllocate+0x2c8>)
 80011f8:	f004 fc04 	bl	8005a04 <__assert_func>

            // The bin we found shall not be empty, otherwise it's a state divergence (memory corruption?).
            Fragment* const frag = handle->bins[bin_index];
 80011fc:	7dfa      	ldrb	r2, [r7, #23]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001204:	613b      	str	r3, [r7, #16]
            O1HEAP_ASSERT(frag != NULL);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d106      	bne.n	800121a <o1heapAllocate+0x1b2>
 800120c:	4b52      	ldr	r3, [pc, #328]	; (8001358 <o1heapAllocate+0x2f0>)
 800120e:	4a47      	ldr	r2, [pc, #284]	; (800132c <o1heapAllocate+0x2c4>)
 8001210:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8001214:	4846      	ldr	r0, [pc, #280]	; (8001330 <o1heapAllocate+0x2c8>)
 8001216:	f004 fbf5 	bl	8005a04 <__assert_func>
            O1HEAP_ASSERT(frag->header.size >= fragment_size);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001220:	429a      	cmp	r2, r3
 8001222:	d906      	bls.n	8001232 <o1heapAllocate+0x1ca>
 8001224:	4b4d      	ldr	r3, [pc, #308]	; (800135c <o1heapAllocate+0x2f4>)
 8001226:	4a41      	ldr	r2, [pc, #260]	; (800132c <o1heapAllocate+0x2c4>)
 8001228:	f240 1149 	movw	r1, #329	; 0x149
 800122c:	4840      	ldr	r0, [pc, #256]	; (8001330 <o1heapAllocate+0x2c8>)
 800122e:	f004 fbe9 	bl	8005a04 <__assert_func>
            O1HEAP_ASSERT((frag->header.size % FRAGMENT_SIZE_MIN) == 0U);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 031f 	and.w	r3, r3, #31
 800123a:	2b00      	cmp	r3, #0
 800123c:	d006      	beq.n	800124c <o1heapAllocate+0x1e4>
 800123e:	4b48      	ldr	r3, [pc, #288]	; (8001360 <o1heapAllocate+0x2f8>)
 8001240:	4a3a      	ldr	r2, [pc, #232]	; (800132c <o1heapAllocate+0x2c4>)
 8001242:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8001246:	483a      	ldr	r0, [pc, #232]	; (8001330 <o1heapAllocate+0x2c8>)
 8001248:	f004 fbdc 	bl	8005a04 <__assert_func>
            O1HEAP_ASSERT(!frag->header.used);
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	7b1b      	ldrb	r3, [r3, #12]
 8001250:	f083 0301 	eor.w	r3, r3, #1
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d106      	bne.n	8001268 <o1heapAllocate+0x200>
 800125a:	4b42      	ldr	r3, [pc, #264]	; (8001364 <o1heapAllocate+0x2fc>)
 800125c:	4a33      	ldr	r2, [pc, #204]	; (800132c <o1heapAllocate+0x2c4>)
 800125e:	f240 114b 	movw	r1, #331	; 0x14b
 8001262:	4833      	ldr	r0, [pc, #204]	; (8001330 <o1heapAllocate+0x2c8>)
 8001264:	f004 fbce 	bl	8005a04 <__assert_func>
            unbin(handle, frag);
 8001268:	6939      	ldr	r1, [r7, #16]
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fd88 	bl	8000d80 <unbin>

            // Split the fragment if it is too large.
            const size_t leftover = frag->header.size - fragment_size;
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	60fb      	str	r3, [r7, #12]
            frag->header.size     = fragment_size;
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800127e:	609a      	str	r2, [r3, #8]
            O1HEAP_ASSERT(leftover < handle->diagnostics.capacity);  // Overflow check.
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	429a      	cmp	r2, r3
 800128a:	d306      	bcc.n	800129a <o1heapAllocate+0x232>
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <o1heapAllocate+0x300>)
 800128e:	4a27      	ldr	r2, [pc, #156]	; (800132c <o1heapAllocate+0x2c4>)
 8001290:	f240 1151 	movw	r1, #337	; 0x151
 8001294:	4826      	ldr	r0, [pc, #152]	; (8001330 <o1heapAllocate+0x2c8>)
 8001296:	f004 fbb5 	bl	8005a04 <__assert_func>
            O1HEAP_ASSERT(leftover % FRAGMENT_SIZE_MIN == 0U);       // Alignment check.
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <o1heapAllocate+0x24a>
 80012a4:	4b31      	ldr	r3, [pc, #196]	; (800136c <o1heapAllocate+0x304>)
 80012a6:	4a21      	ldr	r2, [pc, #132]	; (800132c <o1heapAllocate+0x2c4>)
 80012a8:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80012ac:	4820      	ldr	r0, [pc, #128]	; (8001330 <o1heapAllocate+0x2c8>)
 80012ae:	f004 fba9 	bl	8005a04 <__assert_func>
            if (O1HEAP_LIKELY(leftover >= FRAGMENT_SIZE_MIN))
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2b1f      	cmp	r3, #31
 80012b6:	bf8c      	ite	hi
 80012b8:	2301      	movhi	r3, #1
 80012ba:	2300      	movls	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d023      	beq.n	800130a <o1heapAllocate+0x2a2>
            {
                Fragment* const new_frag = (Fragment*) (void*) (((uint8_t*) frag) + fragment_size);
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c6:	4413      	add	r3, r2
 80012c8:	60bb      	str	r3, [r7, #8]
                O1HEAP_ASSERT(((size_t) new_frag) % O1HEAP_ALIGNMENT == 0U);
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <o1heapAllocate+0x27a>
 80012d4:	4b26      	ldr	r3, [pc, #152]	; (8001370 <o1heapAllocate+0x308>)
 80012d6:	4a15      	ldr	r2, [pc, #84]	; (800132c <o1heapAllocate+0x2c4>)
 80012d8:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80012dc:	4814      	ldr	r0, [pc, #80]	; (8001330 <o1heapAllocate+0x2c8>)
 80012de:	f004 fb91 	bl	8005a04 <__assert_func>
                new_frag->header.size = leftover;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	609a      	str	r2, [r3, #8]
                new_frag->header.used = false;
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2200      	movs	r2, #0
 80012ec:	731a      	strb	r2, [r3, #12]
                interlink(new_frag, frag->header.next);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4619      	mov	r1, r3
 80012f4:	68b8      	ldr	r0, [r7, #8]
 80012f6:	f7ff fca5 	bl	8000c44 <interlink>
                interlink(frag, new_frag);
 80012fa:	68b9      	ldr	r1, [r7, #8]
 80012fc:	6938      	ldr	r0, [r7, #16]
 80012fe:	f7ff fca1 	bl	8000c44 <interlink>
                rebin(handle, new_frag);
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fcbf 	bl	8000c88 <rebin>
            }

            // Update the diagnostics.
            O1HEAP_ASSERT((handle->diagnostics.allocated % FRAGMENT_SIZE_MIN) == 0U);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	2b00      	cmp	r3, #0
 8001316:	d02f      	beq.n	8001378 <o1heapAllocate+0x310>
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <o1heapAllocate+0x30c>)
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <o1heapAllocate+0x2c4>)
 800131c:	f240 115f 	movw	r1, #351	; 0x15f
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <o1heapAllocate+0x2c8>)
 8001322:	f004 fb6f 	bl	8005a04 <__assert_func>
 8001326:	bf00      	nop
 8001328:	08006ab4 	.word	0x08006ab4
 800132c:	08007580 	.word	0x08007580
 8001330:	08006acc 	.word	0x08006acc
 8001334:	08006cc8 	.word	0x08006cc8
 8001338:	08006d08 	.word	0x08006d08
 800133c:	08006d38 	.word	0x08006d38
 8001340:	08006d68 	.word	0x08006d68
 8001344:	08006d98 	.word	0x08006d98
 8001348:	08006db4 	.word	0x08006db4
 800134c:	08006de0 	.word	0x08006de0
 8001350:	08006e00 	.word	0x08006e00
 8001354:	08006e20 	.word	0x08006e20
 8001358:	08006e44 	.word	0x08006e44
 800135c:	08006e58 	.word	0x08006e58
 8001360:	08006e7c 	.word	0x08006e7c
 8001364:	08006eb4 	.word	0x08006eb4
 8001368:	08006ec8 	.word	0x08006ec8
 800136c:	08006ef0 	.word	0x08006ef0
 8001370:	08006f20 	.word	0x08006f20
 8001374:	08006f54 	.word	0x08006f54
            handle->diagnostics.allocated += fragment_size;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800137e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001380:	441a      	add	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            O1HEAP_ASSERT(handle->diagnostics.allocated <= handle->diagnostics.capacity);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001394:	429a      	cmp	r2, r3
 8001396:	d906      	bls.n	80013a6 <o1heapAllocate+0x33e>
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <o1heapAllocate+0x404>)
 800139a:	4a35      	ldr	r2, [pc, #212]	; (8001470 <o1heapAllocate+0x408>)
 800139c:	f240 1161 	movw	r1, #353	; 0x161
 80013a0:	4834      	ldr	r0, [pc, #208]	; (8001474 <o1heapAllocate+0x40c>)
 80013a2:	f004 fb2f 	bl	8005a04 <__assert_func>
            if (O1HEAP_LIKELY(handle->diagnostics.peak_allocated < handle->diagnostics.allocated))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b2:	429a      	cmp	r2, r3
 80013b4:	bf34      	ite	cc
 80013b6:	2301      	movcc	r3, #1
 80013b8:	2300      	movcs	r3, #0
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <o1heapAllocate+0x364>
            {
                handle->diagnostics.peak_allocated = handle->diagnostics.allocated;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            }

            // Finalize the fragment we just allocated.
            O1HEAP_ASSERT(frag->header.size >= amount + O1HEAP_ALIGNMENT);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	3310      	adds	r3, #16
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d206      	bcs.n	80013e6 <o1heapAllocate+0x37e>
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <o1heapAllocate+0x410>)
 80013da:	4a25      	ldr	r2, [pc, #148]	; (8001470 <o1heapAllocate+0x408>)
 80013dc:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80013e0:	4824      	ldr	r0, [pc, #144]	; (8001474 <o1heapAllocate+0x40c>)
 80013e2:	f004 fb0f 	bl	8005a04 <__assert_func>
            frag->header.used = true;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	2201      	movs	r2, #1
 80013ea:	731a      	strb	r2, [r3, #12]

            out = ((uint8_t*) frag) + O1HEAP_ALIGNMENT;
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	3310      	adds	r3, #16
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
 80013f2:	e006      	b.n	8001402 <o1heapAllocate+0x39a>
        }
    }
    else
    {
        invoke(handle->critical_section_enter);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fc15 	bl	8000c2a <invoke>
 8001400:	e000      	b.n	8001404 <o1heapAllocate+0x39c>
    {
 8001402:	bf00      	nop
    }

    // Update the diagnostics.
    if (O1HEAP_LIKELY(handle->diagnostics.peak_request_size < amount))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	429a      	cmp	r2, r3
 800140e:	bf8c      	ite	hi
 8001410:	2301      	movhi	r3, #1
 8001412:	2300      	movls	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <o1heapAllocate+0x3ba>
    {
        handle->diagnostics.peak_request_size = amount;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
    if (O1HEAP_LIKELY((out == NULL) && (amount > 0U)))
 8001422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf0c      	ite	eq
 8001428:	2301      	moveq	r3, #1
 800142a:	2300      	movne	r3, #0
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d010      	beq.n	8001454 <o1heapAllocate+0x3ec>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf14      	ite	ne
 8001438:	2301      	movne	r3, #1
 800143a:	2300      	moveq	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d008      	beq.n	8001454 <o1heapAllocate+0x3ec>
    {
        handle->diagnostics.oom_count++;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	e9d3 1228 	ldrd	r1, r2, [r3, #160]	; 0xa0
 8001448:	1c4b      	adds	r3, r1, #1
 800144a:	f142 0400 	adc.w	r4, r2, #0
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
    }

    invoke(handle->critical_section_leave);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fbe5 	bl	8000c2a <invoke>
    return out;
 8001460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001462:	4618      	mov	r0, r3
 8001464:	3734      	adds	r7, #52	; 0x34
 8001466:	46bd      	mov	sp, r7
 8001468:	bd90      	pop	{r4, r7, pc}
 800146a:	bf00      	nop
 800146c:	08006f98 	.word	0x08006f98
 8001470:	08007580 	.word	0x08007580
 8001474:	08006acc 	.word	0x08006acc
 8001478:	08006fd8 	.word	0x08006fd8

0800147c <o1heapFree>:

void o1heapFree(O1HeapInstance* const handle, void* const pointer)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
    O1HEAP_ASSERT(handle != NULL);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d106      	bne.n	800149a <o1heapFree+0x1e>
 800148c:	4b9d      	ldr	r3, [pc, #628]	; (8001704 <o1heapFree+0x288>)
 800148e:	4a9e      	ldr	r2, [pc, #632]	; (8001708 <o1heapFree+0x28c>)
 8001490:	f240 1183 	movw	r1, #387	; 0x183
 8001494:	489d      	ldr	r0, [pc, #628]	; (800170c <o1heapFree+0x290>)
 8001496:	f004 fab5 	bl	8005a04 <__assert_func>
    O1HEAP_ASSERT(handle->diagnostics.capacity <= FRAGMENT_SIZE_MAX);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014a4:	d906      	bls.n	80014b4 <o1heapFree+0x38>
 80014a6:	4b9a      	ldr	r3, [pc, #616]	; (8001710 <o1heapFree+0x294>)
 80014a8:	4a97      	ldr	r2, [pc, #604]	; (8001708 <o1heapFree+0x28c>)
 80014aa:	f44f 71c2 	mov.w	r1, #388	; 0x184
 80014ae:	4897      	ldr	r0, [pc, #604]	; (800170c <o1heapFree+0x290>)
 80014b0:	f004 faa8 	bl	8005a04 <__assert_func>
    if (O1HEAP_LIKELY(pointer != NULL))  // NULL pointer is a no-op.
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	bf14      	ite	ne
 80014ba:	2301      	movne	r3, #1
 80014bc:	2300      	moveq	r3, #0
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 8170 	beq.w	80017a6 <o1heapFree+0x32a>
    {
        Fragment* const frag = (Fragment*) (void*) (((uint8_t*) pointer) - O1HEAP_ALIGNMENT);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	3b10      	subs	r3, #16
 80014ca:	617b      	str	r3, [r7, #20]

        // Check for heap corruption in debug builds.
        O1HEAP_ASSERT(((size_t) frag) % sizeof(Fragment*) == 0U);
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <o1heapFree+0x68>
 80014d6:	4b8f      	ldr	r3, [pc, #572]	; (8001714 <o1heapFree+0x298>)
 80014d8:	4a8b      	ldr	r2, [pc, #556]	; (8001708 <o1heapFree+0x28c>)
 80014da:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 80014de:	488b      	ldr	r0, [pc, #556]	; (800170c <o1heapFree+0x290>)
 80014e0:	f004 fa90 	bl	8005a04 <__assert_func>
        O1HEAP_ASSERT(((size_t) frag) >= (((size_t) handle) + INSTANCE_SIZE_PADDED));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d906      	bls.n	80014fe <o1heapFree+0x82>
 80014f0:	4b89      	ldr	r3, [pc, #548]	; (8001718 <o1heapFree+0x29c>)
 80014f2:	4a85      	ldr	r2, [pc, #532]	; (8001708 <o1heapFree+0x28c>)
 80014f4:	f240 118b 	movw	r1, #395	; 0x18b
 80014f8:	4884      	ldr	r0, [pc, #528]	; (800170c <o1heapFree+0x290>)
 80014fa:	f004 fa83 	bl	8005a04 <__assert_func>
        O1HEAP_ASSERT(((size_t) frag) <=
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4413      	add	r3, r2
 8001508:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	429a      	cmp	r2, r3
 8001510:	d206      	bcs.n	8001520 <o1heapFree+0xa4>
 8001512:	4b82      	ldr	r3, [pc, #520]	; (800171c <o1heapFree+0x2a0>)
 8001514:	4a7c      	ldr	r2, [pc, #496]	; (8001708 <o1heapFree+0x28c>)
 8001516:	f240 118d 	movw	r1, #397	; 0x18d
 800151a:	487c      	ldr	r0, [pc, #496]	; (800170c <o1heapFree+0x290>)
 800151c:	f004 fa72 	bl	8005a04 <__assert_func>
                      (((size_t) handle) + INSTANCE_SIZE_PADDED + handle->diagnostics.capacity - FRAGMENT_SIZE_MIN));
        O1HEAP_ASSERT(frag->header.used);  // Catch double-free
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	7b1b      	ldrb	r3, [r3, #12]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d106      	bne.n	8001536 <o1heapFree+0xba>
 8001528:	4b7d      	ldr	r3, [pc, #500]	; (8001720 <o1heapFree+0x2a4>)
 800152a:	4a77      	ldr	r2, [pc, #476]	; (8001708 <o1heapFree+0x28c>)
 800152c:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 8001530:	4876      	ldr	r0, [pc, #472]	; (800170c <o1heapFree+0x290>)
 8001532:	f004 fa67 	bl	8005a04 <__assert_func>
        O1HEAP_ASSERT(((size_t) frag->header.next) % sizeof(Fragment*) == 0U);
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d006      	beq.n	8001550 <o1heapFree+0xd4>
 8001542:	4b78      	ldr	r3, [pc, #480]	; (8001724 <o1heapFree+0x2a8>)
 8001544:	4a70      	ldr	r2, [pc, #448]	; (8001708 <o1heapFree+0x28c>)
 8001546:	f240 118f 	movw	r1, #399	; 0x18f
 800154a:	4870      	ldr	r0, [pc, #448]	; (800170c <o1heapFree+0x290>)
 800154c:	f004 fa5a 	bl	8005a04 <__assert_func>
        O1HEAP_ASSERT(((size_t) frag->header.prev) % sizeof(Fragment*) == 0U);
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <o1heapFree+0xee>
 800155c:	4b72      	ldr	r3, [pc, #456]	; (8001728 <o1heapFree+0x2ac>)
 800155e:	4a6a      	ldr	r2, [pc, #424]	; (8001708 <o1heapFree+0x28c>)
 8001560:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001564:	4869      	ldr	r0, [pc, #420]	; (800170c <o1heapFree+0x290>)
 8001566:	f004 fa4d 	bl	8005a04 <__assert_func>
        O1HEAP_ASSERT(frag->header.size >= FRAGMENT_SIZE_MIN);
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b1f      	cmp	r3, #31
 8001570:	d806      	bhi.n	8001580 <o1heapFree+0x104>
 8001572:	4b6e      	ldr	r3, [pc, #440]	; (800172c <o1heapFree+0x2b0>)
 8001574:	4a64      	ldr	r2, [pc, #400]	; (8001708 <o1heapFree+0x28c>)
 8001576:	f240 1191 	movw	r1, #401	; 0x191
 800157a:	4864      	ldr	r0, [pc, #400]	; (800170c <o1heapFree+0x290>)
 800157c:	f004 fa42 	bl	8005a04 <__assert_func>
        O1HEAP_ASSERT(frag->header.size <= handle->diagnostics.capacity);
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158a:	429a      	cmp	r2, r3
 800158c:	d906      	bls.n	800159c <o1heapFree+0x120>
 800158e:	4b68      	ldr	r3, [pc, #416]	; (8001730 <o1heapFree+0x2b4>)
 8001590:	4a5d      	ldr	r2, [pc, #372]	; (8001708 <o1heapFree+0x28c>)
 8001592:	f44f 71c9 	mov.w	r1, #402	; 0x192
 8001596:	485d      	ldr	r0, [pc, #372]	; (800170c <o1heapFree+0x290>)
 8001598:	f004 fa34 	bl	8005a04 <__assert_func>
        O1HEAP_ASSERT((frag->header.size % FRAGMENT_SIZE_MIN) == 0U);
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 031f 	and.w	r3, r3, #31
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <o1heapFree+0x13a>
 80015a8:	4b62      	ldr	r3, [pc, #392]	; (8001734 <o1heapFree+0x2b8>)
 80015aa:	4a57      	ldr	r2, [pc, #348]	; (8001708 <o1heapFree+0x28c>)
 80015ac:	f240 1193 	movw	r1, #403	; 0x193
 80015b0:	4856      	ldr	r0, [pc, #344]	; (800170c <o1heapFree+0x290>)
 80015b2:	f004 fa27 	bl	8005a04 <__assert_func>

        invoke(handle->critical_section_enter);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fb34 	bl	8000c2a <invoke>

        // Even if we're going to drop the fragment later, mark it free anyway to prevent double-free.
        frag->header.used = false;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2200      	movs	r2, #0
 80015c6:	731a      	strb	r2, [r3, #12]

        // Update the diagnostics. It must be done before merging because it invalidates the fragment size information.
        O1HEAP_ASSERT(handle->diagnostics.allocated >= frag->header.size);  // Heap corruption check.
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d206      	bcs.n	80015e4 <o1heapFree+0x168>
 80015d6:	4b58      	ldr	r3, [pc, #352]	; (8001738 <o1heapFree+0x2bc>)
 80015d8:	4a4b      	ldr	r2, [pc, #300]	; (8001708 <o1heapFree+0x28c>)
 80015da:	f240 119b 	movw	r1, #411	; 0x19b
 80015de:	484b      	ldr	r0, [pc, #300]	; (800170c <o1heapFree+0x290>)
 80015e0:	f004 fa10 	bl	8005a04 <__assert_func>
        handle->diagnostics.allocated -= frag->header.size;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	1ad2      	subs	r2, r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        // Merge with siblings and insert the returned fragment into the appropriate bin and update metadata.
        Fragment* const prev       = frag->header.prev;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	613b      	str	r3, [r7, #16]
        Fragment* const next       = frag->header.next;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
        const bool      join_left  = (prev != NULL) && (!prev->header.used);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <o1heapFree+0x19e>
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	7b1b      	ldrb	r3, [r3, #12]
 800160c:	f083 0301 	eor.w	r3, r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <o1heapFree+0x19e>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <o1heapFree+0x1a0>
 800161a:	2300      	movs	r3, #0
 800161c:	72fb      	strb	r3, [r7, #11]
 800161e:	7afb      	ldrb	r3, [r7, #11]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	72fb      	strb	r3, [r7, #11]
        const bool      join_right = (next != NULL) && (!next->header.used);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d008      	beq.n	800163e <o1heapFree+0x1c2>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	7b1b      	ldrb	r3, [r3, #12]
 8001630:	f083 0301 	eor.w	r3, r3, #1
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <o1heapFree+0x1c2>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <o1heapFree+0x1c4>
 800163e:	2300      	movs	r3, #0
 8001640:	72bb      	strb	r3, [r7, #10]
 8001642:	7abb      	ldrb	r3, [r7, #10]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	72bb      	strb	r3, [r7, #10]
        if (join_left && join_right)  // [ prev ][ this ][ next ] => [ ------- prev ------- ]
 800164a:	7afb      	ldrb	r3, [r7, #11]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d032      	beq.n	80016b6 <o1heapFree+0x23a>
 8001650:	7abb      	ldrb	r3, [r7, #10]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d02f      	beq.n	80016b6 <o1heapFree+0x23a>
        {
            unbin(handle, prev);
 8001656:	6939      	ldr	r1, [r7, #16]
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fb91 	bl	8000d80 <unbin>
            unbin(handle, next);
 800165e:	68f9      	ldr	r1, [r7, #12]
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff fb8d 	bl	8000d80 <unbin>
            prev->header.size += frag->header.size + next->header.size;
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	6899      	ldr	r1, [r3, #8]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	440b      	add	r3, r1
 8001674:	441a      	add	r2, r3
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	609a      	str	r2, [r3, #8]
            frag->header.size = 0;  // Invalidate the dropped fragment headers to prevent double-free.
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
            next->header.size = 0;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
            O1HEAP_ASSERT((prev->header.size % FRAGMENT_SIZE_MIN) == 0U);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 031f 	and.w	r3, r3, #31
 800168e:	2b00      	cmp	r3, #0
 8001690:	d006      	beq.n	80016a0 <o1heapFree+0x224>
 8001692:	4b2a      	ldr	r3, [pc, #168]	; (800173c <o1heapFree+0x2c0>)
 8001694:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <o1heapFree+0x28c>)
 8001696:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800169a:	481c      	ldr	r0, [pc, #112]	; (800170c <o1heapFree+0x290>)
 800169c:	f004 f9b2 	bl	8005a04 <__assert_func>
            interlink(prev, next->header.next);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4619      	mov	r1, r3
 80016a6:	6938      	ldr	r0, [r7, #16]
 80016a8:	f7ff facc 	bl	8000c44 <interlink>
            rebin(handle, prev);
 80016ac:	6939      	ldr	r1, [r7, #16]
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff faea 	bl	8000c88 <rebin>
 80016b4:	e071      	b.n	800179a <o1heapFree+0x31e>
        }
        else if (join_left)  // [ prev ][ this ][ next ] => [ --- prev --- ][ next ]
 80016b6:	7afb      	ldrb	r3, [r7, #11]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d041      	beq.n	8001740 <o1heapFree+0x2c4>
        {
            unbin(handle, prev);
 80016bc:	6939      	ldr	r1, [r7, #16]
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fb5e 	bl	8000d80 <unbin>
            prev->header.size += frag->header.size;
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	441a      	add	r2, r3
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	609a      	str	r2, [r3, #8]
            frag->header.size = 0;
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
            O1HEAP_ASSERT((prev->header.size % FRAGMENT_SIZE_MIN) == 0U);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 031f 	and.w	r3, r3, #31
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <o1heapFree+0x276>
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <o1heapFree+0x2c0>)
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <o1heapFree+0x28c>)
 80016e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80016ec:	4807      	ldr	r0, [pc, #28]	; (800170c <o1heapFree+0x290>)
 80016ee:	f004 f989 	bl	8005a04 <__assert_func>
            interlink(prev, next);
 80016f2:	68f9      	ldr	r1, [r7, #12]
 80016f4:	6938      	ldr	r0, [r7, #16]
 80016f6:	f7ff faa5 	bl	8000c44 <interlink>
            rebin(handle, prev);
 80016fa:	6939      	ldr	r1, [r7, #16]
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fac3 	bl	8000c88 <rebin>
 8001702:	e04a      	b.n	800179a <o1heapFree+0x31e>
 8001704:	08006ab4 	.word	0x08006ab4
 8001708:	08007598 	.word	0x08007598
 800170c:	08006acc 	.word	0x08006acc
 8001710:	08006cc8 	.word	0x08006cc8
 8001714:	0800700c 	.word	0x0800700c
 8001718:	08007038 	.word	0x08007038
 800171c:	080070b8 	.word	0x080070b8
 8001720:	08007174 	.word	0x08007174
 8001724:	08007188 	.word	0x08007188
 8001728:	080071c0 	.word	0x080071c0
 800172c:	080071f8 	.word	0x080071f8
 8001730:	0800722c 	.word	0x0800722c
 8001734:	08006e7c 	.word	0x08006e7c
 8001738:	08007260 	.word	0x08007260
 800173c:	08007294 	.word	0x08007294
        }
        else if (join_right)  // [ prev ][ this ][ next ] => [ prev ][ --- this --- ]
 8001740:	7abb      	ldrb	r3, [r7, #10]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d025      	beq.n	8001792 <o1heapFree+0x316>
        {
            unbin(handle, next);
 8001746:	68f9      	ldr	r1, [r7, #12]
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fb19 	bl	8000d80 <unbin>
            frag->header.size += next->header.size;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	441a      	add	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	609a      	str	r2, [r3, #8]
            next->header.size = 0;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
            O1HEAP_ASSERT((frag->header.size % FRAGMENT_SIZE_MIN) == 0U);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <o1heapFree+0x300>
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <o1heapFree+0x334>)
 8001770:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <o1heapFree+0x338>)
 8001772:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001776:	4810      	ldr	r0, [pc, #64]	; (80017b8 <o1heapFree+0x33c>)
 8001778:	f004 f944 	bl	8005a04 <__assert_func>
            interlink(frag, next->header.next);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	6978      	ldr	r0, [r7, #20]
 8001784:	f7ff fa5e 	bl	8000c44 <interlink>
            rebin(handle, frag);
 8001788:	6979      	ldr	r1, [r7, #20]
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff fa7c 	bl	8000c88 <rebin>
 8001790:	e003      	b.n	800179a <o1heapFree+0x31e>
        }
        else
        {
            rebin(handle, frag);
 8001792:	6979      	ldr	r1, [r7, #20]
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fa77 	bl	8000c88 <rebin>
        }

        invoke(handle->critical_section_leave);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fa42 	bl	8000c2a <invoke>
    }
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	08006e7c 	.word	0x08006e7c
 80017b4:	08007598 	.word	0x08007598
 80017b8:	08006acc 	.word	0x08006acc

080017bc <g_payload_init>:
uint32_t photo = 0;

static void send_can_msg_to_drone(void);

void g_payload_init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
	g_o1heap_init();
 80017c0:	f000 fc5e 	bl	8002080 <g_o1heap_init>
	g_queue_init(&can_msg_queue);
 80017c4:	480b      	ldr	r0, [pc, #44]	; (80017f4 <g_payload_init+0x38>)
 80017c6:	f000 fc6d 	bl	80020a4 <g_queue_init>

	drone_can_msg_head.StdId = DEVICE_ID;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <g_payload_init+0x3c>)
 80017cc:	f240 4201 	movw	r2, #1025	; 0x401
 80017d0:	601a      	str	r2, [r3, #0]
	drone_can_msg_head.ExtId = 0;
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <g_payload_init+0x3c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	605a      	str	r2, [r3, #4]
	drone_can_msg_head.IDE = CAN_ID_STD;
 80017d8:	4b07      	ldr	r3, [pc, #28]	; (80017f8 <g_payload_init+0x3c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
	drone_can_msg_head.RTR = CAN_RTR_DATA;
 80017de:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <g_payload_init+0x3c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
	drone_can_msg_head.DLC = 8;
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <g_payload_init+0x3c>)
 80017e6:	2208      	movs	r2, #8
 80017e8:	611a      	str	r2, [r3, #16]
	drone_can_msg_head.TransmitGlobalTime = DISABLE;
 80017ea:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <g_payload_init+0x3c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	751a      	strb	r2, [r3, #20]
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20001790 	.word	0x20001790
 80017f8:	2000166c 	.word	0x2000166c

080017fc <g_send_to_drone>:

void g_send_to_drone(void *addr, uint8_t len)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	70fb      	strb	r3, [r7, #3]
	can_msg_t msg_to_drone;
	uint8_t i, j, pack_count, remain_byte;
	pack_count = len / 8;
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	08db      	lsrs	r3, r3, #3
 800180c:	777b      	strb	r3, [r7, #29]
	remain_byte = len % 8;
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	773b      	strb	r3, [r7, #28]

	for (j = 0; j < pack_count; j++)
 8001816:	2300      	movs	r3, #0
 8001818:	77bb      	strb	r3, [r7, #30]
 800181a:	e021      	b.n	8001860 <g_send_to_drone+0x64>
	{
		for (i = 0; i < 8; i++)
 800181c:	2300      	movs	r3, #0
 800181e:	77fb      	strb	r3, [r7, #31]
 8001820:	e010      	b.n	8001844 <g_send_to_drone+0x48>
		{
			msg_to_drone.data[i] = ((uint8_t*) addr)[j * 8 + i];
 8001822:	7fbb      	ldrb	r3, [r7, #30]
 8001824:	00da      	lsls	r2, r3, #3
 8001826:	7ffb      	ldrb	r3, [r7, #31]
 8001828:	4413      	add	r3, r2
 800182a:	461a      	mov	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	441a      	add	r2, r3
 8001830:	7ffb      	ldrb	r3, [r7, #31]
 8001832:	7812      	ldrb	r2, [r2, #0]
 8001834:	f107 0120 	add.w	r1, r7, #32
 8001838:	440b      	add	r3, r1
 800183a:	f803 2c0f 	strb.w	r2, [r3, #-15]
		for (i = 0; i < 8; i++)
 800183e:	7ffb      	ldrb	r3, [r7, #31]
 8001840:	3301      	adds	r3, #1
 8001842:	77fb      	strb	r3, [r7, #31]
 8001844:	7ffb      	ldrb	r3, [r7, #31]
 8001846:	2b07      	cmp	r3, #7
 8001848:	d9eb      	bls.n	8001822 <g_send_to_drone+0x26>
		}
		msg_to_drone.len = 8;
 800184a:	2308      	movs	r3, #8
 800184c:	743b      	strb	r3, [r7, #16]
		queue_push(&can_msg_queue, &msg_to_drone);
 800184e:	f107 030c 	add.w	r3, r7, #12
 8001852:	4619      	mov	r1, r3
 8001854:	4819      	ldr	r0, [pc, #100]	; (80018bc <g_send_to_drone+0xc0>)
 8001856:	f000 fc7b 	bl	8002150 <queue_push>
	for (j = 0; j < pack_count; j++)
 800185a:	7fbb      	ldrb	r3, [r7, #30]
 800185c:	3301      	adds	r3, #1
 800185e:	77bb      	strb	r3, [r7, #30]
 8001860:	7fba      	ldrb	r2, [r7, #30]
 8001862:	7f7b      	ldrb	r3, [r7, #29]
 8001864:	429a      	cmp	r2, r3
 8001866:	d3d9      	bcc.n	800181c <g_send_to_drone+0x20>
		//add error handle
	}
	if (remain_byte > 0)
 8001868:	7f3b      	ldrb	r3, [r7, #28]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d01f      	beq.n	80018ae <g_send_to_drone+0xb2>
	{
		for (i = 0; i < remain_byte; i++)
 800186e:	2300      	movs	r3, #0
 8001870:	77fb      	strb	r3, [r7, #31]
 8001872:	e010      	b.n	8001896 <g_send_to_drone+0x9a>
		{
			msg_to_drone.data[i] = ((uint8_t*) addr)[j * 8 + i];
 8001874:	7fbb      	ldrb	r3, [r7, #30]
 8001876:	00da      	lsls	r2, r3, #3
 8001878:	7ffb      	ldrb	r3, [r7, #31]
 800187a:	4413      	add	r3, r2
 800187c:	461a      	mov	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	441a      	add	r2, r3
 8001882:	7ffb      	ldrb	r3, [r7, #31]
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	f107 0120 	add.w	r1, r7, #32
 800188a:	440b      	add	r3, r1
 800188c:	f803 2c0f 	strb.w	r2, [r3, #-15]
		for (i = 0; i < remain_byte; i++)
 8001890:	7ffb      	ldrb	r3, [r7, #31]
 8001892:	3301      	adds	r3, #1
 8001894:	77fb      	strb	r3, [r7, #31]
 8001896:	7ffa      	ldrb	r2, [r7, #31]
 8001898:	7f3b      	ldrb	r3, [r7, #28]
 800189a:	429a      	cmp	r2, r3
 800189c:	d3ea      	bcc.n	8001874 <g_send_to_drone+0x78>
		}
		msg_to_drone.len = remain_byte;
 800189e:	7f3b      	ldrb	r3, [r7, #28]
 80018a0:	743b      	strb	r3, [r7, #16]
		queue_push(&can_msg_queue, &msg_to_drone);
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	4619      	mov	r1, r3
 80018a8:	4804      	ldr	r0, [pc, #16]	; (80018bc <g_send_to_drone+0xc0>)
 80018aa:	f000 fc51 	bl	8002150 <queue_push>
		//add error handle
	}
	send_can_msg_to_drone();
 80018ae:	f000 f99f 	bl	8001bf0 <send_can_msg_to_drone>
}
 80018b2:	bf00      	nop
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20001790 	.word	0x20001790

080018c0 <request_identify>:

static void request_identify(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
	msg_to_drone_request_identify_t request_identify;

	request_identify.head = SEND_TO_DRONE_HEAD;
 80018c6:	23a5      	movs	r3, #165	; 0xa5
 80018c8:	703b      	strb	r3, [r7, #0]
	request_identify.type = TYPE_REQUEST_IDENTIFY;
 80018ca:	23fd      	movs	r3, #253	; 0xfd
 80018cc:	707b      	strb	r3, [r7, #1]
	request_identify.len = sizeof(request_identify) - 2;
 80018ce:	2303      	movs	r3, #3
 80018d0:	70bb      	strb	r3, [r7, #2]

	request_identify.data = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	70fb      	strb	r3, [r7, #3]

	request_identify.crc = g_generate_crc((uint8_t*) &(request_identify.type),
			request_identify.len);
 80018d6:	78bb      	ldrb	r3, [r7, #2]
	request_identify.crc = g_generate_crc((uint8_t*) &(request_identify.type),
 80018d8:	b29a      	uxth	r2, r3
 80018da:	463b      	mov	r3, r7
 80018dc:	3301      	adds	r3, #1
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe ffd7 	bl	8000894 <g_generate_crc>
 80018e6:	4603      	mov	r3, r0
 80018e8:	713b      	strb	r3, [r7, #4]
	g_send_to_drone(&request_identify, sizeof(request_identify));
 80018ea:	463b      	mov	r3, r7
 80018ec:	2105      	movs	r1, #5
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ff84 	bl	80017fc <g_send_to_drone>
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <get_compile_date>:

static void get_compile_date(uint8_t *year, uint8_t *month, uint8_t *day)
{
 80018fc:	b5b0      	push	{r4, r5, r7, lr}
 80018fe:	b094      	sub	sp, #80	; 0x50
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
	uint8_t i;
	const char *p_month[] =
 8001908:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <get_compile_date+0xac>)
 800190a:	f107 041c 	add.w	r4, r7, #28
 800190e:	461d      	mov	r5, r3
 8001910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001918:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800191c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	{ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct",
			"Nov", "Dec" };
	const char Date[12] = __DATE__;
 8001920:	4a22      	ldr	r2, [pc, #136]	; (80019ac <get_compile_date+0xb0>)
 8001922:	f107 0310 	add.w	r3, r7, #16
 8001926:	ca07      	ldmia	r2, {r0, r1, r2}
 8001928:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (i = 0; i < 12; i++)
 800192c:	2300      	movs	r3, #0
 800192e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001932:	e01c      	b.n	800196e <get_compile_date+0x72>
	{
		if (memcmp(Date, p_month[i], 3) == 0)
 8001934:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800193e:	4413      	add	r3, r2
 8001940:	f853 1c34 	ldr.w	r1, [r3, #-52]
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	2203      	movs	r2, #3
 800194a:	4618      	mov	r0, r3
 800194c:	f004 f8b8 	bl	8005ac0 <memcmp>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <get_compile_date+0x68>
		{
			*month = i + 1;
 8001956:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800195a:	3301      	adds	r3, #1
 800195c:	b2da      	uxtb	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	701a      	strb	r2, [r3, #0]
			break;
 8001962:	e008      	b.n	8001976 <get_compile_date+0x7a>
	for (i = 0; i < 12; i++)
 8001964:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001968:	3301      	adds	r3, #1
 800196a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800196e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001972:	2b0b      	cmp	r3, #11
 8001974:	d9de      	bls.n	8001934 <get_compile_date+0x38>
		}
	}
	*year = (uint8_t) atoi(Date + 9);
 8001976:	f107 0310 	add.w	r3, r7, #16
 800197a:	3309      	adds	r3, #9
 800197c:	4618      	mov	r0, r3
 800197e:	f004 f85f 	bl	8005a40 <atoi>
 8001982:	4603      	mov	r3, r0
 8001984:	b2da      	uxtb	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	701a      	strb	r2, [r3, #0]
	*day = (uint8_t) atoi(Date + 4);
 800198a:	f107 0310 	add.w	r3, r7, #16
 800198e:	3304      	adds	r3, #4
 8001990:	4618      	mov	r0, r3
 8001992:	f004 f855 	bl	8005a40 <atoi>
 8001996:	4603      	mov	r3, r0
 8001998:	b2da      	uxtb	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	701a      	strb	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	3750      	adds	r7, #80	; 0x50
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bdb0      	pop	{r4, r5, r7, pc}
 80019a6:	bf00      	nop
 80019a8:	080072fc 	.word	0x080072fc
 80019ac:	0800732c 	.word	0x0800732c

080019b0 <g_get_version>:

uint32_t g_get_version(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
	uint32_t version = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
	uint8_t year = 0;
 80019ba:	2300      	movs	r3, #0
 80019bc:	70fb      	strb	r3, [r7, #3]
	uint8_t month = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	70bb      	strb	r3, [r7, #2]
	uint8_t day = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	707b      	strb	r3, [r7, #1]

	get_compile_date(&year, &month, &day);
 80019c6:	1c7a      	adds	r2, r7, #1
 80019c8:	1cb9      	adds	r1, r7, #2
 80019ca:	1cfb      	adds	r3, r7, #3
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff95 	bl	80018fc <get_compile_date>

	version = HARDWARE_VERSION << 30 | FUNCTION_VERSION << 24
			| OPT_VERSION << 16 | year << 9 | month << 5 | day;
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	025b      	lsls	r3, r3, #9
 80019d6:	f043 4302 	orr.w	r3, r3, #2181038080	; 0x82000000
 80019da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019de:	78ba      	ldrb	r2, [r7, #2]
 80019e0:	0152      	lsls	r2, r2, #5
 80019e2:	4313      	orrs	r3, r2
 80019e4:	787a      	ldrb	r2, [r7, #1]
 80019e6:	4313      	orrs	r3, r2
	version = HARDWARE_VERSION << 30 | FUNCTION_VERSION << 24
 80019e8:	607b      	str	r3, [r7, #4]

	return version;
 80019ea:	687b      	ldr	r3, [r7, #4]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <send_photo_count_to_drone>:

void send_photo_count_to_drone(uint16_t photo_count)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]
	msg_to_drone_photo_count_t msg_to_drone_photo_count;
	msg_to_drone_photo_count.head = SEND_TO_DRONE_HEAD;
 80019fe:	23a5      	movs	r3, #165	; 0xa5
 8001a00:	723b      	strb	r3, [r7, #8]
	msg_to_drone_photo_count.type = TYPE_PHOTO_COUNT;
 8001a02:	2304      	movs	r3, #4
 8001a04:	727b      	strb	r3, [r7, #9]
	msg_to_drone_photo_count.len = sizeof(msg_to_drone_photo_count) - 2;
 8001a06:	2304      	movs	r3, #4
 8001a08:	72bb      	strb	r3, [r7, #10]
	msg_to_drone_photo_count.photo_count = photo_count;
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	f8a7 300b 	strh.w	r3, [r7, #11]
	msg_to_drone_photo_count.crc = g_generate_crc(
			(uint8_t*) &(msg_to_drone_photo_count.type),
			msg_to_drone_photo_count.len);
 8001a10:	7abb      	ldrb	r3, [r7, #10]
	msg_to_drone_photo_count.crc = g_generate_crc(
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	3301      	adds	r3, #1
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe ff39 	bl	8000894 <g_generate_crc>
 8001a22:	4603      	mov	r3, r0
 8001a24:	737b      	strb	r3, [r7, #13]
	g_send_to_drone(&msg_to_drone_photo_count,
 8001a26:	f107 0308 	add.w	r3, r7, #8
 8001a2a:	2106      	movs	r1, #6
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fee5 	bl	80017fc <g_send_to_drone>
			sizeof(msg_to_drone_photo_count));
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <send_UID>:

void send_UID(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
	msg_to_drone_ID_t UID;

	UID.head = SEND_TO_DRONE_HEAD;
 8001a42:	23a5      	movs	r3, #165	; 0xa5
 8001a44:	713b      	strb	r3, [r7, #4]
	UID.type = TYPE_REQUEST_ID;
 8001a46:	23fe      	movs	r3, #254	; 0xfe
 8001a48:	717b      	strb	r3, [r7, #5]
	UID.len = sizeof(UID) - 2;
 8001a4a:	231a      	movs	r3, #26
 8001a4c:	71bb      	strb	r3, [r7, #6]

	UID.vender_ID = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	71fb      	strb	r3, [r7, #7]
 8001a52:	2300      	movs	r3, #0
 8001a54:	723b      	strb	r3, [r7, #8]
	UID.payload_type = 0x1fd;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f063 0302 	orn	r3, r3, #2
 8001a5c:	727b      	strb	r3, [r7, #9]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	72bb      	strb	r3, [r7, #10]
	UID.UID[0] = *(uint32_t*) (0x1fff7a10);    //cpu_id[0]
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <send_UID+0x84>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f8c7 300b 	str.w	r3, [r7, #11]
	UID.UID[1] = *(uint32_t*) (0x1fff7a14);    //cpu_id[1];
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <send_UID+0x88>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f8c7 300f 	str.w	r3, [r7, #15]
	UID.UID[2] = *(uint32_t*) (0x1fff7a18);    //cpu_id[2];
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <send_UID+0x8c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f8c7 3013 	str.w	r3, [r7, #19]
	UID.UID[3] = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	75fb      	strb	r3, [r7, #23]
 8001a82:	2300      	movs	r3, #0
 8001a84:	763b      	strb	r3, [r7, #24]
 8001a86:	2300      	movs	r3, #0
 8001a88:	767b      	strb	r3, [r7, #25]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	76bb      	strb	r3, [r7, #26]
	UID.version = g_get_version();
 8001a8e:	f7ff ff8f 	bl	80019b0 <g_get_version>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f8c7 301b 	str.w	r3, [r7, #27]

	UID.crc = g_generate_crc((uint8_t*) &(UID.type), UID.len);
 8001a98:	79bb      	ldrb	r3, [r7, #6]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fef6 	bl	8000894 <g_generate_crc>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	77fb      	strb	r3, [r7, #31]
	g_send_to_drone(&UID, sizeof(UID));
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	211c      	movs	r1, #28
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fea3 	bl	80017fc <g_send_to_drone>
}
 8001ab6:	bf00      	nop
 8001ab8:	3720      	adds	r7, #32
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	1fff7a10 	.word	0x1fff7a10
 8001ac4:	1fff7a14 	.word	0x1fff7a14
 8001ac8:	1fff7a18 	.word	0x1fff7a18

08001acc <send_page_info>:

void send_page_info(void)
{
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b089      	sub	sp, #36	; 0x24
 8001ad0:	af00      	add	r7, sp, #0
	uint8_t len = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	77fb      	strb	r3, [r7, #31]
	msg_to_drone_fileinfo_t fileinfo;

	fileinfo.head = SEND_TO_DRONE_HEAD;
 8001ad6:	23a5      	movs	r3, #165	; 0xa5
 8001ad8:	703b      	strb	r3, [r7, #0]
	fileinfo.type = TYPE_REQUEST_FILE;
 8001ada:	23fc      	movs	r3, #252	; 0xfc
 8001adc:	707b      	strb	r3, [r7, #1]

	fileinfo.width = 500;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f063 030b 	orn	r3, r3, #11
 8001ae4:	70fb      	strb	r3, [r7, #3]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	713b      	strb	r3, [r7, #4]
	fileinfo.height = 270;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f043 030e 	orr.w	r3, r3, #14
 8001af4:	717b      	strb	r3, [r7, #5]
 8001af6:	2300      	movs	r3, #0
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	71bb      	strb	r3, [r7, #6]

	len = snprintf((char*) (fileinfo.filename), 20, "%s", "Common_Payload");
 8001afe:	463b      	mov	r3, r7
 8001b00:	3307      	adds	r3, #7
 8001b02:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <send_page_info+0x90>)
 8001b04:	461c      	mov	r4, r3
 8001b06:	4613      	mov	r3, r2
 8001b08:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b0a:	6020      	str	r0, [r4, #0]
 8001b0c:	6061      	str	r1, [r4, #4]
 8001b0e:	60a2      	str	r2, [r4, #8]
 8001b10:	881a      	ldrh	r2, [r3, #0]
 8001b12:	789b      	ldrb	r3, [r3, #2]
 8001b14:	81a2      	strh	r2, [r4, #12]
 8001b16:	73a3      	strb	r3, [r4, #14]
 8001b18:	230e      	movs	r3, #14
 8001b1a:	77fb      	strb	r3, [r7, #31]

	fileinfo.len = len + 6;
 8001b1c:	7ffb      	ldrb	r3, [r7, #31]
 8001b1e:	3306      	adds	r3, #6
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	70bb      	strb	r3, [r7, #2]
	fileinfo.filename[len] = g_generate_crc((uint8_t*) &(fileinfo.type),
			fileinfo.len);
 8001b24:	78bb      	ldrb	r3, [r7, #2]
	fileinfo.filename[len] = g_generate_crc((uint8_t*) &(fileinfo.type),
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	7ffc      	ldrb	r4, [r7, #31]
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe feaf 	bl	8000894 <g_generate_crc>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f107 0320 	add.w	r3, r7, #32
 8001b3e:	4423      	add	r3, r4
 8001b40:	f803 2c19 	strb.w	r2, [r3, #-25]
	g_send_to_drone(&fileinfo, fileinfo.len + 2);
 8001b44:	78bb      	ldrb	r3, [r7, #2]
 8001b46:	3302      	adds	r3, #2
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fe54 	bl	80017fc <g_send_to_drone>
}
 8001b54:	bf00      	nop
 8001b56:	3724      	adds	r7, #36	; 0x24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd90      	pop	{r4, r7, pc}
 8001b5c:	08007338 	.word	0x08007338

08001b60 <g_identification>:

/**
 *identification procedure. called by SysTick_Handler() every 100ms.
 */
void g_identification(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	switch (identification_procedure)
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <g_identification+0x50>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d817      	bhi.n	8001b9c <g_identification+0x3c>
 8001b6c:	a201      	add	r2, pc, #4	; (adr r2, 8001b74 <g_identification+0x14>)
 8001b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b72:	bf00      	nop
 8001b74:	08001b85 	.word	0x08001b85
 8001b78:	08001b85 	.word	0x08001b85
 8001b7c:	08001b8b 	.word	0x08001b8b
 8001b80:	08001b91 	.word	0x08001b91
	{
	case PROCEDURE_IDEL:
	case PROCEDURE_REQUEST_IDENTIFY:
		request_identify();
 8001b84:	f7ff fe9c 	bl	80018c0 <request_identify>
		break;
 8001b88:	e00f      	b.n	8001baa <g_identification+0x4a>

	case PROCEDURE_SEND_ID:
		send_UID();
 8001b8a:	f7ff ff57 	bl	8001a3c <send_UID>
		break;
 8001b8e:	e00c      	b.n	8001baa <g_identification+0x4a>

	case PROCEDURE_SEND_PAGE:
		send_page_info();
 8001b90:	f7ff ff9c 	bl	8001acc <send_page_info>
		identification_procedure = PROCEDURE_OK;
 8001b94:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <g_identification+0x50>)
 8001b96:	2204      	movs	r2, #4
 8001b98:	701a      	strb	r2, [r3, #0]
		break;
 8001b9a:	e006      	b.n	8001baa <g_identification+0x4a>

	default:
		send_photo_count_to_drone(photo);
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <g_identification+0x54>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff26 	bl	80019f4 <send_photo_count_to_drone>
		break;
 8001ba8:	bf00      	nop
	}
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000200 	.word	0x20000200
 8001bb4:	20000204 	.word	0x20000204

08001bb8 <g_update_identification_procedure>:

/**
 *
 */
void g_update_identification_procedure(uint8_t data)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
	switch (data)
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d002      	beq.n	8001bce <g_update_identification_procedure+0x16>
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d004      	beq.n	8001bd6 <g_update_identification_procedure+0x1e>
	case 0x02:
		identification_procedure = PROCEDURE_SEND_PAGE;
		break;

	default:
		break;
 8001bcc:	e007      	b.n	8001bde <g_update_identification_procedure+0x26>
		identification_procedure = PROCEDURE_SEND_ID;
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <g_update_identification_procedure+0x34>)
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	701a      	strb	r2, [r3, #0]
		break;
 8001bd4:	e003      	b.n	8001bde <g_update_identification_procedure+0x26>
		identification_procedure = PROCEDURE_SEND_PAGE;
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <g_update_identification_procedure+0x34>)
 8001bd8:	2203      	movs	r2, #3
 8001bda:	701a      	strb	r2, [r3, #0]
		break;
 8001bdc:	bf00      	nop
	}
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000200 	.word	0x20000200

08001bf0 <send_can_msg_to_drone>:

static void send_can_msg_to_drone(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
	uint32_t mail_box;
	can_msg_t can_tx_msg;
	if (can_busy_flag == RESET)
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <send_can_msg_to_drone+0x40>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d114      	bne.n	8001c28 <send_can_msg_to_drone+0x38>
	{
		can_busy_flag = SET;
 8001bfe:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <send_can_msg_to_drone+0x40>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]

		queue_pop(&can_msg_queue, &can_tx_msg);
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	4619      	mov	r1, r3
 8001c08:	480a      	ldr	r0, [pc, #40]	; (8001c34 <send_can_msg_to_drone+0x44>)
 8001c0a:	f000 fa5f 	bl	80020cc <queue_pop>

		drone_can_msg_head.DLC = can_tx_msg.len;
 8001c0e:	7a3b      	ldrb	r3, [r7, #8]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <send_can_msg_to_drone+0x48>)
 8001c14:	611a      	str	r2, [r3, #16]
		HAL_CAN_AddTxMessage(&hcan1, &drone_can_msg_head, can_tx_msg.data,
 8001c16:	f107 0114 	add.w	r1, r7, #20
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	1d5a      	adds	r2, r3, #5
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4905      	ldr	r1, [pc, #20]	; (8001c38 <send_can_msg_to_drone+0x48>)
 8001c22:	4806      	ldr	r0, [pc, #24]	; (8001c3c <send_can_msg_to_drone+0x4c>)
 8001c24:	f001 f9a2 	bl	8002f6c <HAL_CAN_AddTxMessage>
				&mail_box);
	}
}
 8001c28:	bf00      	nop
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000201 	.word	0x20000201
 8001c34:	20001790 	.word	0x20001790
 8001c38:	2000166c 	.word	0x2000166c
 8001c3c:	20001644 	.word	0x20001644

08001c40 <g_handle_drone_instruction>:

void g_handle_drone_instruction(uint8_t *data)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	float value;
	switch (data[1])
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b0c      	cmp	r3, #12
 8001c50:	f000 80f4 	beq.w	8001e3c <g_handle_drone_instruction+0x1fc>
 8001c54:	2b0c      	cmp	r3, #12
 8001c56:	dc1d      	bgt.n	8001c94 <g_handle_drone_instruction+0x54>
 8001c58:	2b06      	cmp	r3, #6
 8001c5a:	d03a      	beq.n	8001cd2 <g_handle_drone_instruction+0x92>
 8001c5c:	2b06      	cmp	r3, #6
 8001c5e:	dc0e      	bgt.n	8001c7e <g_handle_drone_instruction+0x3e>
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	f000 80ed 	beq.w	8001e40 <g_handle_drone_instruction+0x200>
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	dc02      	bgt.n	8001c70 <g_handle_drone_instruction+0x30>
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d07f      	beq.n	8001d6e <g_handle_drone_instruction+0x12e>

		g_update_identification_procedure(data[3]);

	default:

		break;
 8001c6e:	e0f2      	b.n	8001e56 <g_handle_drone_instruction+0x216>
	switch (data[1])
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	f000 80ce 	beq.w	8001e12 <g_handle_drone_instruction+0x1d2>
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	f000 80d2 	beq.w	8001e20 <g_handle_drone_instruction+0x1e0>
		break;
 8001c7c:	e0eb      	b.n	8001e56 <g_handle_drone_instruction+0x216>
	switch (data[1])
 8001c7e:	2b0a      	cmp	r3, #10
 8001c80:	f300 80e0 	bgt.w	8001e44 <g_handle_drone_instruction+0x204>
 8001c84:	2b09      	cmp	r3, #9
 8001c86:	f280 80df 	bge.w	8001e48 <g_handle_drone_instruction+0x208>
 8001c8a:	2b07      	cmp	r3, #7
 8001c8c:	d029      	beq.n	8001ce2 <g_handle_drone_instruction+0xa2>
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d03a      	beq.n	8001d08 <g_handle_drone_instruction+0xc8>
		break;
 8001c92:	e0e0      	b.n	8001e56 <g_handle_drone_instruction+0x216>
	switch (data[1])
 8001c94:	2b12      	cmp	r3, #18
 8001c96:	d054      	beq.n	8001d42 <g_handle_drone_instruction+0x102>
 8001c98:	2b12      	cmp	r3, #18
 8001c9a:	dc0b      	bgt.n	8001cb4 <g_handle_drone_instruction+0x74>
 8001c9c:	2b0e      	cmp	r3, #14
 8001c9e:	d03a      	beq.n	8001d16 <g_handle_drone_instruction+0xd6>
 8001ca0:	2b0e      	cmp	r3, #14
 8001ca2:	f2c0 80d3 	blt.w	8001e4c <g_handle_drone_instruction+0x20c>
 8001ca6:	2b10      	cmp	r3, #16
 8001ca8:	f000 80ce 	beq.w	8001e48 <g_handle_drone_instruction+0x208>
 8001cac:	2b11      	cmp	r3, #17
 8001cae:	f000 80cf 	beq.w	8001e50 <g_handle_drone_instruction+0x210>
		break;
 8001cb2:	e0d0      	b.n	8001e56 <g_handle_drone_instruction+0x216>
	switch (data[1])
 8001cb4:	2b21      	cmp	r3, #33	; 0x21
 8001cb6:	dc08      	bgt.n	8001cca <g_handle_drone_instruction+0x8a>
 8001cb8:	2b16      	cmp	r3, #22
 8001cba:	f280 80c5 	bge.w	8001e48 <g_handle_drone_instruction+0x208>
 8001cbe:	2b13      	cmp	r3, #19
 8001cc0:	f000 80c8 	beq.w	8001e54 <g_handle_drone_instruction+0x214>
 8001cc4:	2b14      	cmp	r3, #20
 8001cc6:	d014      	beq.n	8001cf2 <g_handle_drone_instruction+0xb2>
		break;
 8001cc8:	e0c5      	b.n	8001e56 <g_handle_drone_instruction+0x216>
	switch (data[1])
 8001cca:	2bff      	cmp	r3, #255	; 0xff
 8001ccc:	f000 80af 	beq.w	8001e2e <g_handle_drone_instruction+0x1ee>
		break;
 8001cd0:	e0c1      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		g_pitch_control(data[3]);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3303      	adds	r3, #3
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	b25b      	sxtb	r3, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fe4b 	bl	8000976 <g_pitch_control>
		break;
 8001ce0:	e0b9      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		g_yaw_control(data[3]);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3303      	adds	r3, #3
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	b25b      	sxtb	r3, r3
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7fe fe4e 	bl	800098c <g_yaw_control>
		break;
 8001cf0:	e0b1      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		gesture_info.x = *(int16_t*) &(data[3]);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f9b3 2003 	ldrsh.w	r2, [r3, #3]
 8001cf8:	4b59      	ldr	r3, [pc, #356]	; (8001e60 <g_handle_drone_instruction+0x220>)
 8001cfa:	801a      	strh	r2, [r3, #0]
		gesture_info.y = *(int16_t*) &(data[5]);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f9b3 2005 	ldrsh.w	r2, [r3, #5]
 8001d02:	4b57      	ldr	r3, [pc, #348]	; (8001e60 <g_handle_drone_instruction+0x220>)
 8001d04:	805a      	strh	r2, [r3, #2]
		break;
 8001d06:	e0a6      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		g_gimbal_mode(data[3]);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3303      	adds	r3, #3
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fe47 	bl	80009a2 <g_gimbal_mode>
		break;
 8001d14:	e09f      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		value = g_convert_float16_to_native_float(data[4] << 8 | data[3]);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	b21a      	sxth	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3303      	adds	r3, #3
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fdd2 	bl	80008d8 <g_convert_float16_to_native_float>
 8001d34:	ed87 0a03 	vstr	s0, [r7, #12]
		g_set_gimbal_pitch(value);
 8001d38:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d3c:	f7fe fe3c 	bl	80009b8 <g_set_gimbal_pitch>
		break;
 8001d40:	e089      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		value = g_convert_float16_to_native_float(data[4] << 8 | data[3]);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3304      	adds	r3, #4
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3303      	adds	r3, #3
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	b21b      	sxth	r3, r3
 8001d54:	4313      	orrs	r3, r2
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fdbc 	bl	80008d8 <g_convert_float16_to_native_float>
 8001d60:	ed87 0a03 	vstr	s0, [r7, #12]
		g_set_gimbal_yaw(value);
 8001d64:	ed97 0a03 	vldr	s0, [r7, #12]
 8001d68:	f7fe fe31 	bl	80009ce <g_set_gimbal_yaw>
		break;
 8001d6c:	e073      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		gps_info.altitude = data[5] | data[6] << 8 | data[7] << 16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3305      	adds	r3, #5
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3306      	adds	r3, #6
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3307      	adds	r3, #7
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	041b      	lsls	r3, r3, #16
 8001d88:	431a      	orrs	r2, r3
				| data[8] << 24;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3308      	adds	r3, #8
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	061b      	lsls	r3, r3, #24
 8001d92:	4313      	orrs	r3, r2
 8001d94:	461a      	mov	r2, r3
		gps_info.altitude = data[5] | data[6] << 8 | data[7] << 16
 8001d96:	4b33      	ldr	r3, [pc, #204]	; (8001e64 <g_handle_drone_instruction+0x224>)
 8001d98:	609a      	str	r2, [r3, #8]
		gps_info.lat = data[9] | data[10] << 8 | data[11] << 16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3309      	adds	r3, #9
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	330a      	adds	r3, #10
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	431a      	orrs	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	330b      	adds	r3, #11
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	041b      	lsls	r3, r3, #16
 8001db4:	431a      	orrs	r2, r3
				| data[12] << 24;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	330c      	adds	r3, #12
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	061b      	lsls	r3, r3, #24
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	461a      	mov	r2, r3
		gps_info.lat = data[9] | data[10] << 8 | data[11] << 16
 8001dc2:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <g_handle_drone_instruction+0x224>)
 8001dc4:	601a      	str	r2, [r3, #0]
		gps_info.lng = data[13] | data[14] << 8 | data[15] << 16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	330d      	adds	r3, #13
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	330e      	adds	r3, #14
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	330f      	adds	r3, #15
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	041b      	lsls	r3, r3, #16
 8001de0:	431a      	orrs	r2, r3
				| data[16] << 24;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3310      	adds	r3, #16
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	4313      	orrs	r3, r2
 8001dec:	461a      	mov	r2, r3
		gps_info.lng = data[13] | data[14] << 8 | data[15] << 16
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <g_handle_drone_instruction+0x224>)
 8001df0:	605a      	str	r2, [r3, #4]
		photo++;
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <g_handle_drone_instruction+0x228>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	3301      	adds	r3, #1
 8001df8:	4a1b      	ldr	r2, [pc, #108]	; (8001e68 <g_handle_drone_instruction+0x228>)
 8001dfa:	6013      	str	r3, [r2, #0]
		g_take_photo(gps_info.altitude, gps_info.lat, gps_info.lng);
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <g_handle_drone_instruction+0x224>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	4618      	mov	r0, r3
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <g_handle_drone_instruction+0x224>)
 8001e04:	6819      	ldr	r1, [r3, #0]
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <g_handle_drone_instruction+0x224>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f7fe fd9c 	bl	8000948 <g_take_photo>
		break;
 8001e10:	e021      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		g_control_zoom(data[3]);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3303      	adds	r3, #3
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fde3 	bl	80009e4 <g_control_zoom>
		break;
 8001e1e:	e01a      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		g_record(data[3]);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3303      	adds	r3, #3
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fd9a 	bl	8000960 <g_record>
		break;
 8001e2c:	e013      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		g_update_identification_procedure(data[3]);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	3303      	adds	r3, #3
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff febf 	bl	8001bb8 <g_update_identification_procedure>
		break;
 8001e3a:	e00c      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		break;
 8001e3c:	bf00      	nop
 8001e3e:	e00a      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		break;
 8001e40:	bf00      	nop
 8001e42:	e008      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		break;
 8001e44:	bf00      	nop
 8001e46:	e006      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		break;
 8001e48:	bf00      	nop
 8001e4a:	e004      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		break;
 8001e4c:	bf00      	nop
 8001e4e:	e002      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		break;
 8001e50:	bf00      	nop
 8001e52:	e000      	b.n	8001e56 <g_handle_drone_instruction+0x216>
		break;
 8001e54:	bf00      	nop
	}
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000179c 	.word	0x2000179c
 8001e64:	20001684 	.word	0x20001684
 8001e68:	20000204 	.word	0x20000204

08001e6c <g_parser_drone_packet>:

void g_parser_drone_packet(can_msg_t *can_msg)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	static uint8_t count = 0, len = 0, crc = 0;
	uint8_t i = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < can_msg->len; i++)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	e07e      	b.n	8001f80 <g_parser_drone_packet+0x114>
	{
		data = can_msg->data[i];
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	795b      	ldrb	r3, [r3, #5]
 8001e8a:	73bb      	strb	r3, [r7, #14]
		switch (parser_stat)
 8001e8c:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <g_parser_drone_packet+0x128>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d86f      	bhi.n	8001f74 <g_parser_drone_packet+0x108>
 8001e94:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <g_parser_drone_packet+0x30>)
 8001e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9a:	bf00      	nop
 8001e9c:	08001eb1 	.word	0x08001eb1
 8001ea0:	08001ee1 	.word	0x08001ee1
 8001ea4:	08001efd 	.word	0x08001efd
 8001ea8:	08001f1f 	.word	0x08001f1f
 8001eac:	08001f47 	.word	0x08001f47
		{
		case IDEL:
			count = 0;
 8001eb0:	4b39      	ldr	r3, [pc, #228]	; (8001f98 <g_parser_drone_packet+0x12c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
			if (data == SEND_TO_DRONE_HEAD)
 8001eb6:	7bbb      	ldrb	r3, [r7, #14]
 8001eb8:	2ba5      	cmp	r3, #165	; 0xa5
 8001eba:	d10d      	bne.n	8001ed8 <g_parser_drone_packet+0x6c>
			{
				drone_data_buf[count++] = data;
 8001ebc:	4b36      	ldr	r3, [pc, #216]	; (8001f98 <g_parser_drone_packet+0x12c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	b2d1      	uxtb	r1, r2
 8001ec4:	4a34      	ldr	r2, [pc, #208]	; (8001f98 <g_parser_drone_packet+0x12c>)
 8001ec6:	7011      	strb	r1, [r2, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4a34      	ldr	r2, [pc, #208]	; (8001f9c <g_parser_drone_packet+0x130>)
 8001ecc:	7bbb      	ldrb	r3, [r7, #14]
 8001ece:	5453      	strb	r3, [r2, r1]
				parser_stat = GET_HEAD;
 8001ed0:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <g_parser_drone_packet+0x128>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				parser_stat = IDEL;
			}
			break;
 8001ed6:	e050      	b.n	8001f7a <g_parser_drone_packet+0x10e>
				parser_stat = IDEL;
 8001ed8:	4b2e      	ldr	r3, [pc, #184]	; (8001f94 <g_parser_drone_packet+0x128>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
			break;
 8001ede:	e04c      	b.n	8001f7a <g_parser_drone_packet+0x10e>

		case GET_HEAD:
			parser_stat = GET_TYPE;
 8001ee0:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <g_parser_drone_packet+0x128>)
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	701a      	strb	r2, [r3, #0]
			drone_data_buf[count++] = data;
 8001ee6:	4b2c      	ldr	r3, [pc, #176]	; (8001f98 <g_parser_drone_packet+0x12c>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	b2d1      	uxtb	r1, r2
 8001eee:	4a2a      	ldr	r2, [pc, #168]	; (8001f98 <g_parser_drone_packet+0x12c>)
 8001ef0:	7011      	strb	r1, [r2, #0]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4a29      	ldr	r2, [pc, #164]	; (8001f9c <g_parser_drone_packet+0x130>)
 8001ef6:	7bbb      	ldrb	r3, [r7, #14]
 8001ef8:	5453      	strb	r3, [r2, r1]
			break;
 8001efa:	e03e      	b.n	8001f7a <g_parser_drone_packet+0x10e>

		case GET_TYPE:
			len = data;
 8001efc:	4a28      	ldr	r2, [pc, #160]	; (8001fa0 <g_parser_drone_packet+0x134>)
 8001efe:	7bbb      	ldrb	r3, [r7, #14]
 8001f00:	7013      	strb	r3, [r2, #0]
			drone_data_buf[count++] = data;
 8001f02:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <g_parser_drone_packet+0x12c>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	b2d1      	uxtb	r1, r2
 8001f0a:	4a23      	ldr	r2, [pc, #140]	; (8001f98 <g_parser_drone_packet+0x12c>)
 8001f0c:	7011      	strb	r1, [r2, #0]
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4a22      	ldr	r2, [pc, #136]	; (8001f9c <g_parser_drone_packet+0x130>)
 8001f12:	7bbb      	ldrb	r3, [r7, #14]
 8001f14:	5453      	strb	r3, [r2, r1]
			parser_stat = GET_LEN;
 8001f16:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <g_parser_drone_packet+0x128>)
 8001f18:	2203      	movs	r2, #3
 8001f1a:	701a      	strb	r2, [r3, #0]
			break;
 8001f1c:	e02d      	b.n	8001f7a <g_parser_drone_packet+0x10e>

		case GET_LEN:
			drone_data_buf[count++] = data;
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <g_parser_drone_packet+0x12c>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	b2d1      	uxtb	r1, r2
 8001f26:	4a1c      	ldr	r2, [pc, #112]	; (8001f98 <g_parser_drone_packet+0x12c>)
 8001f28:	7011      	strb	r1, [r2, #0]
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4a1b      	ldr	r2, [pc, #108]	; (8001f9c <g_parser_drone_packet+0x130>)
 8001f2e:	7bbb      	ldrb	r3, [r7, #14]
 8001f30:	5453      	strb	r3, [r2, r1]
			if (count > len)
 8001f32:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <g_parser_drone_packet+0x12c>)
 8001f34:	781a      	ldrb	r2, [r3, #0]
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <g_parser_drone_packet+0x134>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d91c      	bls.n	8001f78 <g_parser_drone_packet+0x10c>
			{
				parser_stat = GET_DATA;
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <g_parser_drone_packet+0x128>)
 8001f40:	2204      	movs	r2, #4
 8001f42:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001f44:	e018      	b.n	8001f78 <g_parser_drone_packet+0x10c>

		case GET_DATA:
			crc = g_generate_crc(&(drone_data_buf[1]), len);
 8001f46:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <g_parser_drone_packet+0x134>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4815      	ldr	r0, [pc, #84]	; (8001fa4 <g_parser_drone_packet+0x138>)
 8001f50:	f7fe fca0 	bl	8000894 <g_generate_crc>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <g_parser_drone_packet+0x13c>)
 8001f5a:	701a      	strb	r2, [r3, #0]
			if (crc == data)
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <g_parser_drone_packet+0x13c>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	7bba      	ldrb	r2, [r7, #14]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d102      	bne.n	8001f6c <g_parser_drone_packet+0x100>
			{
				g_handle_drone_instruction(drone_data_buf);
 8001f66:	480d      	ldr	r0, [pc, #52]	; (8001f9c <g_parser_drone_packet+0x130>)
 8001f68:	f7ff fe6a 	bl	8001c40 <g_handle_drone_instruction>
			}
			parser_stat = IDEL;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <g_parser_drone_packet+0x128>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	701a      	strb	r2, [r3, #0]
			break;
 8001f72:	e002      	b.n	8001f7a <g_parser_drone_packet+0x10e>

		default:
			break;
 8001f74:	bf00      	nop
 8001f76:	e000      	b.n	8001f7a <g_parser_drone_packet+0x10e>
			break;
 8001f78:	bf00      	nop
	for (i = 0; i < can_msg->len; i++)
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	791b      	ldrb	r3, [r3, #4]
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	f4ff af7b 	bcc.w	8001e82 <g_parser_drone_packet+0x16>
		}
	}
}
 8001f8c:	bf00      	nop
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000202 	.word	0x20000202
 8001f98:	20000208 	.word	0x20000208
 8001f9c:	20001690 	.word	0x20001690
 8001fa0:	20000209 	.word	0x20000209
 8001fa4:	20001691 	.word	0x20001691
 8001fa8:	2000020a 	.word	0x2000020a

08001fac <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08e      	sub	sp, #56	; 0x38
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef Header;
	can_msg_t can_rx_msg;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Header, can_rx_msg.data);
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	3305      	adds	r3, #5
 8001fba:	f107 021c 	add.w	r2, r7, #28
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f001 f8f7 	bl	80031b4 <HAL_CAN_GetRxMessage>
	can_rx_msg.len = Header.DLC;
 8001fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	743b      	strb	r3, [r7, #16]
	can_rx_msg.StdID = Header.StdId;
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	60fb      	str	r3, [r7, #12]
	g_parser_drone_packet(&can_rx_msg);
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff49 	bl	8001e6c <g_parser_drone_packet>
}
 8001fda:	bf00      	nop
 8001fdc:	3738      	adds	r7, #56	; 0x38
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <can_send_complete>:

void can_send_complete(CAN_HandleTypeDef *hcan)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b088      	sub	sp, #32
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	uint32_t mail_box;
	can_msg_t can_tx_msg;
	if (queue_pop(&can_msg_queue, &can_tx_msg) == 0)
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	480e      	ldr	r0, [pc, #56]	; (800202c <can_send_complete+0x48>)
 8001ff4:	f000 f86a 	bl	80020cc <queue_pop>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10e      	bne.n	800201c <can_send_complete+0x38>
	{

		drone_can_msg_head.DLC = can_tx_msg.len;
 8001ffe:	7c3b      	ldrb	r3, [r7, #16]
 8002000:	461a      	mov	r2, r3
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <can_send_complete+0x4c>)
 8002004:	611a      	str	r2, [r3, #16]
		HAL_CAN_AddTxMessage(&hcan1, &drone_can_msg_head, can_tx_msg.data,
 8002006:	f107 011c 	add.w	r1, r7, #28
 800200a:	f107 030c 	add.w	r3, r7, #12
 800200e:	1d5a      	adds	r2, r3, #5
 8002010:	460b      	mov	r3, r1
 8002012:	4907      	ldr	r1, [pc, #28]	; (8002030 <can_send_complete+0x4c>)
 8002014:	4807      	ldr	r0, [pc, #28]	; (8002034 <can_send_complete+0x50>)
 8002016:	f000 ffa9 	bl	8002f6c <HAL_CAN_AddTxMessage>
	}
	else
	{
		can_busy_flag = RESET;
	}
}
 800201a:	e002      	b.n	8002022 <can_send_complete+0x3e>
		can_busy_flag = RESET;
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <can_send_complete+0x54>)
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
}
 8002022:	bf00      	nop
 8002024:	3720      	adds	r7, #32
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20001790 	.word	0x20001790
 8002030:	2000166c 	.word	0x2000166c
 8002034:	20001644 	.word	0x20001644
 8002038:	20000201 	.word	0x20000201

0800203c <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	can_send_complete(hcan);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ffcd 	bl	8001fe4 <can_send_complete>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
	can_send_complete(hcan);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ffc2 	bl	8001fe4 <can_send_complete>
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
	can_send_complete(hcan);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ffb7 	bl	8001fe4 <can_send_complete>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <g_o1heap_init>:
         uint8_t mem[5120] =
{ 0 };
__attribute__ ((packed))

void g_o1heap_init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
	heap = o1heapInit(mem, 5120, NULL, NULL);
 8002084:	2300      	movs	r3, #0
 8002086:	2200      	movs	r2, #0
 8002088:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 800208c:	4803      	ldr	r0, [pc, #12]	; (800209c <g_o1heap_init+0x1c>)
 800208e:	f7fe ff19 	bl	8000ec4 <o1heapInit>
 8002092:	4602      	mov	r2, r0
 8002094:	4b02      	ldr	r3, [pc, #8]	; (80020a0 <g_o1heap_init+0x20>)
 8002096:	601a      	str	r2, [r3, #0]
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000210 	.word	0x20000210
 80020a0:	2000020c 	.word	0x2000020c

080020a4 <g_queue_init>:

void g_queue_init(queue_t *queue)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	queue->head = NULL;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
	queue->tail = NULL;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	605a      	str	r2, [r3, #4]
	queue->queue_size = 0;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	811a      	strh	r2, [r3, #8]
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <queue_pop>:

uint8_t queue_pop(queue_t *queue, queue_item_t *queue_item)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
	queue_node_t *node;
	if (queue->queue_size == 0 || queue_item == NULL || heap == NULL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	891b      	ldrh	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <queue_pop+0x20>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <queue_pop+0x20>
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <queue_pop+0x80>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <queue_pop+0x24>
	{
		return -1;
 80020ec:	23ff      	movs	r3, #255	; 0xff
 80020ee:	e029      	b.n	8002144 <queue_pop+0x78>
	}

	node = queue->tail;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	60fb      	str	r3, [r7, #12]

	if (queue->queue_size == 1)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	891b      	ldrh	r3, [r3, #8]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d106      	bne.n	800210c <queue_pop+0x40>
	{
		queue->head = NULL;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
		queue->tail = NULL;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	e007      	b.n	800211c <queue_pop+0x50>
	}
	else
	{
		queue->tail = node->front;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	605a      	str	r2, [r3, #4]
		queue->tail->next = NULL;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	605a      	str	r2, [r3, #4]
	}
	queue->queue_size--;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	891b      	ldrh	r3, [r3, #8]
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	811a      	strh	r2, [r3, #8]

	memcpy(queue_item, &(node->item), sizeof(queue_item_t));
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3308      	adds	r3, #8
 800212c:	2210      	movs	r2, #16
 800212e:	4619      	mov	r1, r3
 8002130:	6838      	ldr	r0, [r7, #0]
 8002132:	f003 fcd4 	bl	8005ade <memcpy>
	o1heapFree(heap, node);
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <queue_pop+0x80>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68f9      	ldr	r1, [r7, #12]
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff f99d 	bl	800147c <o1heapFree>

	return 0;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	2000020c 	.word	0x2000020c

08002150 <queue_push>:

uint8_t queue_push(queue_t *queue, queue_item_t *queue_item)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
	queue_node_t *node = NULL;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
	if (queue_item == NULL || heap == NULL)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <queue_push+0x1c>
 8002164:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <queue_push+0x88>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <queue_push+0x20>
	{
		return -1;
 800216c:	23ff      	movs	r3, #255	; 0xff
 800216e:	e02f      	b.n	80021d0 <queue_push+0x80>
	}

	node = o1heapAllocate(heap, sizeof(queue_node_t));
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <queue_push+0x88>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2118      	movs	r1, #24
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe ff76 	bl	8001068 <o1heapAllocate>
 800217c:	60f8      	str	r0, [r7, #12]
	if (node == NULL)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <queue_push+0x38>
	{
		return -2;
 8002184:	23fe      	movs	r3, #254	; 0xfe
 8002186:	e023      	b.n	80021d0 <queue_push+0x80>
	}

	if (queue->queue_size > 0)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	891b      	ldrh	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <queue_push+0x4a>
	{
		queue->head->front = node;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	e002      	b.n	80021a0 <queue_push+0x50>
	}
	else
	{
		queue->tail = node;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
	}
	node->next = queue->head;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	605a      	str	r2, [r3, #4]
	node->front = NULL;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]

	queue->head = node;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	601a      	str	r2, [r3, #0]
	queue->queue_size++;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	891b      	ldrh	r3, [r3, #8]
 80021b8:	3301      	adds	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	811a      	strh	r2, [r3, #8]

	memcpy(&(node->item), queue_item, sizeof(queue_item_t));
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	3308      	adds	r3, #8
 80021c4:	2210      	movs	r2, #16
 80021c6:	6839      	ldr	r1, [r7, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f003 fc88 	bl	8005ade <memcpy>

	return 0;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	2000020c 	.word	0x2000020c

080021dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <HAL_MspInit+0x4c>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	4a0f      	ldr	r2, [pc, #60]	; (8002228 <HAL_MspInit+0x4c>)
 80021ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f0:	6453      	str	r3, [r2, #68]	; 0x44
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <HAL_MspInit+0x4c>)
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_MspInit+0x4c>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <HAL_MspInit+0x4c>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_MspInit+0x4c>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800

0800222c <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 800223e:	e7fe      	b.n	800223e <HardFault_Handler+0x4>

08002240 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8002244:	e7fe      	b.n	8002244 <MemManage_Handler+0x4>

08002246 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 800224a:	e7fe      	b.n	800224a <BusFault_Handler+0x4>

0800224c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8002250:	e7fe      	b.n	8002250 <UsageFault_Handler+0x4>

08002252 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8002280:	f000 faa6 	bl	80027d0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */
	if (HAL_GetTick() % 300 == 0)
 8002284:	f000 fab8 	bl	80027f8 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <SysTick_Handler+0x2c>)
 800228c:	fba3 1302 	umull	r1, r3, r3, r2
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <SysTick_Handler+0x28>
	{
		g_identification();
 80022a0:	f7ff fc5e 	bl	8001b60 <g_identification>
	}
	/* USER CODE END SysTick_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	1b4e81b5 	.word	0x1b4e81b5

080022ac <CAN1_TX_IRQHandler>:

/**
 * @brief This function handles CAN1 TX interrupts.
 */
void CAN1_TX_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_TX_IRQn 0 */

	/* USER CODE END CAN1_TX_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <CAN1_TX_IRQHandler+0x10>)
 80022b2:	f001 f8cf 	bl	8003454 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_TX_IRQn 1 */

	/* USER CODE END CAN1_TX_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20001644 	.word	0x20001644

080022c0 <CAN1_RX0_IRQHandler>:

/**
 * @brief This function handles CAN1 RX0 interrupts.
 */
void CAN1_RX0_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_RX0_IRQn 0 */

	/* USER CODE END CAN1_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <CAN1_RX0_IRQHandler+0x10>)
 80022c6:	f001 f8c5 	bl	8003454 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_RX0_IRQn 1 */

	/* USER CODE END CAN1_RX0_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20001644 	.word	0x20001644

080022d4 <CAN1_RX1_IRQHandler>:

/**
 * @brief This function handles CAN1 RX1 interrupt.
 */
void CAN1_RX1_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_RX1_IRQn 0 */

	/* USER CODE END CAN1_RX1_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <CAN1_RX1_IRQHandler+0x10>)
 80022da:	f001 f8bb 	bl	8003454 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_RX1_IRQn 1 */

	/* USER CODE END CAN1_RX1_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20001644 	.word	0x20001644

080022e8 <CAN1_SCE_IRQHandler>:

/**
 * @brief This function handles CAN1 SCE interrupt.
 */
void CAN1_SCE_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN1_SCE_IRQn 0 */

	/* USER CODE END CAN1_SCE_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan1);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <CAN1_SCE_IRQHandler+0x10>)
 80022ee:	f001 f8b1 	bl	8003454 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN1_SCE_IRQn 1 */

	/* USER CODE END CAN1_SCE_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20001644 	.word	0x20001644

080022fc <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <USART1_IRQHandler+0x10>)
 8002302:	f002 fd81 	bl	8004e08 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200017a0 	.word	0x200017a0

08002310 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8002314:	4802      	ldr	r0, [pc, #8]	; (8002320 <USART2_IRQHandler+0x10>)
 8002316:	f002 fd77 	bl	8004e08 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200017e0 	.word	0x200017e0

08002324 <CAN2_TX_IRQHandler>:

/**
 * @brief This function handles CAN2 TX interrupts.
 */
void CAN2_TX_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN2_TX_IRQn 0 */

	/* USER CODE END CAN2_TX_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan2);
 8002328:	4802      	ldr	r0, [pc, #8]	; (8002334 <CAN2_TX_IRQHandler+0x10>)
 800232a:	f001 f893 	bl	8003454 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN2_TX_IRQn 1 */

	/* USER CODE END CAN2_TX_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000161c 	.word	0x2000161c

08002338 <CAN2_RX0_IRQHandler>:

/**
 * @brief This function handles CAN2 RX0 interrupts.
 */
void CAN2_RX0_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN2_RX0_IRQn 0 */

	/* USER CODE END CAN2_RX0_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan2);
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <CAN2_RX0_IRQHandler+0x10>)
 800233e:	f001 f889 	bl	8003454 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN2_RX0_IRQn 1 */

	/* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	2000161c 	.word	0x2000161c

0800234c <CAN2_RX1_IRQHandler>:

/**
 * @brief This function handles CAN2 RX1 interrupt.
 */
void CAN2_RX1_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN2_RX1_IRQn 0 */

	/* USER CODE END CAN2_RX1_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan2);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <CAN2_RX1_IRQHandler+0x10>)
 8002352:	f001 f87f 	bl	8003454 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN2_RX1_IRQn 1 */

	/* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	2000161c 	.word	0x2000161c

08002360 <CAN2_SCE_IRQHandler>:

/**
 * @brief This function handles CAN2 SCE interrupt.
 */
void CAN2_SCE_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CAN2_SCE_IRQn 0 */

	/* USER CODE END CAN2_SCE_IRQn 0 */
	HAL_CAN_IRQHandler(&hcan2);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <CAN2_SCE_IRQHandler+0x10>)
 8002366:	f001 f875 	bl	8003454 <HAL_CAN_IRQHandler>
	/* USER CODE BEGIN CAN2_SCE_IRQn 1 */

	/* USER CODE END CAN2_SCE_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000161c 	.word	0x2000161c

08002374 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
	return 1;
 8002378:	2301      	movs	r3, #1
}
 800237a:	4618      	mov	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_kill>:

int _kill(int pid, int sig)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800238e:	f003 fb5b 	bl	8005a48 <__errno>
 8002392:	4602      	mov	r2, r0
 8002394:	2316      	movs	r3, #22
 8002396:	6013      	str	r3, [r2, #0]
	return -1;
 8002398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_exit>:

void _exit (int status)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ffe7 	bl	8002384 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023b6:	e7fe      	b.n	80023b6 <_exit+0x12>

080023b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	e00a      	b.n	80023e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023ca:	f3af 8000 	nop.w
 80023ce:	4601      	mov	r1, r0
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	60ba      	str	r2, [r7, #8]
 80023d6:	b2ca      	uxtb	r2, r1
 80023d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	dbf0      	blt.n	80023ca <_read+0x12>
	}

return len;
 80023e8:	687b      	ldr	r3, [r7, #4]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	60f8      	str	r0, [r7, #12]
 80023fa:	60b9      	str	r1, [r7, #8]
 80023fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e009      	b.n	8002418 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	60ba      	str	r2, [r7, #8]
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3301      	adds	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	429a      	cmp	r2, r3
 800241e:	dbf1      	blt.n	8002404 <_write+0x12>
	}
	return len;
 8002420:	687b      	ldr	r3, [r7, #4]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <_close>:

int _close(int file)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
	return -1;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002452:	605a      	str	r2, [r3, #4]
	return 0;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <_isatty>:

int _isatty(int file)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
	return 1;
 800246a:	2301      	movs	r3, #1
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
	return 0;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <_sbrk+0x50>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <_sbrk+0x16>
		heap_end = &end;
 80024a4:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <_sbrk+0x50>)
 80024a6:	4a10      	ldr	r2, [pc, #64]	; (80024e8 <_sbrk+0x54>)
 80024a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <_sbrk+0x50>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <_sbrk+0x50>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4413      	add	r3, r2
 80024b8:	466a      	mov	r2, sp
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d907      	bls.n	80024ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80024be:	f003 fac3 	bl	8005a48 <__errno>
 80024c2:	4602      	mov	r2, r0
 80024c4:	230c      	movs	r3, #12
 80024c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024cc:	e006      	b.n	80024dc <_sbrk+0x48>
	}

	heap_end += incr;
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <_sbrk+0x50>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	4a03      	ldr	r2, [pc, #12]	; (80024e4 <_sbrk+0x50>)
 80024d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80024da:	68fb      	ldr	r3, [r7, #12]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20001610 	.word	0x20001610
 80024e8:	20001828 	.word	0x20001828

080024ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <SystemInit+0x28>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	4a07      	ldr	r2, [pc, #28]	; (8002514 <SystemInit+0x28>)
 80024f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002500:	4b04      	ldr	r3, [pc, #16]	; (8002514 <SystemInit+0x28>)
 8002502:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002506:	609a      	str	r2, [r3, #8]
#endif
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <MX_USART1_UART_Init+0x4c>)
 800251e:	4a12      	ldr	r2, [pc, #72]	; (8002568 <MX_USART1_UART_Init+0x50>)
 8002520:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <MX_USART1_UART_Init+0x4c>)
 8002524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002528:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <MX_USART1_UART_Init+0x4c>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <MX_USART1_UART_Init+0x4c>)
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <MX_USART1_UART_Init+0x4c>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <MX_USART1_UART_Init+0x4c>)
 800253e:	220c      	movs	r2, #12
 8002540:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <MX_USART1_UART_Init+0x4c>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <MX_USART1_UART_Init+0x4c>)
 800254a:	2200      	movs	r2, #0
 800254c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800254e:	4805      	ldr	r0, [pc, #20]	; (8002564 <MX_USART1_UART_Init+0x4c>)
 8002550:	f002 fb8a 	bl	8004c68 <HAL_UART_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800255a:	f7fe fb03 	bl	8000b64 <Error_Handler>
  }

}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	200017a0 	.word	0x200017a0
 8002568:	40011000 	.word	0x40011000

0800256c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <MX_USART2_UART_Init+0x4c>)
 8002572:	4a12      	ldr	r2, [pc, #72]	; (80025bc <MX_USART2_UART_Init+0x50>)
 8002574:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <MX_USART2_UART_Init+0x4c>)
 8002578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800257c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <MX_USART2_UART_Init+0x4c>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <MX_USART2_UART_Init+0x4c>)
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <MX_USART2_UART_Init+0x4c>)
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <MX_USART2_UART_Init+0x4c>)
 8002592:	220c      	movs	r2, #12
 8002594:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <MX_USART2_UART_Init+0x4c>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <MX_USART2_UART_Init+0x4c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025a2:	4805      	ldr	r0, [pc, #20]	; (80025b8 <MX_USART2_UART_Init+0x4c>)
 80025a4:	f002 fb60 	bl	8004c68 <HAL_UART_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025ae:	f7fe fad9 	bl	8000b64 <Error_Handler>
  }

}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200017e0 	.word	0x200017e0
 80025bc:	40004400 	.word	0x40004400

080025c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	; 0x30
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 031c 	add.w	r3, r7, #28
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a3a      	ldr	r2, [pc, #232]	; (80026c8 <HAL_UART_MspInit+0x108>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d135      	bne.n	800264e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	4b39      	ldr	r3, [pc, #228]	; (80026cc <HAL_UART_MspInit+0x10c>)
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	4a38      	ldr	r2, [pc, #224]	; (80026cc <HAL_UART_MspInit+0x10c>)
 80025ec:	f043 0310 	orr.w	r3, r3, #16
 80025f0:	6453      	str	r3, [r2, #68]	; 0x44
 80025f2:	4b36      	ldr	r3, [pc, #216]	; (80026cc <HAL_UART_MspInit+0x10c>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	f003 0310 	and.w	r3, r3, #16
 80025fa:	61bb      	str	r3, [r7, #24]
 80025fc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	4b32      	ldr	r3, [pc, #200]	; (80026cc <HAL_UART_MspInit+0x10c>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a31      	ldr	r2, [pc, #196]	; (80026cc <HAL_UART_MspInit+0x10c>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <HAL_UART_MspInit+0x10c>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800261a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800261e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800262c:	2307      	movs	r3, #7
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002630:	f107 031c 	add.w	r3, r7, #28
 8002634:	4619      	mov	r1, r3
 8002636:	4826      	ldr	r0, [pc, #152]	; (80026d0 <HAL_UART_MspInit+0x110>)
 8002638:	f001 fa7a 	bl	8003b30 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	2100      	movs	r1, #0
 8002640:	2025      	movs	r0, #37	; 0x25
 8002642:	f001 fa03 	bl	8003a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002646:	2025      	movs	r0, #37	; 0x25
 8002648:	f001 fa2c 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800264c:	e038      	b.n	80026c0 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a20      	ldr	r2, [pc, #128]	; (80026d4 <HAL_UART_MspInit+0x114>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d133      	bne.n	80026c0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_UART_MspInit+0x10c>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <HAL_UART_MspInit+0x10c>)
 8002662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002666:	6413      	str	r3, [r2, #64]	; 0x40
 8002668:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_UART_MspInit+0x10c>)
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]
 8002678:	4b14      	ldr	r3, [pc, #80]	; (80026cc <HAL_UART_MspInit+0x10c>)
 800267a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267c:	4a13      	ldr	r2, [pc, #76]	; (80026cc <HAL_UART_MspInit+0x10c>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6313      	str	r3, [r2, #48]	; 0x30
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_UART_MspInit+0x10c>)
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002690:	230c      	movs	r3, #12
 8002692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	2302      	movs	r3, #2
 8002696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269c:	2303      	movs	r3, #3
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026a0:	2307      	movs	r3, #7
 80026a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a4:	f107 031c 	add.w	r3, r7, #28
 80026a8:	4619      	mov	r1, r3
 80026aa:	4809      	ldr	r0, [pc, #36]	; (80026d0 <HAL_UART_MspInit+0x110>)
 80026ac:	f001 fa40 	bl	8003b30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026b0:	2200      	movs	r2, #0
 80026b2:	2100      	movs	r1, #0
 80026b4:	2026      	movs	r0, #38	; 0x26
 80026b6:	f001 f9c9 	bl	8003a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026ba:	2026      	movs	r0, #38	; 0x26
 80026bc:	f001 f9f2 	bl	8003aa4 <HAL_NVIC_EnableIRQ>
}
 80026c0:	bf00      	nop
 80026c2:	3730      	adds	r7, #48	; 0x30
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40011000 	.word	0x40011000
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020000 	.word	0x40020000
 80026d4:	40004400 	.word	0x40004400

080026d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002710 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026de:	e003      	b.n	80026e8 <LoopCopyDataInit>

080026e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026e6:	3104      	adds	r1, #4

080026e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026e8:	480b      	ldr	r0, [pc, #44]	; (8002718 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026f0:	d3f6      	bcc.n	80026e0 <CopyDataInit>
  ldr  r2, =_sbss
 80026f2:	4a0b      	ldr	r2, [pc, #44]	; (8002720 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026f4:	e002      	b.n	80026fc <LoopFillZerobss>

080026f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026f8:	f842 3b04 	str.w	r3, [r2], #4

080026fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026fc:	4b09      	ldr	r3, [pc, #36]	; (8002724 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002700:	d3f9      	bcc.n	80026f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002702:	f7ff fef3 	bl	80024ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002706:	f003 f9b7 	bl	8005a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800270a:	f7fe f9ad 	bl	8000a68 <main>
  bx  lr    
 800270e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002710:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002714:	080077ac 	.word	0x080077ac
  ldr  r0, =_sdata
 8002718:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800271c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002720:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002724:	20001828 	.word	0x20001828

08002728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002728:	e7fe      	b.n	8002728 <ADC_IRQHandler>
	...

0800272c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002730:	4b0e      	ldr	r3, [pc, #56]	; (800276c <HAL_Init+0x40>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0d      	ldr	r2, [pc, #52]	; (800276c <HAL_Init+0x40>)
 8002736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800273a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_Init+0x40>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0a      	ldr	r2, [pc, #40]	; (800276c <HAL_Init+0x40>)
 8002742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_Init+0x40>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a07      	ldr	r2, [pc, #28]	; (800276c <HAL_Init+0x40>)
 800274e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002754:	2003      	movs	r0, #3
 8002756:	f001 f959 	bl	8003a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800275a:	2000      	movs	r0, #0
 800275c:	f000 f808 	bl	8002770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002760:	f7ff fd3c 	bl	80021dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023c00 	.word	0x40023c00

08002770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_InitTick+0x54>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_InitTick+0x58>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002786:	fbb3 f3f1 	udiv	r3, r3, r1
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f001 f9a0 	bl	8003ad4 <HAL_SYSTICK_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e00e      	b.n	80027bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b0f      	cmp	r3, #15
 80027a2:	d80a      	bhi.n	80027ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a4:	2200      	movs	r2, #0
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027ac:	f001 f94e 	bl	8003a4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b0:	4a06      	ldr	r2, [pc, #24]	; (80027cc <HAL_InitTick+0x5c>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e000      	b.n	80027bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000000 	.word	0x20000000
 80027c8:	20000008 	.word	0x20000008
 80027cc:	20000004 	.word	0x20000004

080027d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_IncTick+0x20>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_IncTick+0x24>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <HAL_IncTick+0x24>)
 80027e2:	6013      	str	r3, [r2, #0]
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20000008 	.word	0x20000008
 80027f4:	20001820 	.word	0x20001820

080027f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return uwTick;
 80027fc:	4b03      	ldr	r3, [pc, #12]	; (800280c <HAL_GetTick+0x14>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	20001820 	.word	0x20001820

08002810 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e20e      	b.n	8002c40 <HAL_CAN_Init+0x430>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4aa0      	ldr	r2, [pc, #640]	; (8002aa8 <HAL_CAN_Init+0x298>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d009      	beq.n	8002840 <HAL_CAN_Init+0x30>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a9e      	ldr	r2, [pc, #632]	; (8002aac <HAL_CAN_Init+0x29c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d004      	beq.n	8002840 <HAL_CAN_Init+0x30>
 8002836:	f240 111d 	movw	r1, #285	; 0x11d
 800283a:	489d      	ldr	r0, [pc, #628]	; (8002ab0 <HAL_CAN_Init+0x2a0>)
 800283c:	f7fe f999 	bl	8000b72 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	7e1b      	ldrb	r3, [r3, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_CAN_Init+0x4a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7e1b      	ldrb	r3, [r3, #24]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d004      	beq.n	800285a <HAL_CAN_Init+0x4a>
 8002850:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8002854:	4896      	ldr	r0, [pc, #600]	; (8002ab0 <HAL_CAN_Init+0x2a0>)
 8002856:	f7fe f98c 	bl	8000b72 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	7e5b      	ldrb	r3, [r3, #25]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_CAN_Init+0x64>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	7e5b      	ldrb	r3, [r3, #25]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d004      	beq.n	8002874 <HAL_CAN_Init+0x64>
 800286a:	f240 111f 	movw	r1, #287	; 0x11f
 800286e:	4890      	ldr	r0, [pc, #576]	; (8002ab0 <HAL_CAN_Init+0x2a0>)
 8002870:	f7fe f97f 	bl	8000b72 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	7e9b      	ldrb	r3, [r3, #26]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_CAN_Init+0x7e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7e9b      	ldrb	r3, [r3, #26]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d004      	beq.n	800288e <HAL_CAN_Init+0x7e>
 8002884:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002888:	4889      	ldr	r0, [pc, #548]	; (8002ab0 <HAL_CAN_Init+0x2a0>)
 800288a:	f7fe f972 	bl	8000b72 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	7edb      	ldrb	r3, [r3, #27]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_CAN_Init+0x98>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	7edb      	ldrb	r3, [r3, #27]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d004      	beq.n	80028a8 <HAL_CAN_Init+0x98>
 800289e:	f240 1121 	movw	r1, #289	; 0x121
 80028a2:	4883      	ldr	r0, [pc, #524]	; (8002ab0 <HAL_CAN_Init+0x2a0>)
 80028a4:	f7fe f965 	bl	8000b72 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	7f1b      	ldrb	r3, [r3, #28]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_CAN_Init+0xb2>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	7f1b      	ldrb	r3, [r3, #28]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d004      	beq.n	80028c2 <HAL_CAN_Init+0xb2>
 80028b8:	f44f 7191 	mov.w	r1, #290	; 0x122
 80028bc:	487c      	ldr	r0, [pc, #496]	; (8002ab0 <HAL_CAN_Init+0x2a0>)
 80028be:	f7fe f958 	bl	8000b72 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7f5b      	ldrb	r3, [r3, #29]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d008      	beq.n	80028dc <HAL_CAN_Init+0xcc>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7f5b      	ldrb	r3, [r3, #29]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d004      	beq.n	80028dc <HAL_CAN_Init+0xcc>
 80028d2:	f240 1123 	movw	r1, #291	; 0x123
 80028d6:	4876      	ldr	r0, [pc, #472]	; (8002ab0 <HAL_CAN_Init+0x2a0>)
 80028d8:	f7fe f94b 	bl	8000b72 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_CAN_Init+0xfc>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ec:	d00e      	beq.n	800290c <HAL_CAN_Init+0xfc>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028f6:	d009      	beq.n	800290c <HAL_CAN_Init+0xfc>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002900:	d004      	beq.n	800290c <HAL_CAN_Init+0xfc>
 8002902:	f44f 7192 	mov.w	r1, #292	; 0x124
 8002906:	486a      	ldr	r0, [pc, #424]	; (8002ab0 <HAL_CAN_Init+0x2a0>)
 8002908:	f7fe f933 	bl	8000b72 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d013      	beq.n	800293c <HAL_CAN_Init+0x12c>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800291c:	d00e      	beq.n	800293c <HAL_CAN_Init+0x12c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002926:	d009      	beq.n	800293c <HAL_CAN_Init+0x12c>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002930:	d004      	beq.n	800293c <HAL_CAN_Init+0x12c>
 8002932:	f240 1125 	movw	r1, #293	; 0x125
 8002936:	485e      	ldr	r0, [pc, #376]	; (8002ab0 <HAL_CAN_Init+0x2a0>)
 8002938:	f7fe f91b 	bl	8000b72 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d04f      	beq.n	80029e4 <HAL_CAN_Init+0x1d4>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800294c:	d04a      	beq.n	80029e4 <HAL_CAN_Init+0x1d4>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002956:	d045      	beq.n	80029e4 <HAL_CAN_Init+0x1d4>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002960:	d040      	beq.n	80029e4 <HAL_CAN_Init+0x1d4>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800296a:	d03b      	beq.n	80029e4 <HAL_CAN_Init+0x1d4>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002974:	d036      	beq.n	80029e4 <HAL_CAN_Init+0x1d4>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800297e:	d031      	beq.n	80029e4 <HAL_CAN_Init+0x1d4>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8002988:	d02c      	beq.n	80029e4 <HAL_CAN_Init+0x1d4>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002992:	d027      	beq.n	80029e4 <HAL_CAN_Init+0x1d4>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f5b3 2f10 	cmp.w	r3, #589824	; 0x90000
 800299c:	d022      	beq.n	80029e4 <HAL_CAN_Init+0x1d4>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80029a6:	d01d      	beq.n	80029e4 <HAL_CAN_Init+0x1d4>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f5b3 2f30 	cmp.w	r3, #720896	; 0xb0000
 80029b0:	d018      	beq.n	80029e4 <HAL_CAN_Init+0x1d4>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029ba:	d013      	beq.n	80029e4 <HAL_CAN_Init+0x1d4>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	f5b3 2f50 	cmp.w	r3, #851968	; 0xd0000
 80029c4:	d00e      	beq.n	80029e4 <HAL_CAN_Init+0x1d4>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029ce:	d009      	beq.n	80029e4 <HAL_CAN_Init+0x1d4>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	f5b3 2f70 	cmp.w	r3, #983040	; 0xf0000
 80029d8:	d004      	beq.n	80029e4 <HAL_CAN_Init+0x1d4>
 80029da:	f44f 7193 	mov.w	r1, #294	; 0x126
 80029de:	4834      	ldr	r0, [pc, #208]	; (8002ab0 <HAL_CAN_Init+0x2a0>)
 80029e0:	f7fe f8c7 	bl	8000b72 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d027      	beq.n	8002a3c <HAL_CAN_Init+0x22c>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029f4:	d022      	beq.n	8002a3c <HAL_CAN_Init+0x22c>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029fe:	d01d      	beq.n	8002a3c <HAL_CAN_Init+0x22c>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a08:	d018      	beq.n	8002a3c <HAL_CAN_Init+0x22c>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a12:	d013      	beq.n	8002a3c <HAL_CAN_Init+0x22c>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8002a1c:	d00e      	beq.n	8002a3c <HAL_CAN_Init+0x22c>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002a26:	d009      	beq.n	8002a3c <HAL_CAN_Init+0x22c>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8002a30:	d004      	beq.n	8002a3c <HAL_CAN_Init+0x22c>
 8002a32:	f240 1127 	movw	r1, #295	; 0x127
 8002a36:	481e      	ldr	r0, [pc, #120]	; (8002ab0 <HAL_CAN_Init+0x2a0>)
 8002a38:	f7fe f89b 	bl	8000b72 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d004      	beq.n	8002a4e <HAL_CAN_Init+0x23e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4c:	d904      	bls.n	8002a58 <HAL_CAN_Init+0x248>
 8002a4e:	f44f 7194 	mov.w	r1, #296	; 0x128
 8002a52:	4817      	ldr	r0, [pc, #92]	; (8002ab0 <HAL_CAN_Init+0x2a0>)
 8002a54:	f7fe f88d 	bl	8000b72 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d102      	bne.n	8002a6a <HAL_CAN_Init+0x25a>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7fd fdf3 	bl	8000650 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0202 	bic.w	r2, r2, #2
 8002a78:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a7a:	f7ff febd 	bl	80027f8 <HAL_GetTick>
 8002a7e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a80:	e018      	b.n	8002ab4 <HAL_CAN_Init+0x2a4>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a82:	f7ff feb9 	bl	80027f8 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b0a      	cmp	r3, #10
 8002a8e:	d911      	bls.n	8002ab4 <HAL_CAN_Init+0x2a4>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2205      	movs	r2, #5
 8002aa0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0cb      	b.n	8002c40 <HAL_CAN_Init+0x430>
 8002aa8:	40006400 	.word	0x40006400
 8002aac:	40006800 	.word	0x40006800
 8002ab0:	08007348 	.word	0x08007348
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1df      	bne.n	8002a82 <HAL_CAN_Init+0x272>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f042 0201 	orr.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ad2:	f7ff fe91 	bl	80027f8 <HAL_GetTick>
 8002ad6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ad8:	e012      	b.n	8002b00 <HAL_CAN_Init+0x2f0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ada:	f7ff fe8d 	bl	80027f8 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b0a      	cmp	r3, #10
 8002ae6:	d90b      	bls.n	8002b00 <HAL_CAN_Init+0x2f0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2205      	movs	r2, #5
 8002af8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e09f      	b.n	8002c40 <HAL_CAN_Init+0x430>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0e5      	beq.n	8002ada <HAL_CAN_Init+0x2ca>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	7e1b      	ldrb	r3, [r3, #24]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d108      	bne.n	8002b28 <HAL_CAN_Init+0x318>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e007      	b.n	8002b38 <HAL_CAN_Init+0x328>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7e5b      	ldrb	r3, [r3, #25]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d108      	bne.n	8002b52 <HAL_CAN_Init+0x342>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e007      	b.n	8002b62 <HAL_CAN_Init+0x352>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7e9b      	ldrb	r3, [r3, #26]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d108      	bne.n	8002b7c <HAL_CAN_Init+0x36c>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0220 	orr.w	r2, r2, #32
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e007      	b.n	8002b8c <HAL_CAN_Init+0x37c>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0220 	bic.w	r2, r2, #32
 8002b8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	7edb      	ldrb	r3, [r3, #27]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d108      	bne.n	8002ba6 <HAL_CAN_Init+0x396>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0210 	bic.w	r2, r2, #16
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	e007      	b.n	8002bb6 <HAL_CAN_Init+0x3a6>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0210 	orr.w	r2, r2, #16
 8002bb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	7f1b      	ldrb	r3, [r3, #28]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d108      	bne.n	8002bd0 <HAL_CAN_Init+0x3c0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f042 0208 	orr.w	r2, r2, #8
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e007      	b.n	8002be0 <HAL_CAN_Init+0x3d0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0208 	bic.w	r2, r2, #8
 8002bde:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	7f5b      	ldrb	r3, [r3, #29]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d108      	bne.n	8002bfa <HAL_CAN_Init+0x3ea>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0204 	orr.w	r2, r2, #4
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	e007      	b.n	8002c0a <HAL_CAN_Init+0x3fa>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0204 	bic.w	r2, r2, #4
 8002c08:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	ea42 0103 	orr.w	r1, r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	1e5a      	subs	r2, r3, #1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c5e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c60:	7cfb      	ldrb	r3, [r7, #19]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d003      	beq.n	8002c6e <HAL_CAN_ConfigFilter+0x26>
 8002c66:	7cfb      	ldrb	r3, [r7, #19]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	f040 812c 	bne.w	8002ec6 <HAL_CAN_ConfigFilter+0x27e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdHigh));
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c76:	d304      	bcc.n	8002c82 <HAL_CAN_ConfigFilter+0x3a>
 8002c78:	f44f 7154 	mov.w	r1, #848	; 0x350
 8002c7c:	4897      	ldr	r0, [pc, #604]	; (8002edc <HAL_CAN_ConfigFilter+0x294>)
 8002c7e:	f7fd ff78 	bl	8000b72 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterIdLow));
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8a:	d304      	bcc.n	8002c96 <HAL_CAN_ConfigFilter+0x4e>
 8002c8c:	f240 3151 	movw	r1, #849	; 0x351
 8002c90:	4892      	ldr	r0, [pc, #584]	; (8002edc <HAL_CAN_ConfigFilter+0x294>)
 8002c92:	f7fd ff6e 	bl	8000b72 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdHigh));
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9e:	d304      	bcc.n	8002caa <HAL_CAN_ConfigFilter+0x62>
 8002ca0:	f240 3152 	movw	r1, #850	; 0x352
 8002ca4:	488d      	ldr	r0, [pc, #564]	; (8002edc <HAL_CAN_ConfigFilter+0x294>)
 8002ca6:	f7fd ff64 	bl	8000b72 <assert_failed>
    assert_param(IS_CAN_FILTER_ID_HALFWORD(sFilterConfig->FilterMaskIdLow));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb2:	d304      	bcc.n	8002cbe <HAL_CAN_ConfigFilter+0x76>
 8002cb4:	f240 3153 	movw	r1, #851	; 0x353
 8002cb8:	4888      	ldr	r0, [pc, #544]	; (8002edc <HAL_CAN_ConfigFilter+0x294>)
 8002cba:	f7fd ff5a 	bl	8000b72 <assert_failed>
    assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d008      	beq.n	8002cd8 <HAL_CAN_ConfigFilter+0x90>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d004      	beq.n	8002cd8 <HAL_CAN_ConfigFilter+0x90>
 8002cce:	f44f 7155 	mov.w	r1, #852	; 0x354
 8002cd2:	4882      	ldr	r0, [pc, #520]	; (8002edc <HAL_CAN_ConfigFilter+0x294>)
 8002cd4:	f7fd ff4d 	bl	8000b72 <assert_failed>
    assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_CAN_ConfigFilter+0xaa>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d004      	beq.n	8002cf2 <HAL_CAN_ConfigFilter+0xaa>
 8002ce8:	f240 3155 	movw	r1, #853	; 0x355
 8002cec:	487b      	ldr	r0, [pc, #492]	; (8002edc <HAL_CAN_ConfigFilter+0x294>)
 8002cee:	f7fd ff40 	bl	8000b72 <assert_failed>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d008      	beq.n	8002d0c <HAL_CAN_ConfigFilter+0xc4>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d004      	beq.n	8002d0c <HAL_CAN_ConfigFilter+0xc4>
 8002d02:	f240 3156 	movw	r1, #854	; 0x356
 8002d06:	4875      	ldr	r0, [pc, #468]	; (8002edc <HAL_CAN_ConfigFilter+0x294>)
 8002d08:	f7fd ff33 	bl	8000b72 <assert_failed>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d008      	beq.n	8002d26 <HAL_CAN_ConfigFilter+0xde>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d004      	beq.n	8002d26 <HAL_CAN_ConfigFilter+0xde>
 8002d1c:	f240 3157 	movw	r1, #855	; 0x357
 8002d20:	486e      	ldr	r0, [pc, #440]	; (8002edc <HAL_CAN_ConfigFilter+0x294>)
 8002d22:	f7fd ff26 	bl	8000b72 <assert_failed>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002d26:	4b6e      	ldr	r3, [pc, #440]	; (8002ee0 <HAL_CAN_ConfigFilter+0x298>)
 8002d28:	617b      	str	r3, [r7, #20]

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->FilterBank));
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	2b1b      	cmp	r3, #27
 8002d30:	d904      	bls.n	8002d3c <HAL_CAN_ConfigFilter+0xf4>
 8002d32:	f240 3172 	movw	r1, #882	; 0x372
 8002d36:	4869      	ldr	r0, [pc, #420]	; (8002edc <HAL_CAN_ConfigFilter+0x294>)
 8002d38:	f7fd ff1b 	bl	8000b72 <assert_failed>
    assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	2b1b      	cmp	r3, #27
 8002d42:	d904      	bls.n	8002d4e <HAL_CAN_ConfigFilter+0x106>
 8002d44:	f240 3173 	movw	r1, #883	; 0x373
 8002d48:	4864      	ldr	r0, [pc, #400]	; (8002edc <HAL_CAN_ConfigFilter+0x294>)
 8002d4a:	f7fd ff12 	bl	8000b72 <assert_failed>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d54:	f043 0201 	orr.w	r2, r3, #1
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d64:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	401a      	ands	r2, r3
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d123      	bne.n	8002df4 <HAL_CAN_ConfigFilter+0x1ac>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	401a      	ands	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002dce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	3248      	adds	r2, #72	; 0x48
 8002dd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002de8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dea:	6979      	ldr	r1, [r7, #20]
 8002dec:	3348      	adds	r3, #72	; 0x48
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	440b      	add	r3, r1
 8002df2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d122      	bne.n	8002e42 <HAL_CAN_ConfigFilter+0x1fa>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e1c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	3248      	adds	r2, #72	; 0x48
 8002e22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e36:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e38:	6979      	ldr	r1, [r7, #20]
 8002e3a:	3348      	adds	r3, #72	; 0x48
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	440b      	add	r3, r1
 8002e40:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HAL_CAN_ConfigFilter+0x216>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	401a      	ands	r2, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e5c:	e007      	b.n	8002e6e <HAL_CAN_ConfigFilter+0x226>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d109      	bne.n	8002e8a <HAL_CAN_ConfigFilter+0x242>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	401a      	ands	r2, r3
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002e88:	e007      	b.n	8002e9a <HAL_CAN_ConfigFilter+0x252>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_CAN_ConfigFilter+0x26a>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002eb8:	f023 0201 	bic.w	r2, r3, #1
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e006      	b.n	8002ed4 <HAL_CAN_ConfigFilter+0x28c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
  }
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	08007348 	.word	0x08007348
 8002ee0:	40006400 	.word	0x40006400

08002ee4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d12e      	bne.n	8002f56 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f10:	f7ff fc72 	bl	80027f8 <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f16:	e012      	b.n	8002f3e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f18:	f7ff fc6e 	bl	80027f8 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b0a      	cmp	r3, #10
 8002f24:	d90b      	bls.n	8002f3e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2205      	movs	r2, #5
 8002f36:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e012      	b.n	8002f64 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e5      	bne.n	8002f18 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e006      	b.n	8002f64 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
  }
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f80:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d008      	beq.n	8002fa4 <HAL_CAN_AddTxMessage+0x38>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d004      	beq.n	8002fa4 <HAL_CAN_AddTxMessage+0x38>
 8002f9a:	f240 41e9 	movw	r1, #1257	; 0x4e9
 8002f9e:	4884      	ldr	r0, [pc, #528]	; (80031b0 <HAL_CAN_AddTxMessage+0x244>)
 8002fa0:	f7fd fde7 	bl	8000b72 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_CAN_AddTxMessage+0x52>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d004      	beq.n	8002fbe <HAL_CAN_AddTxMessage+0x52>
 8002fb4:	f240 41ea 	movw	r1, #1258	; 0x4ea
 8002fb8:	487d      	ldr	r0, [pc, #500]	; (80031b0 <HAL_CAN_AddTxMessage+0x244>)
 8002fba:	f7fd fdda 	bl	8000b72 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d904      	bls.n	8002fd0 <HAL_CAN_AddTxMessage+0x64>
 8002fc6:	f240 41eb 	movw	r1, #1259	; 0x4eb
 8002fca:	4879      	ldr	r0, [pc, #484]	; (80031b0 <HAL_CAN_AddTxMessage+0x244>)
 8002fcc:	f7fd fdd1 	bl	8000b72 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10a      	bne.n	8002fee <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fe0:	d30f      	bcc.n	8003002 <HAL_CAN_AddTxMessage+0x96>
 8002fe2:	f240 41ee 	movw	r1, #1262	; 0x4ee
 8002fe6:	4872      	ldr	r0, [pc, #456]	; (80031b0 <HAL_CAN_AddTxMessage+0x244>)
 8002fe8:	f7fd fdc3 	bl	8000b72 <assert_failed>
 8002fec:	e009      	b.n	8003002 <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff6:	d304      	bcc.n	8003002 <HAL_CAN_AddTxMessage+0x96>
 8002ff8:	f240 41f2 	movw	r1, #1266	; 0x4f2
 8002ffc:	486c      	ldr	r0, [pc, #432]	; (80031b0 <HAL_CAN_AddTxMessage+0x244>)
 8002ffe:	f7fd fdb8 	bl	8000b72 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	7d1b      	ldrb	r3, [r3, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <HAL_CAN_AddTxMessage+0xb0>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	7d1b      	ldrb	r3, [r3, #20]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d004      	beq.n	800301c <HAL_CAN_AddTxMessage+0xb0>
 8003012:	f240 41f4 	movw	r1, #1268	; 0x4f4
 8003016:	4866      	ldr	r0, [pc, #408]	; (80031b0 <HAL_CAN_AddTxMessage+0x244>)
 8003018:	f7fd fdab 	bl	8000b72 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800301c:	7ffb      	ldrb	r3, [r7, #31]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d003      	beq.n	800302a <HAL_CAN_AddTxMessage+0xbe>
 8003022:	7ffb      	ldrb	r3, [r7, #31]
 8003024:	2b02      	cmp	r3, #2
 8003026:	f040 80b8 	bne.w	800319a <HAL_CAN_AddTxMessage+0x22e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800303a:	2b00      	cmp	r3, #0
 800303c:	d105      	bne.n	800304a <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80a0 	beq.w	800318a <HAL_CAN_AddTxMessage+0x21e>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	0e1b      	lsrs	r3, r3, #24
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d907      	bls.n	800306a <HAL_CAN_AddTxMessage+0xfe>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e09e      	b.n	80031a8 <HAL_CAN_AddTxMessage+0x23c>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800306a:	2201      	movs	r2, #1
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	409a      	lsls	r2, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10d      	bne.n	8003098 <HAL_CAN_AddTxMessage+0x12c>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003086:	68f9      	ldr	r1, [r7, #12]
 8003088:	6809      	ldr	r1, [r1, #0]
 800308a:	431a      	orrs	r2, r3
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	3318      	adds	r3, #24
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	440b      	add	r3, r1
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e00f      	b.n	80030b8 <HAL_CAN_AddTxMessage+0x14c>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030a2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030a8:	68f9      	ldr	r1, [r7, #12]
 80030aa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80030ac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	3318      	adds	r3, #24
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	440b      	add	r3, r1
 80030b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6819      	ldr	r1, [r3, #0]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	3318      	adds	r3, #24
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	440b      	add	r3, r1
 80030c8:	3304      	adds	r3, #4
 80030ca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	7d1b      	ldrb	r3, [r3, #20]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d111      	bne.n	80030f8 <HAL_CAN_AddTxMessage+0x18c>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	3318      	adds	r3, #24
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	4413      	add	r3, r2
 80030e0:	3304      	adds	r3, #4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	6811      	ldr	r1, [r2, #0]
 80030e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3318      	adds	r3, #24
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	440b      	add	r3, r1
 80030f4:	3304      	adds	r3, #4
 80030f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3307      	adds	r3, #7
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	061a      	lsls	r2, r3, #24
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3306      	adds	r3, #6
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	041b      	lsls	r3, r3, #16
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3305      	adds	r3, #5
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	021b      	lsls	r3, r3, #8
 8003112:	4313      	orrs	r3, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	3204      	adds	r2, #4
 8003118:	7812      	ldrb	r2, [r2, #0]
 800311a:	4610      	mov	r0, r2
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	6811      	ldr	r1, [r2, #0]
 8003120:	ea43 0200 	orr.w	r2, r3, r0
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	440b      	add	r3, r1
 800312a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800312e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3303      	adds	r3, #3
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	061a      	lsls	r2, r3, #24
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3302      	adds	r3, #2
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	041b      	lsls	r3, r3, #16
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3301      	adds	r3, #1
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	021b      	lsls	r3, r3, #8
 800314a:	4313      	orrs	r3, r2
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	7812      	ldrb	r2, [r2, #0]
 8003150:	4610      	mov	r0, r2
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	6811      	ldr	r1, [r2, #0]
 8003156:	ea43 0200 	orr.w	r2, r3, r0
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	440b      	add	r3, r1
 8003160:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003164:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	3318      	adds	r3, #24
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	4413      	add	r3, r2
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	6811      	ldr	r1, [r2, #0]
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	3318      	adds	r3, #24
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	440b      	add	r3, r1
 8003184:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	e00e      	b.n	80031a8 <HAL_CAN_AddTxMessage+0x23c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e006      	b.n	80031a8 <HAL_CAN_AddTxMessage+0x23c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
  }
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3720      	adds	r7, #32
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	08007348 	.word	0x08007348

080031b4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <HAL_CAN_GetRxMessage+0x2c>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d004      	beq.n	80031e0 <HAL_CAN_GetRxMessage+0x2c>
 80031d6:	f44f 61be 	mov.w	r1, #1520	; 0x5f0
 80031da:	4884      	ldr	r0, [pc, #528]	; (80033ec <HAL_CAN_GetRxMessage+0x238>)
 80031dc:	f7fd fcc9 	bl	8000b72 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d003      	beq.n	80031ee <HAL_CAN_GetRxMessage+0x3a>
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	f040 80f3 	bne.w	80033d4 <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10e      	bne.n	8003212 <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d116      	bne.n	8003230 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e0e7      	b.n	80033e2 <HAL_CAN_GetRxMessage+0x22e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d107      	bne.n	8003230 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0d8      	b.n	80033e2 <HAL_CAN_GetRxMessage+0x22e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	331b      	adds	r3, #27
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	4413      	add	r3, r2
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0204 	and.w	r2, r3, #4
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10c      	bne.n	8003268 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	331b      	adds	r3, #27
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	4413      	add	r3, r2
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	0d5b      	lsrs	r3, r3, #21
 800325e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	e00b      	b.n	8003280 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	331b      	adds	r3, #27
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	4413      	add	r3, r2
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	08db      	lsrs	r3, r3, #3
 8003278:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	331b      	adds	r3, #27
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	4413      	add	r3, r2
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0202 	and.w	r2, r3, #2
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	331b      	adds	r3, #27
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	4413      	add	r3, r2
 80032a2:	3304      	adds	r3, #4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 020f 	and.w	r2, r3, #15
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	331b      	adds	r3, #27
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	4413      	add	r3, r2
 80032ba:	3304      	adds	r3, #4
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	331b      	adds	r3, #27
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	4413      	add	r3, r2
 80032d2:	3304      	adds	r3, #4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	0c1b      	lsrs	r3, r3, #16
 80032d8:	b29a      	uxth	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	0a1a      	lsrs	r2, r3, #8
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	3301      	adds	r3, #1
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	4413      	add	r3, r2
 8003318:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	0c1a      	lsrs	r2, r3, #16
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	3302      	adds	r3, #2
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	4413      	add	r3, r2
 8003332:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	0e1a      	lsrs	r2, r3, #24
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	3303      	adds	r3, #3
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	4413      	add	r3, r2
 800334c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	3304      	adds	r3, #4
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	4413      	add	r3, r2
 8003364:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	0a1a      	lsrs	r2, r3, #8
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	3305      	adds	r3, #5
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	4413      	add	r3, r2
 800337e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0c1a      	lsrs	r2, r3, #16
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	3306      	adds	r3, #6
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	4413      	add	r3, r2
 8003398:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	0e1a      	lsrs	r2, r3, #24
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	3307      	adds	r3, #7
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d108      	bne.n	80033c0 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0220 	orr.w	r2, r2, #32
 80033bc:	60da      	str	r2, [r3, #12]
 80033be:	e007      	b.n	80033d0 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0220 	orr.w	r2, r2, #32
 80033ce:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	e006      	b.n	80033e2 <HAL_CAN_GetRxMessage+0x22e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
  }
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3718      	adds	r7, #24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	08007348 	.word	0x08007348

080033f0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003400:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	4a11      	ldr	r2, [pc, #68]	; (800344c <HAL_CAN_ActivateNotification+0x5c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d904      	bls.n	8003414 <HAL_CAN_ActivateNotification+0x24>
 800340a:	f44f 61d0 	mov.w	r1, #1664	; 0x680
 800340e:	4810      	ldr	r0, [pc, #64]	; (8003450 <HAL_CAN_ActivateNotification+0x60>)
 8003410:	f7fd fbaf 	bl	8000b72 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d002      	beq.n	8003420 <HAL_CAN_ActivateNotification+0x30>
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d109      	bne.n	8003434 <HAL_CAN_ActivateNotification+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6959      	ldr	r1, [r3, #20]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	e006      	b.n	8003442 <HAL_CAN_ActivateNotification+0x52>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
  }
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	00038f7f 	.word	0x00038f7f
 8003450:	08007348 	.word	0x08007348

08003454 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	; 0x28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800345c:	2300      	movs	r3, #0
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d07c      	beq.n	8003594 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d023      	beq.n	80034ec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fe fdc0 	bl	800203c <HAL_CAN_TxMailbox0CompleteCallback>
 80034bc:	e016      	b.n	80034ec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d004      	beq.n	80034d2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
 80034d0:	e00c      	b.n	80034ec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d004      	beq.n	80034e6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
 80034e4:	e002      	b.n	80034ec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f965 	bl	80037b6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d024      	beq.n	8003540 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fe fda1 	bl	8002052 <HAL_CAN_TxMailbox1CompleteCallback>
 8003510:	e016      	b.n	8003540 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003518:	2b00      	cmp	r3, #0
 800351a:	d004      	beq.n	8003526 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
 8003524:	e00c      	b.n	8003540 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800352c:	2b00      	cmp	r3, #0
 800352e:	d004      	beq.n	800353a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
 8003538:	e002      	b.n	8003540 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f945 	bl	80037ca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d024      	beq.n	8003594 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003552:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fe fd82 	bl	8002068 <HAL_CAN_TxMailbox2CompleteCallback>
 8003564:	e016      	b.n	8003594 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d004      	beq.n	800357a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
 8003578:	e00c      	b.n	8003594 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d004      	beq.n	800358e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
 800358c:	e002      	b.n	8003594 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f925 	bl	80037de <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00c      	beq.n	80035b8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d007      	beq.n	80035b8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2210      	movs	r2, #16
 80035b6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	f003 0304 	and.w	r3, r3, #4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d006      	beq.n	80035da <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2208      	movs	r2, #8
 80035d2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f90c 	bl	80037f2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fe fcda 	bl	8001fac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00c      	beq.n	800361c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f003 0310 	and.w	r3, r3, #16
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003612:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2210      	movs	r2, #16
 800361a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00b      	beq.n	800363e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d006      	beq.n	800363e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2208      	movs	r2, #8
 8003636:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f8ee 	bl	800381a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	d009      	beq.n	800365c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f8d5 	bl	8003806 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2210      	movs	r2, #16
 8003676:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f8d8 	bl	800382e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00b      	beq.n	80036a0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b00      	cmp	r3, #0
 8003690:	d006      	beq.n	80036a0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2208      	movs	r2, #8
 8003698:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f8d1 	bl	8003842 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d075      	beq.n	8003796 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d06c      	beq.n	800378e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d008      	beq.n	80036ec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d003      	beq.n	80036ec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	f043 0302 	orr.w	r3, r3, #2
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d008      	beq.n	8003708 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	f043 0304 	orr.w	r3, r3, #4
 8003706:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370e:	2b00      	cmp	r3, #0
 8003710:	d03d      	beq.n	800378e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003718:	2b00      	cmp	r3, #0
 800371a:	d038      	beq.n	800378e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003722:	2b30      	cmp	r3, #48	; 0x30
 8003724:	d017      	beq.n	8003756 <HAL_CAN_IRQHandler+0x302>
 8003726:	2b30      	cmp	r3, #48	; 0x30
 8003728:	d804      	bhi.n	8003734 <HAL_CAN_IRQHandler+0x2e0>
 800372a:	2b10      	cmp	r3, #16
 800372c:	d009      	beq.n	8003742 <HAL_CAN_IRQHandler+0x2ee>
 800372e:	2b20      	cmp	r3, #32
 8003730:	d00c      	beq.n	800374c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003732:	e024      	b.n	800377e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8003734:	2b50      	cmp	r3, #80	; 0x50
 8003736:	d018      	beq.n	800376a <HAL_CAN_IRQHandler+0x316>
 8003738:	2b60      	cmp	r3, #96	; 0x60
 800373a:	d01b      	beq.n	8003774 <HAL_CAN_IRQHandler+0x320>
 800373c:	2b40      	cmp	r3, #64	; 0x40
 800373e:	d00f      	beq.n	8003760 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003740:	e01d      	b.n	800377e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	f043 0308 	orr.w	r3, r3, #8
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800374a:	e018      	b.n	800377e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	f043 0310 	orr.w	r3, r3, #16
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003754:	e013      	b.n	800377e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	f043 0320 	orr.w	r3, r3, #32
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800375e:	e00e      	b.n	800377e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003768:	e009      	b.n	800377e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003770:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003772:	e004      	b.n	800377e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800377c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699a      	ldr	r2, [r3, #24]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800378c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2204      	movs	r2, #4
 8003794:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f854 	bl	8003856 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80037ae:	bf00      	nop
 80037b0:	3728      	adds	r7, #40	; 0x28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <__NVIC_SetPriorityGrouping+0x44>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003888:	4013      	ands	r3, r2
 800388a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800389e:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <__NVIC_SetPriorityGrouping+0x44>)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	60d3      	str	r3, [r2, #12]
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b8:	4b04      	ldr	r3, [pc, #16]	; (80038cc <__NVIC_GetPriorityGrouping+0x18>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	f003 0307 	and.w	r3, r3, #7
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000ed00 	.word	0xe000ed00

080038d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	db0b      	blt.n	80038fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	f003 021f 	and.w	r2, r3, #31
 80038e8:	4907      	ldr	r1, [pc, #28]	; (8003908 <__NVIC_EnableIRQ+0x38>)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	2001      	movs	r0, #1
 80038f2:	fa00 f202 	lsl.w	r2, r0, r2
 80038f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	e000e100 	.word	0xe000e100

0800390c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	4603      	mov	r3, r0
 8003914:	6039      	str	r1, [r7, #0]
 8003916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391c:	2b00      	cmp	r3, #0
 800391e:	db0a      	blt.n	8003936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	490c      	ldr	r1, [pc, #48]	; (8003958 <__NVIC_SetPriority+0x4c>)
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	0112      	lsls	r2, r2, #4
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	440b      	add	r3, r1
 8003930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003934:	e00a      	b.n	800394c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	4908      	ldr	r1, [pc, #32]	; (800395c <__NVIC_SetPriority+0x50>)
 800393c:	79fb      	ldrb	r3, [r7, #7]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	3b04      	subs	r3, #4
 8003944:	0112      	lsls	r2, r2, #4
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	440b      	add	r3, r1
 800394a:	761a      	strb	r2, [r3, #24]
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	e000e100 	.word	0xe000e100
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003960:	b480      	push	{r7}
 8003962:	b089      	sub	sp, #36	; 0x24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f1c3 0307 	rsb	r3, r3, #7
 800397a:	2b04      	cmp	r3, #4
 800397c:	bf28      	it	cs
 800397e:	2304      	movcs	r3, #4
 8003980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3304      	adds	r3, #4
 8003986:	2b06      	cmp	r3, #6
 8003988:	d902      	bls.n	8003990 <NVIC_EncodePriority+0x30>
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	3b03      	subs	r3, #3
 800398e:	e000      	b.n	8003992 <NVIC_EncodePriority+0x32>
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43da      	mvns	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	401a      	ands	r2, r3
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	fa01 f303 	lsl.w	r3, r1, r3
 80039b2:	43d9      	mvns	r1, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b8:	4313      	orrs	r3, r2
         );
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3724      	adds	r7, #36	; 0x24
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
	...

080039c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039d8:	d301      	bcc.n	80039de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039da:	2301      	movs	r3, #1
 80039dc:	e00f      	b.n	80039fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039de:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <SysTick_Config+0x40>)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039e6:	210f      	movs	r1, #15
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039ec:	f7ff ff8e 	bl	800390c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <SysTick_Config+0x40>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039f6:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <SysTick_Config+0x40>)
 80039f8:	2207      	movs	r2, #7
 80039fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	e000e010 	.word	0xe000e010

08003a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b07      	cmp	r3, #7
 8003a18:	d00f      	beq.n	8003a3a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b06      	cmp	r3, #6
 8003a1e:	d00c      	beq.n	8003a3a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b05      	cmp	r3, #5
 8003a24:	d009      	beq.n	8003a3a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d006      	beq.n	8003a3a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d003      	beq.n	8003a3a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a32:	2192      	movs	r1, #146	; 0x92
 8003a34:	4804      	ldr	r0, [pc, #16]	; (8003a48 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003a36:	f7fd f89c 	bl	8000b72 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff ff16 	bl	800386c <__NVIC_SetPriorityGrouping>
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	08007380 	.word	0x08007380

08003a4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b0f      	cmp	r3, #15
 8003a62:	d903      	bls.n	8003a6c <HAL_NVIC_SetPriority+0x20>
 8003a64:	21aa      	movs	r1, #170	; 0xaa
 8003a66:	480e      	ldr	r0, [pc, #56]	; (8003aa0 <HAL_NVIC_SetPriority+0x54>)
 8003a68:	f7fd f883 	bl	8000b72 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b0f      	cmp	r3, #15
 8003a70:	d903      	bls.n	8003a7a <HAL_NVIC_SetPriority+0x2e>
 8003a72:	21ab      	movs	r1, #171	; 0xab
 8003a74:	480a      	ldr	r0, [pc, #40]	; (8003aa0 <HAL_NVIC_SetPriority+0x54>)
 8003a76:	f7fd f87c 	bl	8000b72 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a7a:	f7ff ff1b 	bl	80038b4 <__NVIC_GetPriorityGrouping>
 8003a7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	6978      	ldr	r0, [r7, #20]
 8003a86:	f7ff ff6b 	bl	8003960 <NVIC_EncodePriority>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff ff3a 	bl	800390c <__NVIC_SetPriority>
}
 8003a98:	bf00      	nop
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	08007380 	.word	0x08007380

08003aa4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	4603      	mov	r3, r0
 8003aac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	da03      	bge.n	8003abe <HAL_NVIC_EnableIRQ+0x1a>
 8003ab6:	21be      	movs	r1, #190	; 0xbe
 8003ab8:	4805      	ldr	r0, [pc, #20]	; (8003ad0 <HAL_NVIC_EnableIRQ+0x2c>)
 8003aba:	f7fd f85a 	bl	8000b72 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff ff04 	bl	80038d0 <__NVIC_EnableIRQ>
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	08007380 	.word	0x08007380

08003ad4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff ff73 	bl	80039c8 <SysTick_Config>
 8003ae2:	4603      	mov	r3, r0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d004      	beq.n	8003b0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2280      	movs	r2, #128	; 0x80
 8003b04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e00c      	b.n	8003b24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2205      	movs	r2, #5
 8003b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0201 	bic.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a41      	ldr	r2, [pc, #260]	; (8003c50 <HAL_GPIO_Init+0x120>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d023      	beq.n	8003b96 <HAL_GPIO_Init+0x66>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a40      	ldr	r2, [pc, #256]	; (8003c54 <HAL_GPIO_Init+0x124>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d01f      	beq.n	8003b96 <HAL_GPIO_Init+0x66>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a3f      	ldr	r2, [pc, #252]	; (8003c58 <HAL_GPIO_Init+0x128>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01b      	beq.n	8003b96 <HAL_GPIO_Init+0x66>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a3e      	ldr	r2, [pc, #248]	; (8003c5c <HAL_GPIO_Init+0x12c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d017      	beq.n	8003b96 <HAL_GPIO_Init+0x66>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a3d      	ldr	r2, [pc, #244]	; (8003c60 <HAL_GPIO_Init+0x130>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <HAL_GPIO_Init+0x66>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a3c      	ldr	r2, [pc, #240]	; (8003c64 <HAL_GPIO_Init+0x134>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00f      	beq.n	8003b96 <HAL_GPIO_Init+0x66>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a3b      	ldr	r2, [pc, #236]	; (8003c68 <HAL_GPIO_Init+0x138>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00b      	beq.n	8003b96 <HAL_GPIO_Init+0x66>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a3a      	ldr	r2, [pc, #232]	; (8003c6c <HAL_GPIO_Init+0x13c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d007      	beq.n	8003b96 <HAL_GPIO_Init+0x66>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a39      	ldr	r2, [pc, #228]	; (8003c70 <HAL_GPIO_Init+0x140>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_Init+0x66>
 8003b8e:	21b3      	movs	r1, #179	; 0xb3
 8003b90:	4838      	ldr	r0, [pc, #224]	; (8003c74 <HAL_GPIO_Init+0x144>)
 8003b92:	f7fc ffee 	bl	8000b72 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_GPIO_Init+0x7c>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	0c1b      	lsrs	r3, r3, #16
 8003ba6:	041b      	lsls	r3, r3, #16
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_GPIO_Init+0x84>
 8003bac:	21b4      	movs	r1, #180	; 0xb4
 8003bae:	4831      	ldr	r0, [pc, #196]	; (8003c74 <HAL_GPIO_Init+0x144>)
 8003bb0:	f7fc ffdf 	bl	8000b72 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d035      	beq.n	8003c28 <HAL_GPIO_Init+0xf8>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d031      	beq.n	8003c28 <HAL_GPIO_Init+0xf8>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b11      	cmp	r3, #17
 8003bca:	d02d      	beq.n	8003c28 <HAL_GPIO_Init+0xf8>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d029      	beq.n	8003c28 <HAL_GPIO_Init+0xf8>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b12      	cmp	r3, #18
 8003bda:	d025      	beq.n	8003c28 <HAL_GPIO_Init+0xf8>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <HAL_GPIO_Init+0x148>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d020      	beq.n	8003c28 <HAL_GPIO_Init+0xf8>
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <HAL_GPIO_Init+0x14c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d01b      	beq.n	8003c28 <HAL_GPIO_Init+0xf8>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <HAL_GPIO_Init+0x150>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d016      	beq.n	8003c28 <HAL_GPIO_Init+0xf8>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <HAL_GPIO_Init+0x154>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d011      	beq.n	8003c28 <HAL_GPIO_Init+0xf8>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <HAL_GPIO_Init+0x158>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00c      	beq.n	8003c28 <HAL_GPIO_Init+0xf8>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	4a1e      	ldr	r2, [pc, #120]	; (8003c8c <HAL_GPIO_Init+0x15c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d007      	beq.n	8003c28 <HAL_GPIO_Init+0xf8>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0xf8>
 8003c20:	21b5      	movs	r1, #181	; 0xb5
 8003c22:	4814      	ldr	r0, [pc, #80]	; (8003c74 <HAL_GPIO_Init+0x144>)
 8003c24:	f7fc ffa5 	bl	8000b72 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00b      	beq.n	8003c48 <HAL_GPIO_Init+0x118>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d007      	beq.n	8003c48 <HAL_GPIO_Init+0x118>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d003      	beq.n	8003c48 <HAL_GPIO_Init+0x118>
 8003c40:	21b6      	movs	r1, #182	; 0xb6
 8003c42:	480c      	ldr	r0, [pc, #48]	; (8003c74 <HAL_GPIO_Init+0x144>)
 8003c44:	f7fc ff95 	bl	8000b72 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
 8003c4c:	e236      	b.n	80040bc <HAL_GPIO_Init+0x58c>
 8003c4e:	bf00      	nop
 8003c50:	40020000 	.word	0x40020000
 8003c54:	40020400 	.word	0x40020400
 8003c58:	40020800 	.word	0x40020800
 8003c5c:	40020c00 	.word	0x40020c00
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40021400 	.word	0x40021400
 8003c68:	40021800 	.word	0x40021800
 8003c6c:	40021c00 	.word	0x40021c00
 8003c70:	40022000 	.word	0x40022000
 8003c74:	080073bc 	.word	0x080073bc
 8003c78:	10110000 	.word	0x10110000
 8003c7c:	10210000 	.word	0x10210000
 8003c80:	10310000 	.word	0x10310000
 8003c84:	10120000 	.word	0x10120000
 8003c88:	10220000 	.word	0x10220000
 8003c8c:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c90:	2201      	movs	r2, #1
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	f040 8204 	bne.w	80040b6 <HAL_GPIO_Init+0x586>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d00b      	beq.n	8003cce <HAL_GPIO_Init+0x19e>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d007      	beq.n	8003cce <HAL_GPIO_Init+0x19e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cc2:	2b11      	cmp	r3, #17
 8003cc4:	d003      	beq.n	8003cce <HAL_GPIO_Init+0x19e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b12      	cmp	r3, #18
 8003ccc:	d144      	bne.n	8003d58 <HAL_GPIO_Init+0x228>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00f      	beq.n	8003cf6 <HAL_GPIO_Init+0x1c6>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d00b      	beq.n	8003cf6 <HAL_GPIO_Init+0x1c6>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d007      	beq.n	8003cf6 <HAL_GPIO_Init+0x1c6>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d003      	beq.n	8003cf6 <HAL_GPIO_Init+0x1c6>
 8003cee:	21c8      	movs	r1, #200	; 0xc8
 8003cf0:	489e      	ldr	r0, [pc, #632]	; (8003f6c <HAL_GPIO_Init+0x43c>)
 8003cf2:	f7fc ff3e 	bl	8000b72 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	2203      	movs	r2, #3
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f003 0201 	and.w	r2, r3, #1
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	2203      	movs	r2, #3
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d004      	beq.n	8003d9a <HAL_GPIO_Init+0x26a>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b12      	cmp	r3, #18
 8003d96:	f040 80b2 	bne.w	8003efe <HAL_GPIO_Init+0x3ce>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 8089 	beq.w	8003eb6 <HAL_GPIO_Init+0x386>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b09      	cmp	r3, #9
 8003daa:	f000 8084 	beq.w	8003eb6 <HAL_GPIO_Init+0x386>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d07f      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d07b      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d077      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d073      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d06f      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d06b      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d067      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d063      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d05f      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d05b      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d057      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	d053      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d04f      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b05      	cmp	r3, #5
 8003e1c:	d04b      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b05      	cmp	r3, #5
 8003e24:	d047      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b09      	cmp	r3, #9
 8003e2c:	d043      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	2b06      	cmp	r3, #6
 8003e34:	d03f      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b09      	cmp	r3, #9
 8003e3c:	d03b      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b07      	cmp	r3, #7
 8003e44:	d037      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b07      	cmp	r3, #7
 8003e4c:	d033      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b07      	cmp	r3, #7
 8003e54:	d02f      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d02b      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d027      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d023      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	2b09      	cmp	r3, #9
 8003e74:	d01f      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b09      	cmp	r3, #9
 8003e7c:	d01b      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b0a      	cmp	r3, #10
 8003e84:	d017      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b0a      	cmp	r3, #10
 8003e8c:	d013      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b0c      	cmp	r3, #12
 8003e94:	d00f      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	d00b      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	2b0c      	cmp	r3, #12
 8003ea4:	d007      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b0f      	cmp	r3, #15
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_Init+0x386>
 8003eae:	21e0      	movs	r1, #224	; 0xe0
 8003eb0:	482e      	ldr	r0, [pc, #184]	; (8003f6c <HAL_GPIO_Init+0x43c>)
 8003eb2:	f7fc fe5e 	bl	8000b72 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	08da      	lsrs	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3208      	adds	r2, #8
 8003ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	220f      	movs	r2, #15
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	691a      	ldr	r2, [r3, #16]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	f003 0307 	and.w	r3, r3, #7
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	08da      	lsrs	r2, r3, #3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3208      	adds	r2, #8
 8003ef8:	69b9      	ldr	r1, [r7, #24]
 8003efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	2203      	movs	r2, #3
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4013      	ands	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f003 0203 	and.w	r2, r3, #3
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 80bb 	beq.w	80040b6 <HAL_GPIO_Init+0x586>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <HAL_GPIO_Init+0x440>)
 8003f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f48:	4a09      	ldr	r2, [pc, #36]	; (8003f70 <HAL_GPIO_Init+0x440>)
 8003f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f4e:	6453      	str	r3, [r2, #68]	; 0x44
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <HAL_GPIO_Init+0x440>)
 8003f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f5c:	4a05      	ldr	r2, [pc, #20]	; (8003f74 <HAL_GPIO_Init+0x444>)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	3302      	adds	r3, #2
 8003f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	e005      	b.n	8003f78 <HAL_GPIO_Init+0x448>
 8003f6c:	080073bc 	.word	0x080073bc
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40013800 	.word	0x40013800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	220f      	movs	r2, #15
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a4e      	ldr	r2, [pc, #312]	; (80040cc <HAL_GPIO_Init+0x59c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d02b      	beq.n	8003fee <HAL_GPIO_Init+0x4be>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a4d      	ldr	r2, [pc, #308]	; (80040d0 <HAL_GPIO_Init+0x5a0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d025      	beq.n	8003fea <HAL_GPIO_Init+0x4ba>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a4c      	ldr	r2, [pc, #304]	; (80040d4 <HAL_GPIO_Init+0x5a4>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d01f      	beq.n	8003fe6 <HAL_GPIO_Init+0x4b6>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a4b      	ldr	r2, [pc, #300]	; (80040d8 <HAL_GPIO_Init+0x5a8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d019      	beq.n	8003fe2 <HAL_GPIO_Init+0x4b2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a4a      	ldr	r2, [pc, #296]	; (80040dc <HAL_GPIO_Init+0x5ac>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d013      	beq.n	8003fde <HAL_GPIO_Init+0x4ae>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a49      	ldr	r2, [pc, #292]	; (80040e0 <HAL_GPIO_Init+0x5b0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d00d      	beq.n	8003fda <HAL_GPIO_Init+0x4aa>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a48      	ldr	r2, [pc, #288]	; (80040e4 <HAL_GPIO_Init+0x5b4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <HAL_GPIO_Init+0x4a6>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a47      	ldr	r2, [pc, #284]	; (80040e8 <HAL_GPIO_Init+0x5b8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d101      	bne.n	8003fd2 <HAL_GPIO_Init+0x4a2>
 8003fce:	2307      	movs	r3, #7
 8003fd0:	e00e      	b.n	8003ff0 <HAL_GPIO_Init+0x4c0>
 8003fd2:	2308      	movs	r3, #8
 8003fd4:	e00c      	b.n	8003ff0 <HAL_GPIO_Init+0x4c0>
 8003fd6:	2306      	movs	r3, #6
 8003fd8:	e00a      	b.n	8003ff0 <HAL_GPIO_Init+0x4c0>
 8003fda:	2305      	movs	r3, #5
 8003fdc:	e008      	b.n	8003ff0 <HAL_GPIO_Init+0x4c0>
 8003fde:	2304      	movs	r3, #4
 8003fe0:	e006      	b.n	8003ff0 <HAL_GPIO_Init+0x4c0>
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e004      	b.n	8003ff0 <HAL_GPIO_Init+0x4c0>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e002      	b.n	8003ff0 <HAL_GPIO_Init+0x4c0>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_GPIO_Init+0x4c0>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	f002 0203 	and.w	r2, r2, #3
 8003ff6:	0092      	lsls	r2, r2, #2
 8003ff8:	4093      	lsls	r3, r2
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004000:	493a      	ldr	r1, [pc, #232]	; (80040ec <HAL_GPIO_Init+0x5bc>)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	089b      	lsrs	r3, r3, #2
 8004006:	3302      	adds	r3, #2
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800400e:	4b38      	ldr	r3, [pc, #224]	; (80040f0 <HAL_GPIO_Init+0x5c0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	43db      	mvns	r3, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4013      	ands	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_GPIO_Init+0x502>
        {
          temp |= iocurrent;
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004032:	4a2f      	ldr	r2, [pc, #188]	; (80040f0 <HAL_GPIO_Init+0x5c0>)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004038:	4b2d      	ldr	r3, [pc, #180]	; (80040f0 <HAL_GPIO_Init+0x5c0>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	43db      	mvns	r3, r3
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4013      	ands	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_GPIO_Init+0x52c>
        {
          temp |= iocurrent;
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800405c:	4a24      	ldr	r2, [pc, #144]	; (80040f0 <HAL_GPIO_Init+0x5c0>)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004062:	4b23      	ldr	r3, [pc, #140]	; (80040f0 <HAL_GPIO_Init+0x5c0>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	43db      	mvns	r3, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4013      	ands	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_GPIO_Init+0x556>
        {
          temp |= iocurrent;
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004086:	4a1a      	ldr	r2, [pc, #104]	; (80040f0 <HAL_GPIO_Init+0x5c0>)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800408c:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <HAL_GPIO_Init+0x5c0>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	43db      	mvns	r3, r3
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	4013      	ands	r3, r2
 800409a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <HAL_GPIO_Init+0x580>
        {
          temp |= iocurrent;
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040b0:	4a0f      	ldr	r2, [pc, #60]	; (80040f0 <HAL_GPIO_Init+0x5c0>)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3301      	adds	r3, #1
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b0f      	cmp	r3, #15
 80040c0:	f67f ade6 	bls.w	8003c90 <HAL_GPIO_Init+0x160>
      }
    }
  }
}
 80040c4:	bf00      	nop
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40020000 	.word	0x40020000
 80040d0:	40020400 	.word	0x40020400
 80040d4:	40020800 	.word	0x40020800
 80040d8:	40020c00 	.word	0x40020c00
 80040dc:	40021000 	.word	0x40021000
 80040e0:	40021400 	.word	0x40021400
 80040e4:	40021800 	.word	0x40021800
 80040e8:	40021c00 	.word	0x40021c00
 80040ec:	40013800 	.word	0x40013800
 80040f0:	40013c00 	.word	0x40013c00

080040f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e30d      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b0f      	cmp	r3, #15
 800410c:	d903      	bls.n	8004116 <HAL_RCC_OscConfig+0x22>
 800410e:	21e8      	movs	r1, #232	; 0xe8
 8004110:	48a3      	ldr	r0, [pc, #652]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004112:	f7fc fd2e 	bl	8000b72 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8088 	beq.w	8004234 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00d      	beq.n	8004148 <HAL_RCC_OscConfig+0x54>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004134:	d008      	beq.n	8004148 <HAL_RCC_OscConfig+0x54>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800413e:	d003      	beq.n	8004148 <HAL_RCC_OscConfig+0x54>
 8004140:	21ed      	movs	r1, #237	; 0xed
 8004142:	4897      	ldr	r0, [pc, #604]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	f7fc fd15 	bl	8000b72 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004148:	4b96      	ldr	r3, [pc, #600]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 030c 	and.w	r3, r3, #12
 8004150:	2b04      	cmp	r3, #4
 8004152:	d00c      	beq.n	800416e <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004154:	4b93      	ldr	r3, [pc, #588]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800415c:	2b08      	cmp	r3, #8
 800415e:	d112      	bne.n	8004186 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004160:	4b90      	ldr	r3, [pc, #576]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800416c:	d10b      	bne.n	8004186 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800416e:	4b8d      	ldr	r3, [pc, #564]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d05b      	beq.n	8004232 <HAL_RCC_OscConfig+0x13e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d157      	bne.n	8004232 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e2cd      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418e:	d106      	bne.n	800419e <HAL_RCC_OscConfig+0xaa>
 8004190:	4b84      	ldr	r3, [pc, #528]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a83      	ldr	r2, [pc, #524]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 8004196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	e01d      	b.n	80041da <HAL_RCC_OscConfig+0xe6>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041a6:	d10c      	bne.n	80041c2 <HAL_RCC_OscConfig+0xce>
 80041a8:	4b7e      	ldr	r3, [pc, #504]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a7d      	ldr	r2, [pc, #500]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 80041ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	4b7b      	ldr	r3, [pc, #492]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a7a      	ldr	r2, [pc, #488]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 80041ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	e00b      	b.n	80041da <HAL_RCC_OscConfig+0xe6>
 80041c2:	4b78      	ldr	r3, [pc, #480]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a77      	ldr	r2, [pc, #476]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 80041c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	4b75      	ldr	r3, [pc, #468]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a74      	ldr	r2, [pc, #464]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 80041d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d013      	beq.n	800420a <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e2:	f7fe fb09 	bl	80027f8 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041ea:	f7fe fb05 	bl	80027f8 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b64      	cmp	r3, #100	; 0x64
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e292      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fc:	4b69      	ldr	r3, [pc, #420]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCC_OscConfig+0xf6>
 8004208:	e014      	b.n	8004234 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420a:	f7fe faf5 	bl	80027f8 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004212:	f7fe faf1 	bl	80027f8 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b64      	cmp	r3, #100	; 0x64
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e27e      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004224:	4b5f      	ldr	r3, [pc, #380]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f0      	bne.n	8004212 <HAL_RCC_OscConfig+0x11e>
 8004230:	e000      	b.n	8004234 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004232:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d079      	beq.n	8004334 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_RCC_OscConfig+0x166>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d004      	beq.n	800425a <HAL_RCC_OscConfig+0x166>
 8004250:	f240 111f 	movw	r1, #287	; 0x11f
 8004254:	4852      	ldr	r0, [pc, #328]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004256:	f7fc fc8c 	bl	8000b72 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b1f      	cmp	r3, #31
 8004260:	d904      	bls.n	800426c <HAL_RCC_OscConfig+0x178>
 8004262:	f44f 7190 	mov.w	r1, #288	; 0x120
 8004266:	484e      	ldr	r0, [pc, #312]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	f7fc fc83 	bl	8000b72 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800426c:	4b4d      	ldr	r3, [pc, #308]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004278:	4b4a      	ldr	r3, [pc, #296]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004280:	2b08      	cmp	r3, #8
 8004282:	d11c      	bne.n	80042be <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004284:	4b47      	ldr	r3, [pc, #284]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d116      	bne.n	80042be <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004290:	4b44      	ldr	r3, [pc, #272]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_OscConfig+0x1b4>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e23c      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a8:	4b3e      	ldr	r3, [pc, #248]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	493b      	ldr	r1, [pc, #236]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042bc:	e03a      	b.n	8004334 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d020      	beq.n	8004308 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042c6:	4b38      	ldr	r3, [pc, #224]	; (80043a8 <HAL_RCC_OscConfig+0x2b4>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042cc:	f7fe fa94 	bl	80027f8 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d4:	f7fe fa90 	bl	80027f8 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e21d      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e6:	4b2f      	ldr	r3, [pc, #188]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f2:	4b2c      	ldr	r3, [pc, #176]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4928      	ldr	r1, [pc, #160]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 8004302:	4313      	orrs	r3, r2
 8004304:	600b      	str	r3, [r1, #0]
 8004306:	e015      	b.n	8004334 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004308:	4b27      	ldr	r3, [pc, #156]	; (80043a8 <HAL_RCC_OscConfig+0x2b4>)
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430e:	f7fe fa73 	bl	80027f8 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004316:	f7fe fa6f 	bl	80027f8 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e1fc      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004328:	4b1e      	ldr	r3, [pc, #120]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f0      	bne.n	8004316 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d046      	beq.n	80043ce <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d008      	beq.n	800435a <HAL_RCC_OscConfig+0x266>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d004      	beq.n	800435a <HAL_RCC_OscConfig+0x266>
 8004350:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8004354:	4812      	ldr	r0, [pc, #72]	; (80043a0 <HAL_RCC_OscConfig+0x2ac>)
 8004356:	f7fc fc0c 	bl	8000b72 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d016      	beq.n	8004390 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004362:	4b12      	ldr	r3, [pc, #72]	; (80043ac <HAL_RCC_OscConfig+0x2b8>)
 8004364:	2201      	movs	r2, #1
 8004366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004368:	f7fe fa46 	bl	80027f8 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004370:	f7fe fa42 	bl	80027f8 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e1cf      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004382:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <HAL_RCC_OscConfig+0x2b0>)
 8004384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0x27c>
 800438e:	e01e      	b.n	80043ce <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004390:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_RCC_OscConfig+0x2b8>)
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004396:	f7fe fa2f 	bl	80027f8 <HAL_GetTick>
 800439a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800439c:	e011      	b.n	80043c2 <HAL_RCC_OscConfig+0x2ce>
 800439e:	bf00      	nop
 80043a0:	080073f8 	.word	0x080073f8
 80043a4:	40023800 	.word	0x40023800
 80043a8:	42470000 	.word	0x42470000
 80043ac:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b0:	f7fe fa22 	bl	80027f8 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e1af      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043c2:	4b97      	ldr	r3, [pc, #604]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 80043c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 80a8 	beq.w	800452c <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043dc:	2300      	movs	r3, #0
 80043de:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00c      	beq.n	8004402 <HAL_RCC_OscConfig+0x30e>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d008      	beq.n	8004402 <HAL_RCC_OscConfig+0x30e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b05      	cmp	r3, #5
 80043f6:	d004      	beq.n	8004402 <HAL_RCC_OscConfig+0x30e>
 80043f8:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80043fc:	4889      	ldr	r0, [pc, #548]	; (8004624 <HAL_RCC_OscConfig+0x530>)
 80043fe:	f7fc fbb8 	bl	8000b72 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004402:	4b87      	ldr	r3, [pc, #540]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10f      	bne.n	800442e <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	4b83      	ldr	r3, [pc, #524]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	4a82      	ldr	r2, [pc, #520]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 8004418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800441c:	6413      	str	r3, [r2, #64]	; 0x40
 800441e:	4b80      	ldr	r3, [pc, #512]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004426:	60bb      	str	r3, [r7, #8]
 8004428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800442a:	2301      	movs	r3, #1
 800442c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442e:	4b7e      	ldr	r3, [pc, #504]	; (8004628 <HAL_RCC_OscConfig+0x534>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004436:	2b00      	cmp	r3, #0
 8004438:	d118      	bne.n	800446c <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800443a:	4b7b      	ldr	r3, [pc, #492]	; (8004628 <HAL_RCC_OscConfig+0x534>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a7a      	ldr	r2, [pc, #488]	; (8004628 <HAL_RCC_OscConfig+0x534>)
 8004440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004446:	f7fe f9d7 	bl	80027f8 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444e:	f7fe f9d3 	bl	80027f8 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e160      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004460:	4b71      	ldr	r3, [pc, #452]	; (8004628 <HAL_RCC_OscConfig+0x534>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0f0      	beq.n	800444e <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d106      	bne.n	8004482 <HAL_RCC_OscConfig+0x38e>
 8004474:	4b6a      	ldr	r3, [pc, #424]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004478:	4a69      	ldr	r2, [pc, #420]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	6713      	str	r3, [r2, #112]	; 0x70
 8004480:	e01c      	b.n	80044bc <HAL_RCC_OscConfig+0x3c8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2b05      	cmp	r3, #5
 8004488:	d10c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x3b0>
 800448a:	4b65      	ldr	r3, [pc, #404]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 800448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448e:	4a64      	ldr	r2, [pc, #400]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 8004490:	f043 0304 	orr.w	r3, r3, #4
 8004494:	6713      	str	r3, [r2, #112]	; 0x70
 8004496:	4b62      	ldr	r3, [pc, #392]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	4a61      	ldr	r2, [pc, #388]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 800449c:	f043 0301 	orr.w	r3, r3, #1
 80044a0:	6713      	str	r3, [r2, #112]	; 0x70
 80044a2:	e00b      	b.n	80044bc <HAL_RCC_OscConfig+0x3c8>
 80044a4:	4b5e      	ldr	r3, [pc, #376]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a8:	4a5d      	ldr	r2, [pc, #372]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	6713      	str	r3, [r2, #112]	; 0x70
 80044b0:	4b5b      	ldr	r3, [pc, #364]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b4:	4a5a      	ldr	r2, [pc, #360]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 80044b6:	f023 0304 	bic.w	r3, r3, #4
 80044ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d015      	beq.n	80044f0 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c4:	f7fe f998 	bl	80027f8 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044cc:	f7fe f994 	bl	80027f8 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e11f      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e2:	4b4f      	ldr	r3, [pc, #316]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0ee      	beq.n	80044cc <HAL_RCC_OscConfig+0x3d8>
 80044ee:	e014      	b.n	800451a <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f0:	f7fe f982 	bl	80027f8 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044f6:	e00a      	b.n	800450e <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f8:	f7fe f97e 	bl	80027f8 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f241 3288 	movw	r2, #5000	; 0x1388
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e109      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800450e:	4b44      	ldr	r3, [pc, #272]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1ee      	bne.n	80044f8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800451a:	7dfb      	ldrb	r3, [r7, #23]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d105      	bne.n	800452c <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004520:	4b3f      	ldr	r3, [pc, #252]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	4a3e      	ldr	r2, [pc, #248]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 8004526:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00c      	beq.n	800454e <HAL_RCC_OscConfig+0x45a>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d008      	beq.n	800454e <HAL_RCC_OscConfig+0x45a>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d004      	beq.n	800454e <HAL_RCC_OscConfig+0x45a>
 8004544:	f240 11cf 	movw	r1, #463	; 0x1cf
 8004548:	4836      	ldr	r0, [pc, #216]	; (8004624 <HAL_RCC_OscConfig+0x530>)
 800454a:	f7fc fb12 	bl	8000b72 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80e4 	beq.w	8004720 <HAL_RCC_OscConfig+0x62c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004558:	4b31      	ldr	r3, [pc, #196]	; (8004620 <HAL_RCC_OscConfig+0x52c>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 030c 	and.w	r3, r3, #12
 8004560:	2b08      	cmp	r3, #8
 8004562:	f000 80ae 	beq.w	80046c2 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	2b02      	cmp	r3, #2
 800456c:	f040 8092 	bne.w	8004694 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d009      	beq.n	800458c <HAL_RCC_OscConfig+0x498>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004580:	d004      	beq.n	800458c <HAL_RCC_OscConfig+0x498>
 8004582:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004586:	4827      	ldr	r0, [pc, #156]	; (8004624 <HAL_RCC_OscConfig+0x530>)
 8004588:	f7fc faf3 	bl	8000b72 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	2b3f      	cmp	r3, #63	; 0x3f
 8004592:	d904      	bls.n	800459e <HAL_RCC_OscConfig+0x4aa>
 8004594:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004598:	4822      	ldr	r0, [pc, #136]	; (8004624 <HAL_RCC_OscConfig+0x530>)
 800459a:	f7fc faea 	bl	8000b72 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	2b31      	cmp	r3, #49	; 0x31
 80045a4:	d904      	bls.n	80045b0 <HAL_RCC_OscConfig+0x4bc>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80045ae:	d904      	bls.n	80045ba <HAL_RCC_OscConfig+0x4c6>
 80045b0:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80045b4:	481b      	ldr	r0, [pc, #108]	; (8004624 <HAL_RCC_OscConfig+0x530>)
 80045b6:	f7fc fadc 	bl	8000b72 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d010      	beq.n	80045e4 <HAL_RCC_OscConfig+0x4f0>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d00c      	beq.n	80045e4 <HAL_RCC_OscConfig+0x4f0>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ce:	2b06      	cmp	r3, #6
 80045d0:	d008      	beq.n	80045e4 <HAL_RCC_OscConfig+0x4f0>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d004      	beq.n	80045e4 <HAL_RCC_OscConfig+0x4f0>
 80045da:	f240 11db 	movw	r1, #475	; 0x1db
 80045de:	4811      	ldr	r0, [pc, #68]	; (8004624 <HAL_RCC_OscConfig+0x530>)
 80045e0:	f7fc fac7 	bl	8000b72 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d903      	bls.n	80045f4 <HAL_RCC_OscConfig+0x500>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	2b0f      	cmp	r3, #15
 80045f2:	d904      	bls.n	80045fe <HAL_RCC_OscConfig+0x50a>
 80045f4:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80045f8:	480a      	ldr	r0, [pc, #40]	; (8004624 <HAL_RCC_OscConfig+0x530>)
 80045fa:	f7fc faba 	bl	8000b72 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fe:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_RCC_OscConfig+0x538>)
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004604:	f7fe f8f8 	bl	80027f8 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460a:	e011      	b.n	8004630 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800460c:	f7fe f8f4 	bl	80027f8 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d90a      	bls.n	8004630 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e081      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800
 8004624:	080073f8 	.word	0x080073f8
 8004628:	40007000 	.word	0x40007000
 800462c:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004630:	4b3e      	ldr	r3, [pc, #248]	; (800472c <HAL_RCC_OscConfig+0x638>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e7      	bne.n	800460c <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	431a      	orrs	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	019b      	lsls	r3, r3, #6
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	085b      	lsrs	r3, r3, #1
 8004654:	3b01      	subs	r3, #1
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	061b      	lsls	r3, r3, #24
 8004660:	4932      	ldr	r1, [pc, #200]	; (800472c <HAL_RCC_OscConfig+0x638>)
 8004662:	4313      	orrs	r3, r2
 8004664:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004666:	4b32      	ldr	r3, [pc, #200]	; (8004730 <HAL_RCC_OscConfig+0x63c>)
 8004668:	2201      	movs	r2, #1
 800466a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466c:	f7fe f8c4 	bl	80027f8 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004674:	f7fe f8c0 	bl	80027f8 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e04d      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004686:	4b29      	ldr	r3, [pc, #164]	; (800472c <HAL_RCC_OscConfig+0x638>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0x580>
 8004692:	e045      	b.n	8004720 <HAL_RCC_OscConfig+0x62c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004694:	4b26      	ldr	r3, [pc, #152]	; (8004730 <HAL_RCC_OscConfig+0x63c>)
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469a:	f7fe f8ad 	bl	80027f8 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a2:	f7fe f8a9 	bl	80027f8 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e036      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b4:	4b1d      	ldr	r3, [pc, #116]	; (800472c <HAL_RCC_OscConfig+0x638>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d1f0      	bne.n	80046a2 <HAL_RCC_OscConfig+0x5ae>
 80046c0:	e02e      	b.n	8004720 <HAL_RCC_OscConfig+0x62c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e029      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046ce:	4b17      	ldr	r3, [pc, #92]	; (800472c <HAL_RCC_OscConfig+0x638>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d11c      	bne.n	800471c <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d115      	bne.n	800471c <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046f6:	4013      	ands	r3, r2
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d10d      	bne.n	800471c <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800470a:	429a      	cmp	r2, r3
 800470c:	d106      	bne.n	800471c <HAL_RCC_OscConfig+0x628>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004718:	429a      	cmp	r2, r3
 800471a:	d001      	beq.n	8004720 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e000      	b.n	8004722 <HAL_RCC_OscConfig+0x62e>
        }
      }
    }
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40023800 	.word	0x40023800
 8004730:	42470060 	.word	0x42470060

08004734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e174      	b.n	8004a32 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <HAL_RCC_ClockConfig+0x24>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b0f      	cmp	r3, #15
 8004756:	d904      	bls.n	8004762 <HAL_RCC_ClockConfig+0x2e>
 8004758:	f240 2151 	movw	r1, #593	; 0x251
 800475c:	487b      	ldr	r0, [pc, #492]	; (800494c <HAL_RCC_ClockConfig+0x218>)
 800475e:	f7fc fa08 	bl	8000b72 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d019      	beq.n	800479c <HAL_RCC_ClockConfig+0x68>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d016      	beq.n	800479c <HAL_RCC_ClockConfig+0x68>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b02      	cmp	r3, #2
 8004772:	d013      	beq.n	800479c <HAL_RCC_ClockConfig+0x68>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b03      	cmp	r3, #3
 8004778:	d010      	beq.n	800479c <HAL_RCC_ClockConfig+0x68>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b04      	cmp	r3, #4
 800477e:	d00d      	beq.n	800479c <HAL_RCC_ClockConfig+0x68>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b05      	cmp	r3, #5
 8004784:	d00a      	beq.n	800479c <HAL_RCC_ClockConfig+0x68>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b06      	cmp	r3, #6
 800478a:	d007      	beq.n	800479c <HAL_RCC_ClockConfig+0x68>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b07      	cmp	r3, #7
 8004790:	d004      	beq.n	800479c <HAL_RCC_ClockConfig+0x68>
 8004792:	f240 2152 	movw	r1, #594	; 0x252
 8004796:	486d      	ldr	r0, [pc, #436]	; (800494c <HAL_RCC_ClockConfig+0x218>)
 8004798:	f7fc f9eb 	bl	8000b72 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800479c:	4b6c      	ldr	r3, [pc, #432]	; (8004950 <HAL_RCC_ClockConfig+0x21c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d90c      	bls.n	80047c4 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b69      	ldr	r3, [pc, #420]	; (8004950 <HAL_RCC_ClockConfig+0x21c>)
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b2:	4b67      	ldr	r3, [pc, #412]	; (8004950 <HAL_RCC_ClockConfig+0x21c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d001      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e136      	b.n	8004a32 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d049      	beq.n	8004864 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047dc:	4b5d      	ldr	r3, [pc, #372]	; (8004954 <HAL_RCC_ClockConfig+0x220>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a5c      	ldr	r2, [pc, #368]	; (8004954 <HAL_RCC_ClockConfig+0x220>)
 80047e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047f4:	4b57      	ldr	r3, [pc, #348]	; (8004954 <HAL_RCC_ClockConfig+0x220>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a56      	ldr	r2, [pc, #344]	; (8004954 <HAL_RCC_ClockConfig+0x220>)
 80047fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d024      	beq.n	8004852 <HAL_RCC_ClockConfig+0x11e>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b80      	cmp	r3, #128	; 0x80
 800480e:	d020      	beq.n	8004852 <HAL_RCC_ClockConfig+0x11e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b90      	cmp	r3, #144	; 0x90
 8004816:	d01c      	beq.n	8004852 <HAL_RCC_ClockConfig+0x11e>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2ba0      	cmp	r3, #160	; 0xa0
 800481e:	d018      	beq.n	8004852 <HAL_RCC_ClockConfig+0x11e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2bb0      	cmp	r3, #176	; 0xb0
 8004826:	d014      	beq.n	8004852 <HAL_RCC_ClockConfig+0x11e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2bc0      	cmp	r3, #192	; 0xc0
 800482e:	d010      	beq.n	8004852 <HAL_RCC_ClockConfig+0x11e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	2bd0      	cmp	r3, #208	; 0xd0
 8004836:	d00c      	beq.n	8004852 <HAL_RCC_ClockConfig+0x11e>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2be0      	cmp	r3, #224	; 0xe0
 800483e:	d008      	beq.n	8004852 <HAL_RCC_ClockConfig+0x11e>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2bf0      	cmp	r3, #240	; 0xf0
 8004846:	d004      	beq.n	8004852 <HAL_RCC_ClockConfig+0x11e>
 8004848:	f240 2175 	movw	r1, #629	; 0x275
 800484c:	483f      	ldr	r0, [pc, #252]	; (800494c <HAL_RCC_ClockConfig+0x218>)
 800484e:	f7fc f990 	bl	8000b72 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004852:	4b40      	ldr	r3, [pc, #256]	; (8004954 <HAL_RCC_ClockConfig+0x220>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	493d      	ldr	r1, [pc, #244]	; (8004954 <HAL_RCC_ClockConfig+0x220>)
 8004860:	4313      	orrs	r3, r2
 8004862:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d059      	beq.n	8004924 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d010      	beq.n	800489a <HAL_RCC_ClockConfig+0x166>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d00c      	beq.n	800489a <HAL_RCC_ClockConfig+0x166>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b02      	cmp	r3, #2
 8004886:	d008      	beq.n	800489a <HAL_RCC_ClockConfig+0x166>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b03      	cmp	r3, #3
 800488e:	d004      	beq.n	800489a <HAL_RCC_ClockConfig+0x166>
 8004890:	f44f 711f 	mov.w	r1, #636	; 0x27c
 8004894:	482d      	ldr	r0, [pc, #180]	; (800494c <HAL_RCC_ClockConfig+0x218>)
 8004896:	f7fc f96c 	bl	8000b72 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d107      	bne.n	80048b2 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a2:	4b2c      	ldr	r3, [pc, #176]	; (8004954 <HAL_RCC_ClockConfig+0x220>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d119      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e0bf      	b.n	8004a32 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d003      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c2:	4b24      	ldr	r3, [pc, #144]	; (8004954 <HAL_RCC_ClockConfig+0x220>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e0af      	b.n	8004a32 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d2:	4b20      	ldr	r3, [pc, #128]	; (8004954 <HAL_RCC_ClockConfig+0x220>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e0a7      	b.n	8004a32 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e2:	4b1c      	ldr	r3, [pc, #112]	; (8004954 <HAL_RCC_ClockConfig+0x220>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4919      	ldr	r1, [pc, #100]	; (8004954 <HAL_RCC_ClockConfig+0x220>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f4:	f7fd ff80 	bl	80027f8 <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	e00a      	b.n	8004912 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fc:	f7fd ff7c 	bl	80027f8 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	; 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e08f      	b.n	8004a32 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	4b10      	ldr	r3, [pc, #64]	; (8004954 <HAL_RCC_ClockConfig+0x220>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 020c 	and.w	r2, r3, #12
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	429a      	cmp	r2, r3
 8004922:	d1eb      	bne.n	80048fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004924:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <HAL_RCC_ClockConfig+0x21c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d212      	bcs.n	8004958 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b07      	ldr	r3, [pc, #28]	; (8004950 <HAL_RCC_ClockConfig+0x21c>)
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_RCC_ClockConfig+0x21c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d007      	beq.n	8004958 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e072      	b.n	8004a32 <HAL_RCC_ClockConfig+0x2fe>
 800494c:	080073f8 	.word	0x080073f8
 8004950:	40023c00 	.word	0x40023c00
 8004954:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d025      	beq.n	80049b0 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d018      	beq.n	800499e <HAL_RCC_ClockConfig+0x26a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004974:	d013      	beq.n	800499e <HAL_RCC_ClockConfig+0x26a>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800497e:	d00e      	beq.n	800499e <HAL_RCC_ClockConfig+0x26a>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004988:	d009      	beq.n	800499e <HAL_RCC_ClockConfig+0x26a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004992:	d004      	beq.n	800499e <HAL_RCC_ClockConfig+0x26a>
 8004994:	f240 21ba 	movw	r1, #698	; 0x2ba
 8004998:	4828      	ldr	r0, [pc, #160]	; (8004a3c <HAL_RCC_ClockConfig+0x308>)
 800499a:	f7fc f8ea 	bl	8000b72 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800499e:	4b28      	ldr	r3, [pc, #160]	; (8004a40 <HAL_RCC_ClockConfig+0x30c>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	4925      	ldr	r1, [pc, #148]	; (8004a40 <HAL_RCC_ClockConfig+0x30c>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d026      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d018      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x2c2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049cc:	d013      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x2c2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049d6:	d00e      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x2c2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80049e0:	d009      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x2c2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80049ea:	d004      	beq.n	80049f6 <HAL_RCC_ClockConfig+0x2c2>
 80049ec:	f240 21c1 	movw	r1, #705	; 0x2c1
 80049f0:	4812      	ldr	r0, [pc, #72]	; (8004a3c <HAL_RCC_ClockConfig+0x308>)
 80049f2:	f7fc f8be 	bl	8000b72 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049f6:	4b12      	ldr	r3, [pc, #72]	; (8004a40 <HAL_RCC_ClockConfig+0x30c>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	490e      	ldr	r1, [pc, #56]	; (8004a40 <HAL_RCC_ClockConfig+0x30c>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a0a:	f000 f821 	bl	8004a50 <HAL_RCC_GetSysClockFreq>
 8004a0e:	4601      	mov	r1, r0
 8004a10:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <HAL_RCC_ClockConfig+0x30c>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <HAL_RCC_ClockConfig+0x310>)
 8004a1c:	5cd3      	ldrb	r3, [r2, r3]
 8004a1e:	fa21 f303 	lsr.w	r3, r1, r3
 8004a22:	4a09      	ldr	r2, [pc, #36]	; (8004a48 <HAL_RCC_ClockConfig+0x314>)
 8004a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a26:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <HAL_RCC_ClockConfig+0x318>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fd fea0 	bl	8002770 <HAL_InitTick>

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	080073f8 	.word	0x080073f8
 8004a40:	40023800 	.word	0x40023800
 8004a44:	080075a4 	.word	0x080075a4
 8004a48:	20000000 	.word	0x20000000
 8004a4c:	20000004 	.word	0x20000004

08004a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a66:	4b63      	ldr	r3, [pc, #396]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 030c 	and.w	r3, r3, #12
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d007      	beq.n	8004a82 <HAL_RCC_GetSysClockFreq+0x32>
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d008      	beq.n	8004a88 <HAL_RCC_GetSysClockFreq+0x38>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f040 80b4 	bne.w	8004be4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a7c:	4b5e      	ldr	r3, [pc, #376]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a7e:	60bb      	str	r3, [r7, #8]
       break;
 8004a80:	e0b3      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a82:	4b5e      	ldr	r3, [pc, #376]	; (8004bfc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a84:	60bb      	str	r3, [r7, #8]
      break;
 8004a86:	e0b0      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a88:	4b5a      	ldr	r3, [pc, #360]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a92:	4b58      	ldr	r3, [pc, #352]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d04a      	beq.n	8004b34 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a9e:	4b55      	ldr	r3, [pc, #340]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	099b      	lsrs	r3, r3, #6
 8004aa4:	f04f 0400 	mov.w	r4, #0
 8004aa8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	ea03 0501 	and.w	r5, r3, r1
 8004ab4:	ea04 0602 	and.w	r6, r4, r2
 8004ab8:	4629      	mov	r1, r5
 8004aba:	4632      	mov	r2, r6
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	f04f 0400 	mov.w	r4, #0
 8004ac4:	0154      	lsls	r4, r2, #5
 8004ac6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004aca:	014b      	lsls	r3, r1, #5
 8004acc:	4619      	mov	r1, r3
 8004ace:	4622      	mov	r2, r4
 8004ad0:	1b49      	subs	r1, r1, r5
 8004ad2:	eb62 0206 	sbc.w	r2, r2, r6
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	f04f 0400 	mov.w	r4, #0
 8004ade:	0194      	lsls	r4, r2, #6
 8004ae0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ae4:	018b      	lsls	r3, r1, #6
 8004ae6:	1a5b      	subs	r3, r3, r1
 8004ae8:	eb64 0402 	sbc.w	r4, r4, r2
 8004aec:	f04f 0100 	mov.w	r1, #0
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	00e2      	lsls	r2, r4, #3
 8004af6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004afa:	00d9      	lsls	r1, r3, #3
 8004afc:	460b      	mov	r3, r1
 8004afe:	4614      	mov	r4, r2
 8004b00:	195b      	adds	r3, r3, r5
 8004b02:	eb44 0406 	adc.w	r4, r4, r6
 8004b06:	f04f 0100 	mov.w	r1, #0
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	0262      	lsls	r2, r4, #9
 8004b10:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b14:	0259      	lsls	r1, r3, #9
 8004b16:	460b      	mov	r3, r1
 8004b18:	4614      	mov	r4, r2
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f04f 0400 	mov.w	r4, #0
 8004b24:	461a      	mov	r2, r3
 8004b26:	4623      	mov	r3, r4
 8004b28:	f7fb fba2 	bl	8000270 <__aeabi_uldivmod>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	460c      	mov	r4, r1
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	e049      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b34:	4b2f      	ldr	r3, [pc, #188]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	099b      	lsrs	r3, r3, #6
 8004b3a:	f04f 0400 	mov.w	r4, #0
 8004b3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	ea03 0501 	and.w	r5, r3, r1
 8004b4a:	ea04 0602 	and.w	r6, r4, r2
 8004b4e:	4629      	mov	r1, r5
 8004b50:	4632      	mov	r2, r6
 8004b52:	f04f 0300 	mov.w	r3, #0
 8004b56:	f04f 0400 	mov.w	r4, #0
 8004b5a:	0154      	lsls	r4, r2, #5
 8004b5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b60:	014b      	lsls	r3, r1, #5
 8004b62:	4619      	mov	r1, r3
 8004b64:	4622      	mov	r2, r4
 8004b66:	1b49      	subs	r1, r1, r5
 8004b68:	eb62 0206 	sbc.w	r2, r2, r6
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	f04f 0400 	mov.w	r4, #0
 8004b74:	0194      	lsls	r4, r2, #6
 8004b76:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b7a:	018b      	lsls	r3, r1, #6
 8004b7c:	1a5b      	subs	r3, r3, r1
 8004b7e:	eb64 0402 	sbc.w	r4, r4, r2
 8004b82:	f04f 0100 	mov.w	r1, #0
 8004b86:	f04f 0200 	mov.w	r2, #0
 8004b8a:	00e2      	lsls	r2, r4, #3
 8004b8c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b90:	00d9      	lsls	r1, r3, #3
 8004b92:	460b      	mov	r3, r1
 8004b94:	4614      	mov	r4, r2
 8004b96:	195b      	adds	r3, r3, r5
 8004b98:	eb44 0406 	adc.w	r4, r4, r6
 8004b9c:	f04f 0100 	mov.w	r1, #0
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	02a2      	lsls	r2, r4, #10
 8004ba6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004baa:	0299      	lsls	r1, r3, #10
 8004bac:	460b      	mov	r3, r1
 8004bae:	4614      	mov	r4, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f04f 0400 	mov.w	r4, #0
 8004bba:	461a      	mov	r2, r3
 8004bbc:	4623      	mov	r3, r4
 8004bbe:	f7fb fb57 	bl	8000270 <__aeabi_uldivmod>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	0c1b      	lsrs	r3, r3, #16
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be0:	60bb      	str	r3, [r7, #8]
      break;
 8004be2:	e002      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004be4:	4b04      	ldr	r3, [pc, #16]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004be6:	60bb      	str	r3, [r7, #8]
      break;
 8004be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bea:	68bb      	ldr	r3, [r7, #8]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	00f42400 	.word	0x00f42400
 8004bfc:	007a1200 	.word	0x007a1200

08004c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c04:	4b03      	ldr	r3, [pc, #12]	; (8004c14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c06:	681b      	ldr	r3, [r3, #0]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	20000000 	.word	0x20000000

08004c18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c1c:	f7ff fff0 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c20:	4601      	mov	r1, r0
 8004c22:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	0a9b      	lsrs	r3, r3, #10
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	4a03      	ldr	r2, [pc, #12]	; (8004c3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c2e:	5cd3      	ldrb	r3, [r2, r3]
 8004c30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	080075b4 	.word	0x080075b4

08004c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c44:	f7ff ffdc 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c48:	4601      	mov	r1, r0
 8004c4a:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	0b5b      	lsrs	r3, r3, #13
 8004c50:	f003 0307 	and.w	r3, r3, #7
 8004c54:	4a03      	ldr	r2, [pc, #12]	; (8004c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c56:	5cd3      	ldrb	r3, [r2, r3]
 8004c58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40023800 	.word	0x40023800
 8004c64:	080075b4 	.word	0x080075b4

08004c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e0b4      	b.n	8004de4 <HAL_UART_Init+0x17c>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d031      	beq.n	8004ce6 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a59      	ldr	r2, [pc, #356]	; (8004dec <HAL_UART_Init+0x184>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <HAL_UART_Init+0x4c>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a57      	ldr	r2, [pc, #348]	; (8004df0 <HAL_UART_Init+0x188>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00e      	beq.n	8004cb4 <HAL_UART_Init+0x4c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a56      	ldr	r2, [pc, #344]	; (8004df4 <HAL_UART_Init+0x18c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d009      	beq.n	8004cb4 <HAL_UART_Init+0x4c>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a54      	ldr	r2, [pc, #336]	; (8004df8 <HAL_UART_Init+0x190>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <HAL_UART_Init+0x4c>
 8004caa:	f240 114b 	movw	r1, #331	; 0x14b
 8004cae:	4853      	ldr	r0, [pc, #332]	; (8004dfc <HAL_UART_Init+0x194>)
 8004cb0:	f7fb ff5f 	bl	8000b72 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d037      	beq.n	8004d2c <HAL_UART_Init+0xc4>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cc4:	d032      	beq.n	8004d2c <HAL_UART_Init+0xc4>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cce:	d02d      	beq.n	8004d2c <HAL_UART_Init+0xc4>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cd8:	d028      	beq.n	8004d2c <HAL_UART_Init+0xc4>
 8004cda:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004cde:	4847      	ldr	r0, [pc, #284]	; (8004dfc <HAL_UART_Init+0x194>)
 8004ce0:	f7fb ff47 	bl	8000b72 <assert_failed>
 8004ce4:	e022      	b.n	8004d2c <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a40      	ldr	r2, [pc, #256]	; (8004dec <HAL_UART_Init+0x184>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d01d      	beq.n	8004d2c <HAL_UART_Init+0xc4>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a3e      	ldr	r2, [pc, #248]	; (8004df0 <HAL_UART_Init+0x188>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d018      	beq.n	8004d2c <HAL_UART_Init+0xc4>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a3d      	ldr	r2, [pc, #244]	; (8004df4 <HAL_UART_Init+0x18c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d013      	beq.n	8004d2c <HAL_UART_Init+0xc4>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a3d      	ldr	r2, [pc, #244]	; (8004e00 <HAL_UART_Init+0x198>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00e      	beq.n	8004d2c <HAL_UART_Init+0xc4>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a3c      	ldr	r2, [pc, #240]	; (8004e04 <HAL_UART_Init+0x19c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d009      	beq.n	8004d2c <HAL_UART_Init+0xc4>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a36      	ldr	r2, [pc, #216]	; (8004df8 <HAL_UART_Init+0x190>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <HAL_UART_Init+0xc4>
 8004d22:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004d26:	4835      	ldr	r0, [pc, #212]	; (8004dfc <HAL_UART_Init+0x194>)
 8004d28:	f7fb ff23 	bl	8000b72 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d009      	beq.n	8004d48 <HAL_UART_Init+0xe0>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d3c:	d004      	beq.n	8004d48 <HAL_UART_Init+0xe0>
 8004d3e:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8004d42:	482e      	ldr	r0, [pc, #184]	; (8004dfc <HAL_UART_Init+0x194>)
 8004d44:	f7fb ff15 	bl	8000b72 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d009      	beq.n	8004d64 <HAL_UART_Init+0xfc>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d58:	d004      	beq.n	8004d64 <HAL_UART_Init+0xfc>
 8004d5a:	f240 1153 	movw	r1, #339	; 0x153
 8004d5e:	4827      	ldr	r0, [pc, #156]	; (8004dfc <HAL_UART_Init+0x194>)
 8004d60:	f7fb ff07 	bl	8000b72 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d106      	bne.n	8004d7e <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7fd fc21 	bl	80025c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2224      	movs	r2, #36	; 0x24
 8004d82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d94:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fa76 	bl	8005288 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004daa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	695a      	ldr	r2, [r3, #20]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40011000 	.word	0x40011000
 8004df0:	40004400 	.word	0x40004400
 8004df4:	40004800 	.word	0x40004800
 8004df8:	40011400 	.word	0x40011400
 8004dfc:	08007430 	.word	0x08007430
 8004e00:	40004c00 	.word	0x40004c00
 8004e04:	40005000 	.word	0x40005000

08004e08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f003 030f 	and.w	r3, r3, #15
 8004e36:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10d      	bne.n	8004e5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <HAL_UART_IRQHandler+0x52>
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f996 	bl	8005184 <UART_Receive_IT>
      return;
 8004e58:	e0d1      	b.n	8004ffe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 80b0 	beq.w	8004fc2 <HAL_UART_IRQHandler+0x1ba>
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d105      	bne.n	8004e78 <HAL_UART_IRQHandler+0x70>
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 80a5 	beq.w	8004fc2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <HAL_UART_IRQHandler+0x90>
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e90:	f043 0201 	orr.w	r2, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_UART_IRQHandler+0xb0>
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb0:	f043 0202 	orr.w	r2, r3, #2
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <HAL_UART_IRQHandler+0xd0>
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed0:	f043 0204 	orr.w	r2, r3, #4
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00f      	beq.n	8004f02 <HAL_UART_IRQHandler+0xfa>
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d104      	bne.n	8004ef6 <HAL_UART_IRQHandler+0xee>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d005      	beq.n	8004f02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efa:	f043 0208 	orr.w	r2, r3, #8
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d078      	beq.n	8004ffc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d007      	beq.n	8004f24 <HAL_UART_IRQHandler+0x11c>
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f930 	bl	8005184 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b40      	cmp	r3, #64	; 0x40
 8004f30:	bf0c      	ite	eq
 8004f32:	2301      	moveq	r3, #1
 8004f34:	2300      	movne	r3, #0
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d102      	bne.n	8004f4c <HAL_UART_IRQHandler+0x144>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d031      	beq.n	8004fb0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f879 	bl	8005044 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d123      	bne.n	8004fa8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695a      	ldr	r2, [r3, #20]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f6e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d013      	beq.n	8004fa0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7c:	4a21      	ldr	r2, [pc, #132]	; (8005004 <HAL_UART_IRQHandler+0x1fc>)
 8004f7e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fe fdb1 	bl	8003aec <HAL_DMA_Abort_IT>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d016      	beq.n	8004fbe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9e:	e00e      	b.n	8004fbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f845 	bl	8005030 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fa6:	e00a      	b.n	8004fbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f841 	bl	8005030 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fae:	e006      	b.n	8004fbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f83d 	bl	8005030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004fbc:	e01e      	b.n	8004ffc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fbe:	bf00      	nop
    return;
 8004fc0:	e01c      	b.n	8004ffc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <HAL_UART_IRQHandler+0x1d6>
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f866 	bl	80050a8 <UART_Transmit_IT>
    return;
 8004fdc:	e00f      	b.n	8004ffe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <HAL_UART_IRQHandler+0x1f6>
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d005      	beq.n	8004ffe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f8ae 	bl	8005154 <UART_EndTransmit_IT>
    return;
 8004ff8:	bf00      	nop
 8004ffa:	e000      	b.n	8004ffe <HAL_UART_IRQHandler+0x1f6>
    return;
 8004ffc:	bf00      	nop
  }
}
 8004ffe:	3720      	adds	r7, #32
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	08005081 	.word	0x08005081

08005008 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800505a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695a      	ldr	r2, [r3, #20]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0201 	bic.w	r2, r2, #1
 800506a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f7ff ffc8 	bl	8005030 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050a0:	bf00      	nop
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b21      	cmp	r3, #33	; 0x21
 80050ba:	d144      	bne.n	8005146 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c4:	d11a      	bne.n	80050fc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050da:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d105      	bne.n	80050f0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	1c9a      	adds	r2, r3, #2
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	621a      	str	r2, [r3, #32]
 80050ee:	e00e      	b.n	800510e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	621a      	str	r2, [r3, #32]
 80050fa:	e008      	b.n	800510e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	1c59      	adds	r1, r3, #1
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6211      	str	r1, [r2, #32]
 8005106:	781a      	ldrb	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005112:	b29b      	uxth	r3, r3
 8005114:	3b01      	subs	r3, #1
 8005116:	b29b      	uxth	r3, r3
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	4619      	mov	r1, r3
 800511c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10f      	bne.n	8005142 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005130:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005140:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	e000      	b.n	8005148 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005146:	2302      	movs	r3, #2
  }
}
 8005148:	4618      	mov	r0, r3
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800516a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff ff47 	bl	8005008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b22      	cmp	r3, #34	; 0x22
 8005196:	d171      	bne.n	800527c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a0:	d123      	bne.n	80051ea <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10e      	bne.n	80051ce <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c6:	1c9a      	adds	r2, r3, #2
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	629a      	str	r2, [r3, #40]	; 0x28
 80051cc:	e029      	b.n	8005222 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	629a      	str	r2, [r3, #40]	; 0x28
 80051e8:	e01b      	b.n	8005222 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10a      	bne.n	8005208 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6858      	ldr	r0, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fc:	1c59      	adds	r1, r3, #1
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	6291      	str	r1, [r2, #40]	; 0x28
 8005202:	b2c2      	uxtb	r2, r0
 8005204:	701a      	strb	r2, [r3, #0]
 8005206:	e00c      	b.n	8005222 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	b2da      	uxtb	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	1c58      	adds	r0, r3, #1
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	6288      	str	r0, [r1, #40]	; 0x28
 800521a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29b      	uxth	r3, r3
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	4619      	mov	r1, r3
 8005230:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005232:	2b00      	cmp	r3, #0
 8005234:	d120      	bne.n	8005278 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0220 	bic.w	r2, r2, #32
 8005244:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68da      	ldr	r2, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005254:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	695a      	ldr	r2, [r3, #20]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0201 	bic.w	r2, r2, #1
 8005264:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2220      	movs	r2, #32
 800526a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff fed4 	bl	800501c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	e002      	b.n	800527e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	e000      	b.n	800527e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800527c:	2302      	movs	r3, #2
  }
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	4a9a      	ldr	r2, [pc, #616]	; (8005500 <UART_SetConfig+0x278>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d904      	bls.n	80052a6 <UART_SetConfig+0x1e>
 800529c:	f640 31fb 	movw	r1, #3067	; 0xbfb
 80052a0:	4898      	ldr	r0, [pc, #608]	; (8005504 <UART_SetConfig+0x27c>)
 80052a2:	f7fb fc66 	bl	8000b72 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d009      	beq.n	80052c2 <UART_SetConfig+0x3a>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b6:	d004      	beq.n	80052c2 <UART_SetConfig+0x3a>
 80052b8:	f640 31fc 	movw	r1, #3068	; 0xbfc
 80052bc:	4891      	ldr	r0, [pc, #580]	; (8005504 <UART_SetConfig+0x27c>)
 80052be:	f7fb fc58 	bl	8000b72 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00e      	beq.n	80052e8 <UART_SetConfig+0x60>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d2:	d009      	beq.n	80052e8 <UART_SetConfig+0x60>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80052dc:	d004      	beq.n	80052e8 <UART_SetConfig+0x60>
 80052de:	f640 31fd 	movw	r1, #3069	; 0xbfd
 80052e2:	4888      	ldr	r0, [pc, #544]	; (8005504 <UART_SetConfig+0x27c>)
 80052e4:	f7fb fc45 	bl	8000b72 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	695a      	ldr	r2, [r3, #20]
 80052ec:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80052f0:	4013      	ands	r3, r2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d103      	bne.n	80052fe <UART_SetConfig+0x76>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d104      	bne.n	8005308 <UART_SetConfig+0x80>
 80052fe:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8005302:	4880      	ldr	r0, [pc, #512]	; (8005504 <UART_SetConfig+0x27c>)
 8005304:	f7fb fc35 	bl	8000b72 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005340:	f023 030c 	bic.w	r3, r3, #12
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	68f9      	ldr	r1, [r7, #12]
 800534a:	430b      	orrs	r3, r1
 800534c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699a      	ldr	r2, [r3, #24]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800536c:	f040 818f 	bne.w	800568e <UART_SetConfig+0x406>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a64      	ldr	r2, [pc, #400]	; (8005508 <UART_SetConfig+0x280>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d005      	beq.n	8005386 <UART_SetConfig+0xfe>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a63      	ldr	r2, [pc, #396]	; (800550c <UART_SetConfig+0x284>)
 8005380:	4293      	cmp	r3, r2
 8005382:	f040 80c7 	bne.w	8005514 <UART_SetConfig+0x28c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005386:	f7ff fc5b 	bl	8004c40 <HAL_RCC_GetPCLK2Freq>
 800538a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	461d      	mov	r5, r3
 8005390:	f04f 0600 	mov.w	r6, #0
 8005394:	46a8      	mov	r8, r5
 8005396:	46b1      	mov	r9, r6
 8005398:	eb18 0308 	adds.w	r3, r8, r8
 800539c:	eb49 0409 	adc.w	r4, r9, r9
 80053a0:	4698      	mov	r8, r3
 80053a2:	46a1      	mov	r9, r4
 80053a4:	eb18 0805 	adds.w	r8, r8, r5
 80053a8:	eb49 0906 	adc.w	r9, r9, r6
 80053ac:	f04f 0100 	mov.w	r1, #0
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80053b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80053bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80053c0:	4688      	mov	r8, r1
 80053c2:	4691      	mov	r9, r2
 80053c4:	eb18 0005 	adds.w	r0, r8, r5
 80053c8:	eb49 0106 	adc.w	r1, r9, r6
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	461d      	mov	r5, r3
 80053d2:	f04f 0600 	mov.w	r6, #0
 80053d6:	196b      	adds	r3, r5, r5
 80053d8:	eb46 0406 	adc.w	r4, r6, r6
 80053dc:	461a      	mov	r2, r3
 80053de:	4623      	mov	r3, r4
 80053e0:	f7fa ff46 	bl	8000270 <__aeabi_uldivmod>
 80053e4:	4603      	mov	r3, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	461a      	mov	r2, r3
 80053ea:	4b49      	ldr	r3, [pc, #292]	; (8005510 <UART_SetConfig+0x288>)
 80053ec:	fba3 2302 	umull	r2, r3, r3, r2
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	461d      	mov	r5, r3
 80053fa:	f04f 0600 	mov.w	r6, #0
 80053fe:	46a9      	mov	r9, r5
 8005400:	46b2      	mov	sl, r6
 8005402:	eb19 0309 	adds.w	r3, r9, r9
 8005406:	eb4a 040a 	adc.w	r4, sl, sl
 800540a:	4699      	mov	r9, r3
 800540c:	46a2      	mov	sl, r4
 800540e:	eb19 0905 	adds.w	r9, r9, r5
 8005412:	eb4a 0a06 	adc.w	sl, sl, r6
 8005416:	f04f 0100 	mov.w	r1, #0
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005422:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005426:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800542a:	4689      	mov	r9, r1
 800542c:	4692      	mov	sl, r2
 800542e:	eb19 0005 	adds.w	r0, r9, r5
 8005432:	eb4a 0106 	adc.w	r1, sl, r6
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	461d      	mov	r5, r3
 800543c:	f04f 0600 	mov.w	r6, #0
 8005440:	196b      	adds	r3, r5, r5
 8005442:	eb46 0406 	adc.w	r4, r6, r6
 8005446:	461a      	mov	r2, r3
 8005448:	4623      	mov	r3, r4
 800544a:	f7fa ff11 	bl	8000270 <__aeabi_uldivmod>
 800544e:	4603      	mov	r3, r0
 8005450:	460c      	mov	r4, r1
 8005452:	461a      	mov	r2, r3
 8005454:	4b2e      	ldr	r3, [pc, #184]	; (8005510 <UART_SetConfig+0x288>)
 8005456:	fba3 1302 	umull	r1, r3, r3, r2
 800545a:	095b      	lsrs	r3, r3, #5
 800545c:	2164      	movs	r1, #100	; 0x64
 800545e:	fb01 f303 	mul.w	r3, r1, r3
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	3332      	adds	r3, #50	; 0x32
 8005468:	4a29      	ldr	r2, [pc, #164]	; (8005510 <UART_SetConfig+0x288>)
 800546a:	fba2 2303 	umull	r2, r3, r2, r3
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005476:	4498      	add	r8, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	461d      	mov	r5, r3
 800547c:	f04f 0600 	mov.w	r6, #0
 8005480:	46a9      	mov	r9, r5
 8005482:	46b2      	mov	sl, r6
 8005484:	eb19 0309 	adds.w	r3, r9, r9
 8005488:	eb4a 040a 	adc.w	r4, sl, sl
 800548c:	4699      	mov	r9, r3
 800548e:	46a2      	mov	sl, r4
 8005490:	eb19 0905 	adds.w	r9, r9, r5
 8005494:	eb4a 0a06 	adc.w	sl, sl, r6
 8005498:	f04f 0100 	mov.w	r1, #0
 800549c:	f04f 0200 	mov.w	r2, #0
 80054a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054ac:	4689      	mov	r9, r1
 80054ae:	4692      	mov	sl, r2
 80054b0:	eb19 0005 	adds.w	r0, r9, r5
 80054b4:	eb4a 0106 	adc.w	r1, sl, r6
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	461d      	mov	r5, r3
 80054be:	f04f 0600 	mov.w	r6, #0
 80054c2:	196b      	adds	r3, r5, r5
 80054c4:	eb46 0406 	adc.w	r4, r6, r6
 80054c8:	461a      	mov	r2, r3
 80054ca:	4623      	mov	r3, r4
 80054cc:	f7fa fed0 	bl	8000270 <__aeabi_uldivmod>
 80054d0:	4603      	mov	r3, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	461a      	mov	r2, r3
 80054d6:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <UART_SetConfig+0x288>)
 80054d8:	fba3 1302 	umull	r1, r3, r3, r2
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	2164      	movs	r1, #100	; 0x64
 80054e0:	fb01 f303 	mul.w	r3, r1, r3
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	3332      	adds	r3, #50	; 0x32
 80054ea:	4a09      	ldr	r2, [pc, #36]	; (8005510 <UART_SetConfig+0x288>)
 80054ec:	fba2 2303 	umull	r2, r3, r2, r3
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	f003 0207 	and.w	r2, r3, #7
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4442      	add	r2, r8
 80054fc:	609a      	str	r2, [r3, #8]
 80054fe:	e27a      	b.n	80059f6 <UART_SetConfig+0x76e>
 8005500:	00a037a0 	.word	0x00a037a0
 8005504:	08007430 	.word	0x08007430
 8005508:	40011000 	.word	0x40011000
 800550c:	40011400 	.word	0x40011400
 8005510:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005514:	f7ff fb80 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8005518:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	461d      	mov	r5, r3
 800551e:	f04f 0600 	mov.w	r6, #0
 8005522:	46a8      	mov	r8, r5
 8005524:	46b1      	mov	r9, r6
 8005526:	eb18 0308 	adds.w	r3, r8, r8
 800552a:	eb49 0409 	adc.w	r4, r9, r9
 800552e:	4698      	mov	r8, r3
 8005530:	46a1      	mov	r9, r4
 8005532:	eb18 0805 	adds.w	r8, r8, r5
 8005536:	eb49 0906 	adc.w	r9, r9, r6
 800553a:	f04f 0100 	mov.w	r1, #0
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005546:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800554a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800554e:	4688      	mov	r8, r1
 8005550:	4691      	mov	r9, r2
 8005552:	eb18 0005 	adds.w	r0, r8, r5
 8005556:	eb49 0106 	adc.w	r1, r9, r6
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	461d      	mov	r5, r3
 8005560:	f04f 0600 	mov.w	r6, #0
 8005564:	196b      	adds	r3, r5, r5
 8005566:	eb46 0406 	adc.w	r4, r6, r6
 800556a:	461a      	mov	r2, r3
 800556c:	4623      	mov	r3, r4
 800556e:	f7fa fe7f 	bl	8000270 <__aeabi_uldivmod>
 8005572:	4603      	mov	r3, r0
 8005574:	460c      	mov	r4, r1
 8005576:	461a      	mov	r2, r3
 8005578:	4bb3      	ldr	r3, [pc, #716]	; (8005848 <UART_SetConfig+0x5c0>)
 800557a:	fba3 2302 	umull	r2, r3, r3, r2
 800557e:	095b      	lsrs	r3, r3, #5
 8005580:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	461d      	mov	r5, r3
 8005588:	f04f 0600 	mov.w	r6, #0
 800558c:	46a9      	mov	r9, r5
 800558e:	46b2      	mov	sl, r6
 8005590:	eb19 0309 	adds.w	r3, r9, r9
 8005594:	eb4a 040a 	adc.w	r4, sl, sl
 8005598:	4699      	mov	r9, r3
 800559a:	46a2      	mov	sl, r4
 800559c:	eb19 0905 	adds.w	r9, r9, r5
 80055a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80055a4:	f04f 0100 	mov.w	r1, #0
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055b8:	4689      	mov	r9, r1
 80055ba:	4692      	mov	sl, r2
 80055bc:	eb19 0005 	adds.w	r0, r9, r5
 80055c0:	eb4a 0106 	adc.w	r1, sl, r6
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	461d      	mov	r5, r3
 80055ca:	f04f 0600 	mov.w	r6, #0
 80055ce:	196b      	adds	r3, r5, r5
 80055d0:	eb46 0406 	adc.w	r4, r6, r6
 80055d4:	461a      	mov	r2, r3
 80055d6:	4623      	mov	r3, r4
 80055d8:	f7fa fe4a 	bl	8000270 <__aeabi_uldivmod>
 80055dc:	4603      	mov	r3, r0
 80055de:	460c      	mov	r4, r1
 80055e0:	461a      	mov	r2, r3
 80055e2:	4b99      	ldr	r3, [pc, #612]	; (8005848 <UART_SetConfig+0x5c0>)
 80055e4:	fba3 1302 	umull	r1, r3, r3, r2
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	2164      	movs	r1, #100	; 0x64
 80055ec:	fb01 f303 	mul.w	r3, r1, r3
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	3332      	adds	r3, #50	; 0x32
 80055f6:	4a94      	ldr	r2, [pc, #592]	; (8005848 <UART_SetConfig+0x5c0>)
 80055f8:	fba2 2303 	umull	r2, r3, r2, r3
 80055fc:	095b      	lsrs	r3, r3, #5
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005604:	4498      	add	r8, r3
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	461d      	mov	r5, r3
 800560a:	f04f 0600 	mov.w	r6, #0
 800560e:	46a9      	mov	r9, r5
 8005610:	46b2      	mov	sl, r6
 8005612:	eb19 0309 	adds.w	r3, r9, r9
 8005616:	eb4a 040a 	adc.w	r4, sl, sl
 800561a:	4699      	mov	r9, r3
 800561c:	46a2      	mov	sl, r4
 800561e:	eb19 0905 	adds.w	r9, r9, r5
 8005622:	eb4a 0a06 	adc.w	sl, sl, r6
 8005626:	f04f 0100 	mov.w	r1, #0
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005632:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005636:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800563a:	4689      	mov	r9, r1
 800563c:	4692      	mov	sl, r2
 800563e:	eb19 0005 	adds.w	r0, r9, r5
 8005642:	eb4a 0106 	adc.w	r1, sl, r6
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	461d      	mov	r5, r3
 800564c:	f04f 0600 	mov.w	r6, #0
 8005650:	196b      	adds	r3, r5, r5
 8005652:	eb46 0406 	adc.w	r4, r6, r6
 8005656:	461a      	mov	r2, r3
 8005658:	4623      	mov	r3, r4
 800565a:	f7fa fe09 	bl	8000270 <__aeabi_uldivmod>
 800565e:	4603      	mov	r3, r0
 8005660:	460c      	mov	r4, r1
 8005662:	461a      	mov	r2, r3
 8005664:	4b78      	ldr	r3, [pc, #480]	; (8005848 <UART_SetConfig+0x5c0>)
 8005666:	fba3 1302 	umull	r1, r3, r3, r2
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	2164      	movs	r1, #100	; 0x64
 800566e:	fb01 f303 	mul.w	r3, r1, r3
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	3332      	adds	r3, #50	; 0x32
 8005678:	4a73      	ldr	r2, [pc, #460]	; (8005848 <UART_SetConfig+0x5c0>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	095b      	lsrs	r3, r3, #5
 8005680:	f003 0207 	and.w	r2, r3, #7
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4442      	add	r2, r8
 800568a:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800568c:	e1b3      	b.n	80059f6 <UART_SetConfig+0x76e>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a6e      	ldr	r2, [pc, #440]	; (800584c <UART_SetConfig+0x5c4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d005      	beq.n	80056a4 <UART_SetConfig+0x41c>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a6c      	ldr	r2, [pc, #432]	; (8005850 <UART_SetConfig+0x5c8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	f040 80d8 	bne.w	8005854 <UART_SetConfig+0x5cc>
      pclk = HAL_RCC_GetPCLK2Freq();
 80056a4:	f7ff facc 	bl	8004c40 <HAL_RCC_GetPCLK2Freq>
 80056a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	469a      	mov	sl, r3
 80056ae:	f04f 0b00 	mov.w	fp, #0
 80056b2:	46d0      	mov	r8, sl
 80056b4:	46d9      	mov	r9, fp
 80056b6:	eb18 0308 	adds.w	r3, r8, r8
 80056ba:	eb49 0409 	adc.w	r4, r9, r9
 80056be:	4698      	mov	r8, r3
 80056c0:	46a1      	mov	r9, r4
 80056c2:	eb18 080a 	adds.w	r8, r8, sl
 80056c6:	eb49 090b 	adc.w	r9, r9, fp
 80056ca:	f04f 0100 	mov.w	r1, #0
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056de:	4688      	mov	r8, r1
 80056e0:	4691      	mov	r9, r2
 80056e2:	eb1a 0508 	adds.w	r5, sl, r8
 80056e6:	eb4b 0609 	adc.w	r6, fp, r9
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	4619      	mov	r1, r3
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	f04f 0400 	mov.w	r4, #0
 80056fc:	0094      	lsls	r4, r2, #2
 80056fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005702:	008b      	lsls	r3, r1, #2
 8005704:	461a      	mov	r2, r3
 8005706:	4623      	mov	r3, r4
 8005708:	4628      	mov	r0, r5
 800570a:	4631      	mov	r1, r6
 800570c:	f7fa fdb0 	bl	8000270 <__aeabi_uldivmod>
 8005710:	4603      	mov	r3, r0
 8005712:	460c      	mov	r4, r1
 8005714:	461a      	mov	r2, r3
 8005716:	4b4c      	ldr	r3, [pc, #304]	; (8005848 <UART_SetConfig+0x5c0>)
 8005718:	fba3 2302 	umull	r2, r3, r3, r2
 800571c:	095b      	lsrs	r3, r3, #5
 800571e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	469b      	mov	fp, r3
 8005726:	f04f 0c00 	mov.w	ip, #0
 800572a:	46d9      	mov	r9, fp
 800572c:	46e2      	mov	sl, ip
 800572e:	eb19 0309 	adds.w	r3, r9, r9
 8005732:	eb4a 040a 	adc.w	r4, sl, sl
 8005736:	4699      	mov	r9, r3
 8005738:	46a2      	mov	sl, r4
 800573a:	eb19 090b 	adds.w	r9, r9, fp
 800573e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005742:	f04f 0100 	mov.w	r1, #0
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800574e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005752:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005756:	4689      	mov	r9, r1
 8005758:	4692      	mov	sl, r2
 800575a:	eb1b 0509 	adds.w	r5, fp, r9
 800575e:	eb4c 060a 	adc.w	r6, ip, sl
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	4619      	mov	r1, r3
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	f04f 0400 	mov.w	r4, #0
 8005774:	0094      	lsls	r4, r2, #2
 8005776:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800577a:	008b      	lsls	r3, r1, #2
 800577c:	461a      	mov	r2, r3
 800577e:	4623      	mov	r3, r4
 8005780:	4628      	mov	r0, r5
 8005782:	4631      	mov	r1, r6
 8005784:	f7fa fd74 	bl	8000270 <__aeabi_uldivmod>
 8005788:	4603      	mov	r3, r0
 800578a:	460c      	mov	r4, r1
 800578c:	461a      	mov	r2, r3
 800578e:	4b2e      	ldr	r3, [pc, #184]	; (8005848 <UART_SetConfig+0x5c0>)
 8005790:	fba3 1302 	umull	r1, r3, r3, r2
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	2164      	movs	r1, #100	; 0x64
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	3332      	adds	r3, #50	; 0x32
 80057a2:	4a29      	ldr	r2, [pc, #164]	; (8005848 <UART_SetConfig+0x5c0>)
 80057a4:	fba2 2303 	umull	r2, r3, r2, r3
 80057a8:	095b      	lsrs	r3, r3, #5
 80057aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057ae:	4498      	add	r8, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	469b      	mov	fp, r3
 80057b4:	f04f 0c00 	mov.w	ip, #0
 80057b8:	46d9      	mov	r9, fp
 80057ba:	46e2      	mov	sl, ip
 80057bc:	eb19 0309 	adds.w	r3, r9, r9
 80057c0:	eb4a 040a 	adc.w	r4, sl, sl
 80057c4:	4699      	mov	r9, r3
 80057c6:	46a2      	mov	sl, r4
 80057c8:	eb19 090b 	adds.w	r9, r9, fp
 80057cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80057d0:	f04f 0100 	mov.w	r1, #0
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057e4:	4689      	mov	r9, r1
 80057e6:	4692      	mov	sl, r2
 80057e8:	eb1b 0509 	adds.w	r5, fp, r9
 80057ec:	eb4c 060a 	adc.w	r6, ip, sl
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	4619      	mov	r1, r3
 80057f6:	f04f 0200 	mov.w	r2, #0
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	f04f 0400 	mov.w	r4, #0
 8005802:	0094      	lsls	r4, r2, #2
 8005804:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005808:	008b      	lsls	r3, r1, #2
 800580a:	461a      	mov	r2, r3
 800580c:	4623      	mov	r3, r4
 800580e:	4628      	mov	r0, r5
 8005810:	4631      	mov	r1, r6
 8005812:	f7fa fd2d 	bl	8000270 <__aeabi_uldivmod>
 8005816:	4603      	mov	r3, r0
 8005818:	460c      	mov	r4, r1
 800581a:	461a      	mov	r2, r3
 800581c:	4b0a      	ldr	r3, [pc, #40]	; (8005848 <UART_SetConfig+0x5c0>)
 800581e:	fba3 1302 	umull	r1, r3, r3, r2
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	2164      	movs	r1, #100	; 0x64
 8005826:	fb01 f303 	mul.w	r3, r1, r3
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	3332      	adds	r3, #50	; 0x32
 8005830:	4a05      	ldr	r2, [pc, #20]	; (8005848 <UART_SetConfig+0x5c0>)
 8005832:	fba2 2303 	umull	r2, r3, r2, r3
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	f003 020f 	and.w	r2, r3, #15
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4442      	add	r2, r8
 8005842:	609a      	str	r2, [r3, #8]
 8005844:	e0d7      	b.n	80059f6 <UART_SetConfig+0x76e>
 8005846:	bf00      	nop
 8005848:	51eb851f 	.word	0x51eb851f
 800584c:	40011000 	.word	0x40011000
 8005850:	40011400 	.word	0x40011400
      pclk = HAL_RCC_GetPCLK1Freq();
 8005854:	f7ff f9e0 	bl	8004c18 <HAL_RCC_GetPCLK1Freq>
 8005858:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	469a      	mov	sl, r3
 800585e:	f04f 0b00 	mov.w	fp, #0
 8005862:	46d0      	mov	r8, sl
 8005864:	46d9      	mov	r9, fp
 8005866:	eb18 0308 	adds.w	r3, r8, r8
 800586a:	eb49 0409 	adc.w	r4, r9, r9
 800586e:	4698      	mov	r8, r3
 8005870:	46a1      	mov	r9, r4
 8005872:	eb18 080a 	adds.w	r8, r8, sl
 8005876:	eb49 090b 	adc.w	r9, r9, fp
 800587a:	f04f 0100 	mov.w	r1, #0
 800587e:	f04f 0200 	mov.w	r2, #0
 8005882:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005886:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800588a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800588e:	4688      	mov	r8, r1
 8005890:	4691      	mov	r9, r2
 8005892:	eb1a 0508 	adds.w	r5, sl, r8
 8005896:	eb4b 0609 	adc.w	r6, fp, r9
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	4619      	mov	r1, r3
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	f04f 0400 	mov.w	r4, #0
 80058ac:	0094      	lsls	r4, r2, #2
 80058ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058b2:	008b      	lsls	r3, r1, #2
 80058b4:	461a      	mov	r2, r3
 80058b6:	4623      	mov	r3, r4
 80058b8:	4628      	mov	r0, r5
 80058ba:	4631      	mov	r1, r6
 80058bc:	f7fa fcd8 	bl	8000270 <__aeabi_uldivmod>
 80058c0:	4603      	mov	r3, r0
 80058c2:	460c      	mov	r4, r1
 80058c4:	461a      	mov	r2, r3
 80058c6:	4b4e      	ldr	r3, [pc, #312]	; (8005a00 <UART_SetConfig+0x778>)
 80058c8:	fba3 2302 	umull	r2, r3, r3, r2
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	469b      	mov	fp, r3
 80058d6:	f04f 0c00 	mov.w	ip, #0
 80058da:	46d9      	mov	r9, fp
 80058dc:	46e2      	mov	sl, ip
 80058de:	eb19 0309 	adds.w	r3, r9, r9
 80058e2:	eb4a 040a 	adc.w	r4, sl, sl
 80058e6:	4699      	mov	r9, r3
 80058e8:	46a2      	mov	sl, r4
 80058ea:	eb19 090b 	adds.w	r9, r9, fp
 80058ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058f2:	f04f 0100 	mov.w	r1, #0
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005902:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005906:	4689      	mov	r9, r1
 8005908:	4692      	mov	sl, r2
 800590a:	eb1b 0509 	adds.w	r5, fp, r9
 800590e:	eb4c 060a 	adc.w	r6, ip, sl
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	4619      	mov	r1, r3
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	f04f 0400 	mov.w	r4, #0
 8005924:	0094      	lsls	r4, r2, #2
 8005926:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800592a:	008b      	lsls	r3, r1, #2
 800592c:	461a      	mov	r2, r3
 800592e:	4623      	mov	r3, r4
 8005930:	4628      	mov	r0, r5
 8005932:	4631      	mov	r1, r6
 8005934:	f7fa fc9c 	bl	8000270 <__aeabi_uldivmod>
 8005938:	4603      	mov	r3, r0
 800593a:	460c      	mov	r4, r1
 800593c:	461a      	mov	r2, r3
 800593e:	4b30      	ldr	r3, [pc, #192]	; (8005a00 <UART_SetConfig+0x778>)
 8005940:	fba3 1302 	umull	r1, r3, r3, r2
 8005944:	095b      	lsrs	r3, r3, #5
 8005946:	2164      	movs	r1, #100	; 0x64
 8005948:	fb01 f303 	mul.w	r3, r1, r3
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	3332      	adds	r3, #50	; 0x32
 8005952:	4a2b      	ldr	r2, [pc, #172]	; (8005a00 <UART_SetConfig+0x778>)
 8005954:	fba2 2303 	umull	r2, r3, r2, r3
 8005958:	095b      	lsrs	r3, r3, #5
 800595a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800595e:	4498      	add	r8, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	469b      	mov	fp, r3
 8005964:	f04f 0c00 	mov.w	ip, #0
 8005968:	46d9      	mov	r9, fp
 800596a:	46e2      	mov	sl, ip
 800596c:	eb19 0309 	adds.w	r3, r9, r9
 8005970:	eb4a 040a 	adc.w	r4, sl, sl
 8005974:	4699      	mov	r9, r3
 8005976:	46a2      	mov	sl, r4
 8005978:	eb19 090b 	adds.w	r9, r9, fp
 800597c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800598c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005990:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005994:	4689      	mov	r9, r1
 8005996:	4692      	mov	sl, r2
 8005998:	eb1b 0509 	adds.w	r5, fp, r9
 800599c:	eb4c 060a 	adc.w	r6, ip, sl
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	4619      	mov	r1, r3
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	f04f 0400 	mov.w	r4, #0
 80059b2:	0094      	lsls	r4, r2, #2
 80059b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059b8:	008b      	lsls	r3, r1, #2
 80059ba:	461a      	mov	r2, r3
 80059bc:	4623      	mov	r3, r4
 80059be:	4628      	mov	r0, r5
 80059c0:	4631      	mov	r1, r6
 80059c2:	f7fa fc55 	bl	8000270 <__aeabi_uldivmod>
 80059c6:	4603      	mov	r3, r0
 80059c8:	460c      	mov	r4, r1
 80059ca:	461a      	mov	r2, r3
 80059cc:	4b0c      	ldr	r3, [pc, #48]	; (8005a00 <UART_SetConfig+0x778>)
 80059ce:	fba3 1302 	umull	r1, r3, r3, r2
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	2164      	movs	r1, #100	; 0x64
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	3332      	adds	r3, #50	; 0x32
 80059e0:	4a07      	ldr	r2, [pc, #28]	; (8005a00 <UART_SetConfig+0x778>)
 80059e2:	fba2 2303 	umull	r2, r3, r2, r3
 80059e6:	095b      	lsrs	r3, r3, #5
 80059e8:	f003 020f 	and.w	r2, r3, #15
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4442      	add	r2, r8
 80059f2:	609a      	str	r2, [r3, #8]
}
 80059f4:	e7ff      	b.n	80059f6 <UART_SetConfig+0x76e>
 80059f6:	bf00      	nop
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a00:	51eb851f 	.word	0x51eb851f

08005a04 <__assert_func>:
 8005a04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a06:	461c      	mov	r4, r3
 8005a08:	4b09      	ldr	r3, [pc, #36]	; (8005a30 <__assert_func+0x2c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4605      	mov	r5, r0
 8005a0e:	68d8      	ldr	r0, [r3, #12]
 8005a10:	b152      	cbz	r2, 8005a28 <__assert_func+0x24>
 8005a12:	4b08      	ldr	r3, [pc, #32]	; (8005a34 <__assert_func+0x30>)
 8005a14:	9100      	str	r1, [sp, #0]
 8005a16:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005a1a:	4907      	ldr	r1, [pc, #28]	; (8005a38 <__assert_func+0x34>)
 8005a1c:	462b      	mov	r3, r5
 8005a1e:	4622      	mov	r2, r4
 8005a20:	f000 f818 	bl	8005a54 <fiprintf>
 8005a24:	f000 fc88 	bl	8006338 <abort>
 8005a28:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <__assert_func+0x38>)
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	e7f2      	b.n	8005a14 <__assert_func+0x10>
 8005a2e:	bf00      	nop
 8005a30:	2000000c 	.word	0x2000000c
 8005a34:	080075bc 	.word	0x080075bc
 8005a38:	080075c9 	.word	0x080075c9
 8005a3c:	080075f7 	.word	0x080075f7

08005a40 <atoi>:
 8005a40:	220a      	movs	r2, #10
 8005a42:	2100      	movs	r1, #0
 8005a44:	f000 bba2 	b.w	800618c <strtol>

08005a48 <__errno>:
 8005a48:	4b01      	ldr	r3, [pc, #4]	; (8005a50 <__errno+0x8>)
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	2000000c 	.word	0x2000000c

08005a54 <fiprintf>:
 8005a54:	b40e      	push	{r1, r2, r3}
 8005a56:	b503      	push	{r0, r1, lr}
 8005a58:	4601      	mov	r1, r0
 8005a5a:	ab03      	add	r3, sp, #12
 8005a5c:	4805      	ldr	r0, [pc, #20]	; (8005a74 <fiprintf+0x20>)
 8005a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a62:	6800      	ldr	r0, [r0, #0]
 8005a64:	9301      	str	r3, [sp, #4]
 8005a66:	f000 f877 	bl	8005b58 <_vfiprintf_r>
 8005a6a:	b002      	add	sp, #8
 8005a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a70:	b003      	add	sp, #12
 8005a72:	4770      	bx	lr
 8005a74:	2000000c 	.word	0x2000000c

08005a78 <__libc_init_array>:
 8005a78:	b570      	push	{r4, r5, r6, lr}
 8005a7a:	4e0d      	ldr	r6, [pc, #52]	; (8005ab0 <__libc_init_array+0x38>)
 8005a7c:	4c0d      	ldr	r4, [pc, #52]	; (8005ab4 <__libc_init_array+0x3c>)
 8005a7e:	1ba4      	subs	r4, r4, r6
 8005a80:	10a4      	asrs	r4, r4, #2
 8005a82:	2500      	movs	r5, #0
 8005a84:	42a5      	cmp	r5, r4
 8005a86:	d109      	bne.n	8005a9c <__libc_init_array+0x24>
 8005a88:	4e0b      	ldr	r6, [pc, #44]	; (8005ab8 <__libc_init_array+0x40>)
 8005a8a:	4c0c      	ldr	r4, [pc, #48]	; (8005abc <__libc_init_array+0x44>)
 8005a8c:	f001 f806 	bl	8006a9c <_init>
 8005a90:	1ba4      	subs	r4, r4, r6
 8005a92:	10a4      	asrs	r4, r4, #2
 8005a94:	2500      	movs	r5, #0
 8005a96:	42a5      	cmp	r5, r4
 8005a98:	d105      	bne.n	8005aa6 <__libc_init_array+0x2e>
 8005a9a:	bd70      	pop	{r4, r5, r6, pc}
 8005a9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005aa0:	4798      	blx	r3
 8005aa2:	3501      	adds	r5, #1
 8005aa4:	e7ee      	b.n	8005a84 <__libc_init_array+0xc>
 8005aa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005aaa:	4798      	blx	r3
 8005aac:	3501      	adds	r5, #1
 8005aae:	e7f2      	b.n	8005a96 <__libc_init_array+0x1e>
 8005ab0:	080077a4 	.word	0x080077a4
 8005ab4:	080077a4 	.word	0x080077a4
 8005ab8:	080077a4 	.word	0x080077a4
 8005abc:	080077a8 	.word	0x080077a8

08005ac0 <memcmp>:
 8005ac0:	b530      	push	{r4, r5, lr}
 8005ac2:	2400      	movs	r4, #0
 8005ac4:	42a2      	cmp	r2, r4
 8005ac6:	d101      	bne.n	8005acc <memcmp+0xc>
 8005ac8:	2000      	movs	r0, #0
 8005aca:	e007      	b.n	8005adc <memcmp+0x1c>
 8005acc:	5d03      	ldrb	r3, [r0, r4]
 8005ace:	3401      	adds	r4, #1
 8005ad0:	190d      	adds	r5, r1, r4
 8005ad2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005ad6:	42ab      	cmp	r3, r5
 8005ad8:	d0f4      	beq.n	8005ac4 <memcmp+0x4>
 8005ada:	1b58      	subs	r0, r3, r5
 8005adc:	bd30      	pop	{r4, r5, pc}

08005ade <memcpy>:
 8005ade:	b510      	push	{r4, lr}
 8005ae0:	1e43      	subs	r3, r0, #1
 8005ae2:	440a      	add	r2, r1
 8005ae4:	4291      	cmp	r1, r2
 8005ae6:	d100      	bne.n	8005aea <memcpy+0xc>
 8005ae8:	bd10      	pop	{r4, pc}
 8005aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005af2:	e7f7      	b.n	8005ae4 <memcpy+0x6>

08005af4 <memset>:
 8005af4:	4402      	add	r2, r0
 8005af6:	4603      	mov	r3, r0
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d100      	bne.n	8005afe <memset+0xa>
 8005afc:	4770      	bx	lr
 8005afe:	f803 1b01 	strb.w	r1, [r3], #1
 8005b02:	e7f9      	b.n	8005af8 <memset+0x4>

08005b04 <__sfputc_r>:
 8005b04:	6893      	ldr	r3, [r2, #8]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	b410      	push	{r4}
 8005b0c:	6093      	str	r3, [r2, #8]
 8005b0e:	da08      	bge.n	8005b22 <__sfputc_r+0x1e>
 8005b10:	6994      	ldr	r4, [r2, #24]
 8005b12:	42a3      	cmp	r3, r4
 8005b14:	db01      	blt.n	8005b1a <__sfputc_r+0x16>
 8005b16:	290a      	cmp	r1, #10
 8005b18:	d103      	bne.n	8005b22 <__sfputc_r+0x1e>
 8005b1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b1e:	f000 bb4b 	b.w	80061b8 <__swbuf_r>
 8005b22:	6813      	ldr	r3, [r2, #0]
 8005b24:	1c58      	adds	r0, r3, #1
 8005b26:	6010      	str	r0, [r2, #0]
 8005b28:	7019      	strb	r1, [r3, #0]
 8005b2a:	4608      	mov	r0, r1
 8005b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <__sfputs_r>:
 8005b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b34:	4606      	mov	r6, r0
 8005b36:	460f      	mov	r7, r1
 8005b38:	4614      	mov	r4, r2
 8005b3a:	18d5      	adds	r5, r2, r3
 8005b3c:	42ac      	cmp	r4, r5
 8005b3e:	d101      	bne.n	8005b44 <__sfputs_r+0x12>
 8005b40:	2000      	movs	r0, #0
 8005b42:	e007      	b.n	8005b54 <__sfputs_r+0x22>
 8005b44:	463a      	mov	r2, r7
 8005b46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f7ff ffda 	bl	8005b04 <__sfputc_r>
 8005b50:	1c43      	adds	r3, r0, #1
 8005b52:	d1f3      	bne.n	8005b3c <__sfputs_r+0xa>
 8005b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b58 <_vfiprintf_r>:
 8005b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	b09d      	sub	sp, #116	; 0x74
 8005b60:	4617      	mov	r7, r2
 8005b62:	461d      	mov	r5, r3
 8005b64:	4606      	mov	r6, r0
 8005b66:	b118      	cbz	r0, 8005b70 <_vfiprintf_r+0x18>
 8005b68:	6983      	ldr	r3, [r0, #24]
 8005b6a:	b90b      	cbnz	r3, 8005b70 <_vfiprintf_r+0x18>
 8005b6c:	f000 fcdc 	bl	8006528 <__sinit>
 8005b70:	4b7c      	ldr	r3, [pc, #496]	; (8005d64 <_vfiprintf_r+0x20c>)
 8005b72:	429c      	cmp	r4, r3
 8005b74:	d158      	bne.n	8005c28 <_vfiprintf_r+0xd0>
 8005b76:	6874      	ldr	r4, [r6, #4]
 8005b78:	89a3      	ldrh	r3, [r4, #12]
 8005b7a:	0718      	lsls	r0, r3, #28
 8005b7c:	d55e      	bpl.n	8005c3c <_vfiprintf_r+0xe4>
 8005b7e:	6923      	ldr	r3, [r4, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d05b      	beq.n	8005c3c <_vfiprintf_r+0xe4>
 8005b84:	2300      	movs	r3, #0
 8005b86:	9309      	str	r3, [sp, #36]	; 0x24
 8005b88:	2320      	movs	r3, #32
 8005b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b8e:	2330      	movs	r3, #48	; 0x30
 8005b90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b94:	9503      	str	r5, [sp, #12]
 8005b96:	f04f 0b01 	mov.w	fp, #1
 8005b9a:	46b8      	mov	r8, r7
 8005b9c:	4645      	mov	r5, r8
 8005b9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005ba2:	b10b      	cbz	r3, 8005ba8 <_vfiprintf_r+0x50>
 8005ba4:	2b25      	cmp	r3, #37	; 0x25
 8005ba6:	d154      	bne.n	8005c52 <_vfiprintf_r+0xfa>
 8005ba8:	ebb8 0a07 	subs.w	sl, r8, r7
 8005bac:	d00b      	beq.n	8005bc6 <_vfiprintf_r+0x6e>
 8005bae:	4653      	mov	r3, sl
 8005bb0:	463a      	mov	r2, r7
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f7ff ffbc 	bl	8005b32 <__sfputs_r>
 8005bba:	3001      	adds	r0, #1
 8005bbc:	f000 80c2 	beq.w	8005d44 <_vfiprintf_r+0x1ec>
 8005bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc2:	4453      	add	r3, sl
 8005bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc6:	f898 3000 	ldrb.w	r3, [r8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 80ba 	beq.w	8005d44 <_vfiprintf_r+0x1ec>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005bd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bda:	9304      	str	r3, [sp, #16]
 8005bdc:	9307      	str	r3, [sp, #28]
 8005bde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005be2:	931a      	str	r3, [sp, #104]	; 0x68
 8005be4:	46a8      	mov	r8, r5
 8005be6:	2205      	movs	r2, #5
 8005be8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005bec:	485e      	ldr	r0, [pc, #376]	; (8005d68 <_vfiprintf_r+0x210>)
 8005bee:	f7fa faef 	bl	80001d0 <memchr>
 8005bf2:	9b04      	ldr	r3, [sp, #16]
 8005bf4:	bb78      	cbnz	r0, 8005c56 <_vfiprintf_r+0xfe>
 8005bf6:	06d9      	lsls	r1, r3, #27
 8005bf8:	bf44      	itt	mi
 8005bfa:	2220      	movmi	r2, #32
 8005bfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c00:	071a      	lsls	r2, r3, #28
 8005c02:	bf44      	itt	mi
 8005c04:	222b      	movmi	r2, #43	; 0x2b
 8005c06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005c0a:	782a      	ldrb	r2, [r5, #0]
 8005c0c:	2a2a      	cmp	r2, #42	; 0x2a
 8005c0e:	d02a      	beq.n	8005c66 <_vfiprintf_r+0x10e>
 8005c10:	9a07      	ldr	r2, [sp, #28]
 8005c12:	46a8      	mov	r8, r5
 8005c14:	2000      	movs	r0, #0
 8005c16:	250a      	movs	r5, #10
 8005c18:	4641      	mov	r1, r8
 8005c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c1e:	3b30      	subs	r3, #48	; 0x30
 8005c20:	2b09      	cmp	r3, #9
 8005c22:	d969      	bls.n	8005cf8 <_vfiprintf_r+0x1a0>
 8005c24:	b360      	cbz	r0, 8005c80 <_vfiprintf_r+0x128>
 8005c26:	e024      	b.n	8005c72 <_vfiprintf_r+0x11a>
 8005c28:	4b50      	ldr	r3, [pc, #320]	; (8005d6c <_vfiprintf_r+0x214>)
 8005c2a:	429c      	cmp	r4, r3
 8005c2c:	d101      	bne.n	8005c32 <_vfiprintf_r+0xda>
 8005c2e:	68b4      	ldr	r4, [r6, #8]
 8005c30:	e7a2      	b.n	8005b78 <_vfiprintf_r+0x20>
 8005c32:	4b4f      	ldr	r3, [pc, #316]	; (8005d70 <_vfiprintf_r+0x218>)
 8005c34:	429c      	cmp	r4, r3
 8005c36:	bf08      	it	eq
 8005c38:	68f4      	ldreq	r4, [r6, #12]
 8005c3a:	e79d      	b.n	8005b78 <_vfiprintf_r+0x20>
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f000 fb0c 	bl	800625c <__swsetup_r>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d09d      	beq.n	8005b84 <_vfiprintf_r+0x2c>
 8005c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c4c:	b01d      	add	sp, #116	; 0x74
 8005c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c52:	46a8      	mov	r8, r5
 8005c54:	e7a2      	b.n	8005b9c <_vfiprintf_r+0x44>
 8005c56:	4a44      	ldr	r2, [pc, #272]	; (8005d68 <_vfiprintf_r+0x210>)
 8005c58:	1a80      	subs	r0, r0, r2
 8005c5a:	fa0b f000 	lsl.w	r0, fp, r0
 8005c5e:	4318      	orrs	r0, r3
 8005c60:	9004      	str	r0, [sp, #16]
 8005c62:	4645      	mov	r5, r8
 8005c64:	e7be      	b.n	8005be4 <_vfiprintf_r+0x8c>
 8005c66:	9a03      	ldr	r2, [sp, #12]
 8005c68:	1d11      	adds	r1, r2, #4
 8005c6a:	6812      	ldr	r2, [r2, #0]
 8005c6c:	9103      	str	r1, [sp, #12]
 8005c6e:	2a00      	cmp	r2, #0
 8005c70:	db01      	blt.n	8005c76 <_vfiprintf_r+0x11e>
 8005c72:	9207      	str	r2, [sp, #28]
 8005c74:	e004      	b.n	8005c80 <_vfiprintf_r+0x128>
 8005c76:	4252      	negs	r2, r2
 8005c78:	f043 0302 	orr.w	r3, r3, #2
 8005c7c:	9207      	str	r2, [sp, #28]
 8005c7e:	9304      	str	r3, [sp, #16]
 8005c80:	f898 3000 	ldrb.w	r3, [r8]
 8005c84:	2b2e      	cmp	r3, #46	; 0x2e
 8005c86:	d10e      	bne.n	8005ca6 <_vfiprintf_r+0x14e>
 8005c88:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c8e:	d138      	bne.n	8005d02 <_vfiprintf_r+0x1aa>
 8005c90:	9b03      	ldr	r3, [sp, #12]
 8005c92:	1d1a      	adds	r2, r3, #4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	9203      	str	r2, [sp, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bfb8      	it	lt
 8005c9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ca0:	f108 0802 	add.w	r8, r8, #2
 8005ca4:	9305      	str	r3, [sp, #20]
 8005ca6:	4d33      	ldr	r5, [pc, #204]	; (8005d74 <_vfiprintf_r+0x21c>)
 8005ca8:	f898 1000 	ldrb.w	r1, [r8]
 8005cac:	2203      	movs	r2, #3
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f7fa fa8e 	bl	80001d0 <memchr>
 8005cb4:	b140      	cbz	r0, 8005cc8 <_vfiprintf_r+0x170>
 8005cb6:	2340      	movs	r3, #64	; 0x40
 8005cb8:	1b40      	subs	r0, r0, r5
 8005cba:	fa03 f000 	lsl.w	r0, r3, r0
 8005cbe:	9b04      	ldr	r3, [sp, #16]
 8005cc0:	4303      	orrs	r3, r0
 8005cc2:	f108 0801 	add.w	r8, r8, #1
 8005cc6:	9304      	str	r3, [sp, #16]
 8005cc8:	f898 1000 	ldrb.w	r1, [r8]
 8005ccc:	482a      	ldr	r0, [pc, #168]	; (8005d78 <_vfiprintf_r+0x220>)
 8005cce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cd2:	2206      	movs	r2, #6
 8005cd4:	f108 0701 	add.w	r7, r8, #1
 8005cd8:	f7fa fa7a 	bl	80001d0 <memchr>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d037      	beq.n	8005d50 <_vfiprintf_r+0x1f8>
 8005ce0:	4b26      	ldr	r3, [pc, #152]	; (8005d7c <_vfiprintf_r+0x224>)
 8005ce2:	bb1b      	cbnz	r3, 8005d2c <_vfiprintf_r+0x1d4>
 8005ce4:	9b03      	ldr	r3, [sp, #12]
 8005ce6:	3307      	adds	r3, #7
 8005ce8:	f023 0307 	bic.w	r3, r3, #7
 8005cec:	3308      	adds	r3, #8
 8005cee:	9303      	str	r3, [sp, #12]
 8005cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf2:	444b      	add	r3, r9
 8005cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8005cf6:	e750      	b.n	8005b9a <_vfiprintf_r+0x42>
 8005cf8:	fb05 3202 	mla	r2, r5, r2, r3
 8005cfc:	2001      	movs	r0, #1
 8005cfe:	4688      	mov	r8, r1
 8005d00:	e78a      	b.n	8005c18 <_vfiprintf_r+0xc0>
 8005d02:	2300      	movs	r3, #0
 8005d04:	f108 0801 	add.w	r8, r8, #1
 8005d08:	9305      	str	r3, [sp, #20]
 8005d0a:	4619      	mov	r1, r3
 8005d0c:	250a      	movs	r5, #10
 8005d0e:	4640      	mov	r0, r8
 8005d10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d14:	3a30      	subs	r2, #48	; 0x30
 8005d16:	2a09      	cmp	r2, #9
 8005d18:	d903      	bls.n	8005d22 <_vfiprintf_r+0x1ca>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0c3      	beq.n	8005ca6 <_vfiprintf_r+0x14e>
 8005d1e:	9105      	str	r1, [sp, #20]
 8005d20:	e7c1      	b.n	8005ca6 <_vfiprintf_r+0x14e>
 8005d22:	fb05 2101 	mla	r1, r5, r1, r2
 8005d26:	2301      	movs	r3, #1
 8005d28:	4680      	mov	r8, r0
 8005d2a:	e7f0      	b.n	8005d0e <_vfiprintf_r+0x1b6>
 8005d2c:	ab03      	add	r3, sp, #12
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	4622      	mov	r2, r4
 8005d32:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <_vfiprintf_r+0x228>)
 8005d34:	a904      	add	r1, sp, #16
 8005d36:	4630      	mov	r0, r6
 8005d38:	f3af 8000 	nop.w
 8005d3c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005d40:	4681      	mov	r9, r0
 8005d42:	d1d5      	bne.n	8005cf0 <_vfiprintf_r+0x198>
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	065b      	lsls	r3, r3, #25
 8005d48:	f53f af7e 	bmi.w	8005c48 <_vfiprintf_r+0xf0>
 8005d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d4e:	e77d      	b.n	8005c4c <_vfiprintf_r+0xf4>
 8005d50:	ab03      	add	r3, sp, #12
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	4622      	mov	r2, r4
 8005d56:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <_vfiprintf_r+0x228>)
 8005d58:	a904      	add	r1, sp, #16
 8005d5a:	4630      	mov	r0, r6
 8005d5c:	f000 f888 	bl	8005e70 <_printf_i>
 8005d60:	e7ec      	b.n	8005d3c <_vfiprintf_r+0x1e4>
 8005d62:	bf00      	nop
 8005d64:	08007650 	.word	0x08007650
 8005d68:	080075fc 	.word	0x080075fc
 8005d6c:	08007670 	.word	0x08007670
 8005d70:	08007630 	.word	0x08007630
 8005d74:	08007602 	.word	0x08007602
 8005d78:	08007606 	.word	0x08007606
 8005d7c:	00000000 	.word	0x00000000
 8005d80:	08005b33 	.word	0x08005b33

08005d84 <_printf_common>:
 8005d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d88:	4691      	mov	r9, r2
 8005d8a:	461f      	mov	r7, r3
 8005d8c:	688a      	ldr	r2, [r1, #8]
 8005d8e:	690b      	ldr	r3, [r1, #16]
 8005d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d94:	4293      	cmp	r3, r2
 8005d96:	bfb8      	it	lt
 8005d98:	4613      	movlt	r3, r2
 8005d9a:	f8c9 3000 	str.w	r3, [r9]
 8005d9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005da2:	4606      	mov	r6, r0
 8005da4:	460c      	mov	r4, r1
 8005da6:	b112      	cbz	r2, 8005dae <_printf_common+0x2a>
 8005da8:	3301      	adds	r3, #1
 8005daa:	f8c9 3000 	str.w	r3, [r9]
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	0699      	lsls	r1, r3, #26
 8005db2:	bf42      	ittt	mi
 8005db4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005db8:	3302      	addmi	r3, #2
 8005dba:	f8c9 3000 	strmi.w	r3, [r9]
 8005dbe:	6825      	ldr	r5, [r4, #0]
 8005dc0:	f015 0506 	ands.w	r5, r5, #6
 8005dc4:	d107      	bne.n	8005dd6 <_printf_common+0x52>
 8005dc6:	f104 0a19 	add.w	sl, r4, #25
 8005dca:	68e3      	ldr	r3, [r4, #12]
 8005dcc:	f8d9 2000 	ldr.w	r2, [r9]
 8005dd0:	1a9b      	subs	r3, r3, r2
 8005dd2:	42ab      	cmp	r3, r5
 8005dd4:	dc28      	bgt.n	8005e28 <_printf_common+0xa4>
 8005dd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005dda:	6822      	ldr	r2, [r4, #0]
 8005ddc:	3300      	adds	r3, #0
 8005dde:	bf18      	it	ne
 8005de0:	2301      	movne	r3, #1
 8005de2:	0692      	lsls	r2, r2, #26
 8005de4:	d42d      	bmi.n	8005e42 <_printf_common+0xbe>
 8005de6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dea:	4639      	mov	r1, r7
 8005dec:	4630      	mov	r0, r6
 8005dee:	47c0      	blx	r8
 8005df0:	3001      	adds	r0, #1
 8005df2:	d020      	beq.n	8005e36 <_printf_common+0xb2>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	68e5      	ldr	r5, [r4, #12]
 8005df8:	f8d9 2000 	ldr.w	r2, [r9]
 8005dfc:	f003 0306 	and.w	r3, r3, #6
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	bf08      	it	eq
 8005e04:	1aad      	subeq	r5, r5, r2
 8005e06:	68a3      	ldr	r3, [r4, #8]
 8005e08:	6922      	ldr	r2, [r4, #16]
 8005e0a:	bf0c      	ite	eq
 8005e0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e10:	2500      	movne	r5, #0
 8005e12:	4293      	cmp	r3, r2
 8005e14:	bfc4      	itt	gt
 8005e16:	1a9b      	subgt	r3, r3, r2
 8005e18:	18ed      	addgt	r5, r5, r3
 8005e1a:	f04f 0900 	mov.w	r9, #0
 8005e1e:	341a      	adds	r4, #26
 8005e20:	454d      	cmp	r5, r9
 8005e22:	d11a      	bne.n	8005e5a <_printf_common+0xd6>
 8005e24:	2000      	movs	r0, #0
 8005e26:	e008      	b.n	8005e3a <_printf_common+0xb6>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	4652      	mov	r2, sl
 8005e2c:	4639      	mov	r1, r7
 8005e2e:	4630      	mov	r0, r6
 8005e30:	47c0      	blx	r8
 8005e32:	3001      	adds	r0, #1
 8005e34:	d103      	bne.n	8005e3e <_printf_common+0xba>
 8005e36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3e:	3501      	adds	r5, #1
 8005e40:	e7c3      	b.n	8005dca <_printf_common+0x46>
 8005e42:	18e1      	adds	r1, r4, r3
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	2030      	movs	r0, #48	; 0x30
 8005e48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e4c:	4422      	add	r2, r4
 8005e4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e56:	3302      	adds	r3, #2
 8005e58:	e7c5      	b.n	8005de6 <_printf_common+0x62>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	4622      	mov	r2, r4
 8005e5e:	4639      	mov	r1, r7
 8005e60:	4630      	mov	r0, r6
 8005e62:	47c0      	blx	r8
 8005e64:	3001      	adds	r0, #1
 8005e66:	d0e6      	beq.n	8005e36 <_printf_common+0xb2>
 8005e68:	f109 0901 	add.w	r9, r9, #1
 8005e6c:	e7d8      	b.n	8005e20 <_printf_common+0x9c>
	...

08005e70 <_printf_i>:
 8005e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005e78:	460c      	mov	r4, r1
 8005e7a:	7e09      	ldrb	r1, [r1, #24]
 8005e7c:	b085      	sub	sp, #20
 8005e7e:	296e      	cmp	r1, #110	; 0x6e
 8005e80:	4617      	mov	r7, r2
 8005e82:	4606      	mov	r6, r0
 8005e84:	4698      	mov	r8, r3
 8005e86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e88:	f000 80b3 	beq.w	8005ff2 <_printf_i+0x182>
 8005e8c:	d822      	bhi.n	8005ed4 <_printf_i+0x64>
 8005e8e:	2963      	cmp	r1, #99	; 0x63
 8005e90:	d036      	beq.n	8005f00 <_printf_i+0x90>
 8005e92:	d80a      	bhi.n	8005eaa <_printf_i+0x3a>
 8005e94:	2900      	cmp	r1, #0
 8005e96:	f000 80b9 	beq.w	800600c <_printf_i+0x19c>
 8005e9a:	2958      	cmp	r1, #88	; 0x58
 8005e9c:	f000 8083 	beq.w	8005fa6 <_printf_i+0x136>
 8005ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ea4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ea8:	e032      	b.n	8005f10 <_printf_i+0xa0>
 8005eaa:	2964      	cmp	r1, #100	; 0x64
 8005eac:	d001      	beq.n	8005eb2 <_printf_i+0x42>
 8005eae:	2969      	cmp	r1, #105	; 0x69
 8005eb0:	d1f6      	bne.n	8005ea0 <_printf_i+0x30>
 8005eb2:	6820      	ldr	r0, [r4, #0]
 8005eb4:	6813      	ldr	r3, [r2, #0]
 8005eb6:	0605      	lsls	r5, r0, #24
 8005eb8:	f103 0104 	add.w	r1, r3, #4
 8005ebc:	d52a      	bpl.n	8005f14 <_printf_i+0xa4>
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6011      	str	r1, [r2, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	da03      	bge.n	8005ece <_printf_i+0x5e>
 8005ec6:	222d      	movs	r2, #45	; 0x2d
 8005ec8:	425b      	negs	r3, r3
 8005eca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ece:	486f      	ldr	r0, [pc, #444]	; (800608c <_printf_i+0x21c>)
 8005ed0:	220a      	movs	r2, #10
 8005ed2:	e039      	b.n	8005f48 <_printf_i+0xd8>
 8005ed4:	2973      	cmp	r1, #115	; 0x73
 8005ed6:	f000 809d 	beq.w	8006014 <_printf_i+0x1a4>
 8005eda:	d808      	bhi.n	8005eee <_printf_i+0x7e>
 8005edc:	296f      	cmp	r1, #111	; 0x6f
 8005ede:	d020      	beq.n	8005f22 <_printf_i+0xb2>
 8005ee0:	2970      	cmp	r1, #112	; 0x70
 8005ee2:	d1dd      	bne.n	8005ea0 <_printf_i+0x30>
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	f043 0320 	orr.w	r3, r3, #32
 8005eea:	6023      	str	r3, [r4, #0]
 8005eec:	e003      	b.n	8005ef6 <_printf_i+0x86>
 8005eee:	2975      	cmp	r1, #117	; 0x75
 8005ef0:	d017      	beq.n	8005f22 <_printf_i+0xb2>
 8005ef2:	2978      	cmp	r1, #120	; 0x78
 8005ef4:	d1d4      	bne.n	8005ea0 <_printf_i+0x30>
 8005ef6:	2378      	movs	r3, #120	; 0x78
 8005ef8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005efc:	4864      	ldr	r0, [pc, #400]	; (8006090 <_printf_i+0x220>)
 8005efe:	e055      	b.n	8005fac <_printf_i+0x13c>
 8005f00:	6813      	ldr	r3, [r2, #0]
 8005f02:	1d19      	adds	r1, r3, #4
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6011      	str	r1, [r2, #0]
 8005f08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f10:	2301      	movs	r3, #1
 8005f12:	e08c      	b.n	800602e <_printf_i+0x1be>
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6011      	str	r1, [r2, #0]
 8005f18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f1c:	bf18      	it	ne
 8005f1e:	b21b      	sxthne	r3, r3
 8005f20:	e7cf      	b.n	8005ec2 <_printf_i+0x52>
 8005f22:	6813      	ldr	r3, [r2, #0]
 8005f24:	6825      	ldr	r5, [r4, #0]
 8005f26:	1d18      	adds	r0, r3, #4
 8005f28:	6010      	str	r0, [r2, #0]
 8005f2a:	0628      	lsls	r0, r5, #24
 8005f2c:	d501      	bpl.n	8005f32 <_printf_i+0xc2>
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	e002      	b.n	8005f38 <_printf_i+0xc8>
 8005f32:	0668      	lsls	r0, r5, #25
 8005f34:	d5fb      	bpl.n	8005f2e <_printf_i+0xbe>
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	4854      	ldr	r0, [pc, #336]	; (800608c <_printf_i+0x21c>)
 8005f3a:	296f      	cmp	r1, #111	; 0x6f
 8005f3c:	bf14      	ite	ne
 8005f3e:	220a      	movne	r2, #10
 8005f40:	2208      	moveq	r2, #8
 8005f42:	2100      	movs	r1, #0
 8005f44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f48:	6865      	ldr	r5, [r4, #4]
 8005f4a:	60a5      	str	r5, [r4, #8]
 8005f4c:	2d00      	cmp	r5, #0
 8005f4e:	f2c0 8095 	blt.w	800607c <_printf_i+0x20c>
 8005f52:	6821      	ldr	r1, [r4, #0]
 8005f54:	f021 0104 	bic.w	r1, r1, #4
 8005f58:	6021      	str	r1, [r4, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d13d      	bne.n	8005fda <_printf_i+0x16a>
 8005f5e:	2d00      	cmp	r5, #0
 8005f60:	f040 808e 	bne.w	8006080 <_printf_i+0x210>
 8005f64:	4665      	mov	r5, ip
 8005f66:	2a08      	cmp	r2, #8
 8005f68:	d10b      	bne.n	8005f82 <_printf_i+0x112>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	07db      	lsls	r3, r3, #31
 8005f6e:	d508      	bpl.n	8005f82 <_printf_i+0x112>
 8005f70:	6923      	ldr	r3, [r4, #16]
 8005f72:	6862      	ldr	r2, [r4, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	bfde      	ittt	le
 8005f78:	2330      	movle	r3, #48	; 0x30
 8005f7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f7e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005f82:	ebac 0305 	sub.w	r3, ip, r5
 8005f86:	6123      	str	r3, [r4, #16]
 8005f88:	f8cd 8000 	str.w	r8, [sp]
 8005f8c:	463b      	mov	r3, r7
 8005f8e:	aa03      	add	r2, sp, #12
 8005f90:	4621      	mov	r1, r4
 8005f92:	4630      	mov	r0, r6
 8005f94:	f7ff fef6 	bl	8005d84 <_printf_common>
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d14d      	bne.n	8006038 <_printf_i+0x1c8>
 8005f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fa0:	b005      	add	sp, #20
 8005fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fa6:	4839      	ldr	r0, [pc, #228]	; (800608c <_printf_i+0x21c>)
 8005fa8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005fac:	6813      	ldr	r3, [r2, #0]
 8005fae:	6821      	ldr	r1, [r4, #0]
 8005fb0:	1d1d      	adds	r5, r3, #4
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6015      	str	r5, [r2, #0]
 8005fb6:	060a      	lsls	r2, r1, #24
 8005fb8:	d50b      	bpl.n	8005fd2 <_printf_i+0x162>
 8005fba:	07ca      	lsls	r2, r1, #31
 8005fbc:	bf44      	itt	mi
 8005fbe:	f041 0120 	orrmi.w	r1, r1, #32
 8005fc2:	6021      	strmi	r1, [r4, #0]
 8005fc4:	b91b      	cbnz	r3, 8005fce <_printf_i+0x15e>
 8005fc6:	6822      	ldr	r2, [r4, #0]
 8005fc8:	f022 0220 	bic.w	r2, r2, #32
 8005fcc:	6022      	str	r2, [r4, #0]
 8005fce:	2210      	movs	r2, #16
 8005fd0:	e7b7      	b.n	8005f42 <_printf_i+0xd2>
 8005fd2:	064d      	lsls	r5, r1, #25
 8005fd4:	bf48      	it	mi
 8005fd6:	b29b      	uxthmi	r3, r3
 8005fd8:	e7ef      	b.n	8005fba <_printf_i+0x14a>
 8005fda:	4665      	mov	r5, ip
 8005fdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8005fe0:	fb02 3311 	mls	r3, r2, r1, r3
 8005fe4:	5cc3      	ldrb	r3, [r0, r3]
 8005fe6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005fea:	460b      	mov	r3, r1
 8005fec:	2900      	cmp	r1, #0
 8005fee:	d1f5      	bne.n	8005fdc <_printf_i+0x16c>
 8005ff0:	e7b9      	b.n	8005f66 <_printf_i+0xf6>
 8005ff2:	6813      	ldr	r3, [r2, #0]
 8005ff4:	6825      	ldr	r5, [r4, #0]
 8005ff6:	6961      	ldr	r1, [r4, #20]
 8005ff8:	1d18      	adds	r0, r3, #4
 8005ffa:	6010      	str	r0, [r2, #0]
 8005ffc:	0628      	lsls	r0, r5, #24
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	d501      	bpl.n	8006006 <_printf_i+0x196>
 8006002:	6019      	str	r1, [r3, #0]
 8006004:	e002      	b.n	800600c <_printf_i+0x19c>
 8006006:	066a      	lsls	r2, r5, #25
 8006008:	d5fb      	bpl.n	8006002 <_printf_i+0x192>
 800600a:	8019      	strh	r1, [r3, #0]
 800600c:	2300      	movs	r3, #0
 800600e:	6123      	str	r3, [r4, #16]
 8006010:	4665      	mov	r5, ip
 8006012:	e7b9      	b.n	8005f88 <_printf_i+0x118>
 8006014:	6813      	ldr	r3, [r2, #0]
 8006016:	1d19      	adds	r1, r3, #4
 8006018:	6011      	str	r1, [r2, #0]
 800601a:	681d      	ldr	r5, [r3, #0]
 800601c:	6862      	ldr	r2, [r4, #4]
 800601e:	2100      	movs	r1, #0
 8006020:	4628      	mov	r0, r5
 8006022:	f7fa f8d5 	bl	80001d0 <memchr>
 8006026:	b108      	cbz	r0, 800602c <_printf_i+0x1bc>
 8006028:	1b40      	subs	r0, r0, r5
 800602a:	6060      	str	r0, [r4, #4]
 800602c:	6863      	ldr	r3, [r4, #4]
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	2300      	movs	r3, #0
 8006032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006036:	e7a7      	b.n	8005f88 <_printf_i+0x118>
 8006038:	6923      	ldr	r3, [r4, #16]
 800603a:	462a      	mov	r2, r5
 800603c:	4639      	mov	r1, r7
 800603e:	4630      	mov	r0, r6
 8006040:	47c0      	blx	r8
 8006042:	3001      	adds	r0, #1
 8006044:	d0aa      	beq.n	8005f9c <_printf_i+0x12c>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	079b      	lsls	r3, r3, #30
 800604a:	d413      	bmi.n	8006074 <_printf_i+0x204>
 800604c:	68e0      	ldr	r0, [r4, #12]
 800604e:	9b03      	ldr	r3, [sp, #12]
 8006050:	4298      	cmp	r0, r3
 8006052:	bfb8      	it	lt
 8006054:	4618      	movlt	r0, r3
 8006056:	e7a3      	b.n	8005fa0 <_printf_i+0x130>
 8006058:	2301      	movs	r3, #1
 800605a:	464a      	mov	r2, r9
 800605c:	4639      	mov	r1, r7
 800605e:	4630      	mov	r0, r6
 8006060:	47c0      	blx	r8
 8006062:	3001      	adds	r0, #1
 8006064:	d09a      	beq.n	8005f9c <_printf_i+0x12c>
 8006066:	3501      	adds	r5, #1
 8006068:	68e3      	ldr	r3, [r4, #12]
 800606a:	9a03      	ldr	r2, [sp, #12]
 800606c:	1a9b      	subs	r3, r3, r2
 800606e:	42ab      	cmp	r3, r5
 8006070:	dcf2      	bgt.n	8006058 <_printf_i+0x1e8>
 8006072:	e7eb      	b.n	800604c <_printf_i+0x1dc>
 8006074:	2500      	movs	r5, #0
 8006076:	f104 0919 	add.w	r9, r4, #25
 800607a:	e7f5      	b.n	8006068 <_printf_i+0x1f8>
 800607c:	2b00      	cmp	r3, #0
 800607e:	d1ac      	bne.n	8005fda <_printf_i+0x16a>
 8006080:	7803      	ldrb	r3, [r0, #0]
 8006082:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006086:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800608a:	e76c      	b.n	8005f66 <_printf_i+0xf6>
 800608c:	0800760d 	.word	0x0800760d
 8006090:	0800761e 	.word	0x0800761e

08006094 <_strtol_l.isra.0>:
 8006094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006098:	4680      	mov	r8, r0
 800609a:	4689      	mov	r9, r1
 800609c:	4692      	mov	sl, r2
 800609e:	461e      	mov	r6, r3
 80060a0:	460f      	mov	r7, r1
 80060a2:	463d      	mov	r5, r7
 80060a4:	9808      	ldr	r0, [sp, #32]
 80060a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060aa:	f000 fac7 	bl	800663c <__locale_ctype_ptr_l>
 80060ae:	4420      	add	r0, r4
 80060b0:	7843      	ldrb	r3, [r0, #1]
 80060b2:	f013 0308 	ands.w	r3, r3, #8
 80060b6:	d132      	bne.n	800611e <_strtol_l.isra.0+0x8a>
 80060b8:	2c2d      	cmp	r4, #45	; 0x2d
 80060ba:	d132      	bne.n	8006122 <_strtol_l.isra.0+0x8e>
 80060bc:	787c      	ldrb	r4, [r7, #1]
 80060be:	1cbd      	adds	r5, r7, #2
 80060c0:	2201      	movs	r2, #1
 80060c2:	2e00      	cmp	r6, #0
 80060c4:	d05d      	beq.n	8006182 <_strtol_l.isra.0+0xee>
 80060c6:	2e10      	cmp	r6, #16
 80060c8:	d109      	bne.n	80060de <_strtol_l.isra.0+0x4a>
 80060ca:	2c30      	cmp	r4, #48	; 0x30
 80060cc:	d107      	bne.n	80060de <_strtol_l.isra.0+0x4a>
 80060ce:	782b      	ldrb	r3, [r5, #0]
 80060d0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80060d4:	2b58      	cmp	r3, #88	; 0x58
 80060d6:	d14f      	bne.n	8006178 <_strtol_l.isra.0+0xe4>
 80060d8:	786c      	ldrb	r4, [r5, #1]
 80060da:	2610      	movs	r6, #16
 80060dc:	3502      	adds	r5, #2
 80060de:	2a00      	cmp	r2, #0
 80060e0:	bf14      	ite	ne
 80060e2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80060e6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80060ea:	2700      	movs	r7, #0
 80060ec:	fbb1 fcf6 	udiv	ip, r1, r6
 80060f0:	4638      	mov	r0, r7
 80060f2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80060f6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80060fa:	2b09      	cmp	r3, #9
 80060fc:	d817      	bhi.n	800612e <_strtol_l.isra.0+0x9a>
 80060fe:	461c      	mov	r4, r3
 8006100:	42a6      	cmp	r6, r4
 8006102:	dd23      	ble.n	800614c <_strtol_l.isra.0+0xb8>
 8006104:	1c7b      	adds	r3, r7, #1
 8006106:	d007      	beq.n	8006118 <_strtol_l.isra.0+0x84>
 8006108:	4584      	cmp	ip, r0
 800610a:	d31c      	bcc.n	8006146 <_strtol_l.isra.0+0xb2>
 800610c:	d101      	bne.n	8006112 <_strtol_l.isra.0+0x7e>
 800610e:	45a6      	cmp	lr, r4
 8006110:	db19      	blt.n	8006146 <_strtol_l.isra.0+0xb2>
 8006112:	fb00 4006 	mla	r0, r0, r6, r4
 8006116:	2701      	movs	r7, #1
 8006118:	f815 4b01 	ldrb.w	r4, [r5], #1
 800611c:	e7eb      	b.n	80060f6 <_strtol_l.isra.0+0x62>
 800611e:	462f      	mov	r7, r5
 8006120:	e7bf      	b.n	80060a2 <_strtol_l.isra.0+0xe>
 8006122:	2c2b      	cmp	r4, #43	; 0x2b
 8006124:	bf04      	itt	eq
 8006126:	1cbd      	addeq	r5, r7, #2
 8006128:	787c      	ldrbeq	r4, [r7, #1]
 800612a:	461a      	mov	r2, r3
 800612c:	e7c9      	b.n	80060c2 <_strtol_l.isra.0+0x2e>
 800612e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006132:	2b19      	cmp	r3, #25
 8006134:	d801      	bhi.n	800613a <_strtol_l.isra.0+0xa6>
 8006136:	3c37      	subs	r4, #55	; 0x37
 8006138:	e7e2      	b.n	8006100 <_strtol_l.isra.0+0x6c>
 800613a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800613e:	2b19      	cmp	r3, #25
 8006140:	d804      	bhi.n	800614c <_strtol_l.isra.0+0xb8>
 8006142:	3c57      	subs	r4, #87	; 0x57
 8006144:	e7dc      	b.n	8006100 <_strtol_l.isra.0+0x6c>
 8006146:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800614a:	e7e5      	b.n	8006118 <_strtol_l.isra.0+0x84>
 800614c:	1c7b      	adds	r3, r7, #1
 800614e:	d108      	bne.n	8006162 <_strtol_l.isra.0+0xce>
 8006150:	2322      	movs	r3, #34	; 0x22
 8006152:	f8c8 3000 	str.w	r3, [r8]
 8006156:	4608      	mov	r0, r1
 8006158:	f1ba 0f00 	cmp.w	sl, #0
 800615c:	d107      	bne.n	800616e <_strtol_l.isra.0+0xda>
 800615e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006162:	b102      	cbz	r2, 8006166 <_strtol_l.isra.0+0xd2>
 8006164:	4240      	negs	r0, r0
 8006166:	f1ba 0f00 	cmp.w	sl, #0
 800616a:	d0f8      	beq.n	800615e <_strtol_l.isra.0+0xca>
 800616c:	b10f      	cbz	r7, 8006172 <_strtol_l.isra.0+0xde>
 800616e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006172:	f8ca 9000 	str.w	r9, [sl]
 8006176:	e7f2      	b.n	800615e <_strtol_l.isra.0+0xca>
 8006178:	2430      	movs	r4, #48	; 0x30
 800617a:	2e00      	cmp	r6, #0
 800617c:	d1af      	bne.n	80060de <_strtol_l.isra.0+0x4a>
 800617e:	2608      	movs	r6, #8
 8006180:	e7ad      	b.n	80060de <_strtol_l.isra.0+0x4a>
 8006182:	2c30      	cmp	r4, #48	; 0x30
 8006184:	d0a3      	beq.n	80060ce <_strtol_l.isra.0+0x3a>
 8006186:	260a      	movs	r6, #10
 8006188:	e7a9      	b.n	80060de <_strtol_l.isra.0+0x4a>
	...

0800618c <strtol>:
 800618c:	4b08      	ldr	r3, [pc, #32]	; (80061b0 <strtol+0x24>)
 800618e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006190:	681c      	ldr	r4, [r3, #0]
 8006192:	4d08      	ldr	r5, [pc, #32]	; (80061b4 <strtol+0x28>)
 8006194:	6a23      	ldr	r3, [r4, #32]
 8006196:	2b00      	cmp	r3, #0
 8006198:	bf08      	it	eq
 800619a:	462b      	moveq	r3, r5
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	4613      	mov	r3, r2
 80061a0:	460a      	mov	r2, r1
 80061a2:	4601      	mov	r1, r0
 80061a4:	4620      	mov	r0, r4
 80061a6:	f7ff ff75 	bl	8006094 <_strtol_l.isra.0>
 80061aa:	b003      	add	sp, #12
 80061ac:	bd30      	pop	{r4, r5, pc}
 80061ae:	bf00      	nop
 80061b0:	2000000c 	.word	0x2000000c
 80061b4:	20000070 	.word	0x20000070

080061b8 <__swbuf_r>:
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ba:	460e      	mov	r6, r1
 80061bc:	4614      	mov	r4, r2
 80061be:	4605      	mov	r5, r0
 80061c0:	b118      	cbz	r0, 80061ca <__swbuf_r+0x12>
 80061c2:	6983      	ldr	r3, [r0, #24]
 80061c4:	b90b      	cbnz	r3, 80061ca <__swbuf_r+0x12>
 80061c6:	f000 f9af 	bl	8006528 <__sinit>
 80061ca:	4b21      	ldr	r3, [pc, #132]	; (8006250 <__swbuf_r+0x98>)
 80061cc:	429c      	cmp	r4, r3
 80061ce:	d12a      	bne.n	8006226 <__swbuf_r+0x6e>
 80061d0:	686c      	ldr	r4, [r5, #4]
 80061d2:	69a3      	ldr	r3, [r4, #24]
 80061d4:	60a3      	str	r3, [r4, #8]
 80061d6:	89a3      	ldrh	r3, [r4, #12]
 80061d8:	071a      	lsls	r2, r3, #28
 80061da:	d52e      	bpl.n	800623a <__swbuf_r+0x82>
 80061dc:	6923      	ldr	r3, [r4, #16]
 80061de:	b363      	cbz	r3, 800623a <__swbuf_r+0x82>
 80061e0:	6923      	ldr	r3, [r4, #16]
 80061e2:	6820      	ldr	r0, [r4, #0]
 80061e4:	1ac0      	subs	r0, r0, r3
 80061e6:	6963      	ldr	r3, [r4, #20]
 80061e8:	b2f6      	uxtb	r6, r6
 80061ea:	4283      	cmp	r3, r0
 80061ec:	4637      	mov	r7, r6
 80061ee:	dc04      	bgt.n	80061fa <__swbuf_r+0x42>
 80061f0:	4621      	mov	r1, r4
 80061f2:	4628      	mov	r0, r5
 80061f4:	f000 f92e 	bl	8006454 <_fflush_r>
 80061f8:	bb28      	cbnz	r0, 8006246 <__swbuf_r+0x8e>
 80061fa:	68a3      	ldr	r3, [r4, #8]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	60a3      	str	r3, [r4, #8]
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	6022      	str	r2, [r4, #0]
 8006206:	701e      	strb	r6, [r3, #0]
 8006208:	6963      	ldr	r3, [r4, #20]
 800620a:	3001      	adds	r0, #1
 800620c:	4283      	cmp	r3, r0
 800620e:	d004      	beq.n	800621a <__swbuf_r+0x62>
 8006210:	89a3      	ldrh	r3, [r4, #12]
 8006212:	07db      	lsls	r3, r3, #31
 8006214:	d519      	bpl.n	800624a <__swbuf_r+0x92>
 8006216:	2e0a      	cmp	r6, #10
 8006218:	d117      	bne.n	800624a <__swbuf_r+0x92>
 800621a:	4621      	mov	r1, r4
 800621c:	4628      	mov	r0, r5
 800621e:	f000 f919 	bl	8006454 <_fflush_r>
 8006222:	b190      	cbz	r0, 800624a <__swbuf_r+0x92>
 8006224:	e00f      	b.n	8006246 <__swbuf_r+0x8e>
 8006226:	4b0b      	ldr	r3, [pc, #44]	; (8006254 <__swbuf_r+0x9c>)
 8006228:	429c      	cmp	r4, r3
 800622a:	d101      	bne.n	8006230 <__swbuf_r+0x78>
 800622c:	68ac      	ldr	r4, [r5, #8]
 800622e:	e7d0      	b.n	80061d2 <__swbuf_r+0x1a>
 8006230:	4b09      	ldr	r3, [pc, #36]	; (8006258 <__swbuf_r+0xa0>)
 8006232:	429c      	cmp	r4, r3
 8006234:	bf08      	it	eq
 8006236:	68ec      	ldreq	r4, [r5, #12]
 8006238:	e7cb      	b.n	80061d2 <__swbuf_r+0x1a>
 800623a:	4621      	mov	r1, r4
 800623c:	4628      	mov	r0, r5
 800623e:	f000 f80d 	bl	800625c <__swsetup_r>
 8006242:	2800      	cmp	r0, #0
 8006244:	d0cc      	beq.n	80061e0 <__swbuf_r+0x28>
 8006246:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800624a:	4638      	mov	r0, r7
 800624c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800624e:	bf00      	nop
 8006250:	08007650 	.word	0x08007650
 8006254:	08007670 	.word	0x08007670
 8006258:	08007630 	.word	0x08007630

0800625c <__swsetup_r>:
 800625c:	4b32      	ldr	r3, [pc, #200]	; (8006328 <__swsetup_r+0xcc>)
 800625e:	b570      	push	{r4, r5, r6, lr}
 8006260:	681d      	ldr	r5, [r3, #0]
 8006262:	4606      	mov	r6, r0
 8006264:	460c      	mov	r4, r1
 8006266:	b125      	cbz	r5, 8006272 <__swsetup_r+0x16>
 8006268:	69ab      	ldr	r3, [r5, #24]
 800626a:	b913      	cbnz	r3, 8006272 <__swsetup_r+0x16>
 800626c:	4628      	mov	r0, r5
 800626e:	f000 f95b 	bl	8006528 <__sinit>
 8006272:	4b2e      	ldr	r3, [pc, #184]	; (800632c <__swsetup_r+0xd0>)
 8006274:	429c      	cmp	r4, r3
 8006276:	d10f      	bne.n	8006298 <__swsetup_r+0x3c>
 8006278:	686c      	ldr	r4, [r5, #4]
 800627a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800627e:	b29a      	uxth	r2, r3
 8006280:	0715      	lsls	r5, r2, #28
 8006282:	d42c      	bmi.n	80062de <__swsetup_r+0x82>
 8006284:	06d0      	lsls	r0, r2, #27
 8006286:	d411      	bmi.n	80062ac <__swsetup_r+0x50>
 8006288:	2209      	movs	r2, #9
 800628a:	6032      	str	r2, [r6, #0]
 800628c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006290:	81a3      	strh	r3, [r4, #12]
 8006292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006296:	e03e      	b.n	8006316 <__swsetup_r+0xba>
 8006298:	4b25      	ldr	r3, [pc, #148]	; (8006330 <__swsetup_r+0xd4>)
 800629a:	429c      	cmp	r4, r3
 800629c:	d101      	bne.n	80062a2 <__swsetup_r+0x46>
 800629e:	68ac      	ldr	r4, [r5, #8]
 80062a0:	e7eb      	b.n	800627a <__swsetup_r+0x1e>
 80062a2:	4b24      	ldr	r3, [pc, #144]	; (8006334 <__swsetup_r+0xd8>)
 80062a4:	429c      	cmp	r4, r3
 80062a6:	bf08      	it	eq
 80062a8:	68ec      	ldreq	r4, [r5, #12]
 80062aa:	e7e6      	b.n	800627a <__swsetup_r+0x1e>
 80062ac:	0751      	lsls	r1, r2, #29
 80062ae:	d512      	bpl.n	80062d6 <__swsetup_r+0x7a>
 80062b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062b2:	b141      	cbz	r1, 80062c6 <__swsetup_r+0x6a>
 80062b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062b8:	4299      	cmp	r1, r3
 80062ba:	d002      	beq.n	80062c2 <__swsetup_r+0x66>
 80062bc:	4630      	mov	r0, r6
 80062be:	f000 fa37 	bl	8006730 <_free_r>
 80062c2:	2300      	movs	r3, #0
 80062c4:	6363      	str	r3, [r4, #52]	; 0x34
 80062c6:	89a3      	ldrh	r3, [r4, #12]
 80062c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062cc:	81a3      	strh	r3, [r4, #12]
 80062ce:	2300      	movs	r3, #0
 80062d0:	6063      	str	r3, [r4, #4]
 80062d2:	6923      	ldr	r3, [r4, #16]
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	89a3      	ldrh	r3, [r4, #12]
 80062d8:	f043 0308 	orr.w	r3, r3, #8
 80062dc:	81a3      	strh	r3, [r4, #12]
 80062de:	6923      	ldr	r3, [r4, #16]
 80062e0:	b94b      	cbnz	r3, 80062f6 <__swsetup_r+0x9a>
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ec:	d003      	beq.n	80062f6 <__swsetup_r+0x9a>
 80062ee:	4621      	mov	r1, r4
 80062f0:	4630      	mov	r0, r6
 80062f2:	f000 f9cb 	bl	800668c <__smakebuf_r>
 80062f6:	89a2      	ldrh	r2, [r4, #12]
 80062f8:	f012 0301 	ands.w	r3, r2, #1
 80062fc:	d00c      	beq.n	8006318 <__swsetup_r+0xbc>
 80062fe:	2300      	movs	r3, #0
 8006300:	60a3      	str	r3, [r4, #8]
 8006302:	6963      	ldr	r3, [r4, #20]
 8006304:	425b      	negs	r3, r3
 8006306:	61a3      	str	r3, [r4, #24]
 8006308:	6923      	ldr	r3, [r4, #16]
 800630a:	b953      	cbnz	r3, 8006322 <__swsetup_r+0xc6>
 800630c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006310:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006314:	d1ba      	bne.n	800628c <__swsetup_r+0x30>
 8006316:	bd70      	pop	{r4, r5, r6, pc}
 8006318:	0792      	lsls	r2, r2, #30
 800631a:	bf58      	it	pl
 800631c:	6963      	ldrpl	r3, [r4, #20]
 800631e:	60a3      	str	r3, [r4, #8]
 8006320:	e7f2      	b.n	8006308 <__swsetup_r+0xac>
 8006322:	2000      	movs	r0, #0
 8006324:	e7f7      	b.n	8006316 <__swsetup_r+0xba>
 8006326:	bf00      	nop
 8006328:	2000000c 	.word	0x2000000c
 800632c:	08007650 	.word	0x08007650
 8006330:	08007670 	.word	0x08007670
 8006334:	08007630 	.word	0x08007630

08006338 <abort>:
 8006338:	b508      	push	{r3, lr}
 800633a:	2006      	movs	r0, #6
 800633c:	f000 fad8 	bl	80068f0 <raise>
 8006340:	2001      	movs	r0, #1
 8006342:	f7fc f82f 	bl	80023a4 <_exit>
	...

08006348 <__sflush_r>:
 8006348:	898a      	ldrh	r2, [r1, #12]
 800634a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800634e:	4605      	mov	r5, r0
 8006350:	0710      	lsls	r0, r2, #28
 8006352:	460c      	mov	r4, r1
 8006354:	d458      	bmi.n	8006408 <__sflush_r+0xc0>
 8006356:	684b      	ldr	r3, [r1, #4]
 8006358:	2b00      	cmp	r3, #0
 800635a:	dc05      	bgt.n	8006368 <__sflush_r+0x20>
 800635c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	dc02      	bgt.n	8006368 <__sflush_r+0x20>
 8006362:	2000      	movs	r0, #0
 8006364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800636a:	2e00      	cmp	r6, #0
 800636c:	d0f9      	beq.n	8006362 <__sflush_r+0x1a>
 800636e:	2300      	movs	r3, #0
 8006370:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006374:	682f      	ldr	r7, [r5, #0]
 8006376:	6a21      	ldr	r1, [r4, #32]
 8006378:	602b      	str	r3, [r5, #0]
 800637a:	d032      	beq.n	80063e2 <__sflush_r+0x9a>
 800637c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	075a      	lsls	r2, r3, #29
 8006382:	d505      	bpl.n	8006390 <__sflush_r+0x48>
 8006384:	6863      	ldr	r3, [r4, #4]
 8006386:	1ac0      	subs	r0, r0, r3
 8006388:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800638a:	b10b      	cbz	r3, 8006390 <__sflush_r+0x48>
 800638c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800638e:	1ac0      	subs	r0, r0, r3
 8006390:	2300      	movs	r3, #0
 8006392:	4602      	mov	r2, r0
 8006394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006396:	6a21      	ldr	r1, [r4, #32]
 8006398:	4628      	mov	r0, r5
 800639a:	47b0      	blx	r6
 800639c:	1c43      	adds	r3, r0, #1
 800639e:	89a3      	ldrh	r3, [r4, #12]
 80063a0:	d106      	bne.n	80063b0 <__sflush_r+0x68>
 80063a2:	6829      	ldr	r1, [r5, #0]
 80063a4:	291d      	cmp	r1, #29
 80063a6:	d848      	bhi.n	800643a <__sflush_r+0xf2>
 80063a8:	4a29      	ldr	r2, [pc, #164]	; (8006450 <__sflush_r+0x108>)
 80063aa:	40ca      	lsrs	r2, r1
 80063ac:	07d6      	lsls	r6, r2, #31
 80063ae:	d544      	bpl.n	800643a <__sflush_r+0xf2>
 80063b0:	2200      	movs	r2, #0
 80063b2:	6062      	str	r2, [r4, #4]
 80063b4:	04d9      	lsls	r1, r3, #19
 80063b6:	6922      	ldr	r2, [r4, #16]
 80063b8:	6022      	str	r2, [r4, #0]
 80063ba:	d504      	bpl.n	80063c6 <__sflush_r+0x7e>
 80063bc:	1c42      	adds	r2, r0, #1
 80063be:	d101      	bne.n	80063c4 <__sflush_r+0x7c>
 80063c0:	682b      	ldr	r3, [r5, #0]
 80063c2:	b903      	cbnz	r3, 80063c6 <__sflush_r+0x7e>
 80063c4:	6560      	str	r0, [r4, #84]	; 0x54
 80063c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063c8:	602f      	str	r7, [r5, #0]
 80063ca:	2900      	cmp	r1, #0
 80063cc:	d0c9      	beq.n	8006362 <__sflush_r+0x1a>
 80063ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063d2:	4299      	cmp	r1, r3
 80063d4:	d002      	beq.n	80063dc <__sflush_r+0x94>
 80063d6:	4628      	mov	r0, r5
 80063d8:	f000 f9aa 	bl	8006730 <_free_r>
 80063dc:	2000      	movs	r0, #0
 80063de:	6360      	str	r0, [r4, #52]	; 0x34
 80063e0:	e7c0      	b.n	8006364 <__sflush_r+0x1c>
 80063e2:	2301      	movs	r3, #1
 80063e4:	4628      	mov	r0, r5
 80063e6:	47b0      	blx	r6
 80063e8:	1c41      	adds	r1, r0, #1
 80063ea:	d1c8      	bne.n	800637e <__sflush_r+0x36>
 80063ec:	682b      	ldr	r3, [r5, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0c5      	beq.n	800637e <__sflush_r+0x36>
 80063f2:	2b1d      	cmp	r3, #29
 80063f4:	d001      	beq.n	80063fa <__sflush_r+0xb2>
 80063f6:	2b16      	cmp	r3, #22
 80063f8:	d101      	bne.n	80063fe <__sflush_r+0xb6>
 80063fa:	602f      	str	r7, [r5, #0]
 80063fc:	e7b1      	b.n	8006362 <__sflush_r+0x1a>
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006404:	81a3      	strh	r3, [r4, #12]
 8006406:	e7ad      	b.n	8006364 <__sflush_r+0x1c>
 8006408:	690f      	ldr	r7, [r1, #16]
 800640a:	2f00      	cmp	r7, #0
 800640c:	d0a9      	beq.n	8006362 <__sflush_r+0x1a>
 800640e:	0793      	lsls	r3, r2, #30
 8006410:	680e      	ldr	r6, [r1, #0]
 8006412:	bf08      	it	eq
 8006414:	694b      	ldreq	r3, [r1, #20]
 8006416:	600f      	str	r7, [r1, #0]
 8006418:	bf18      	it	ne
 800641a:	2300      	movne	r3, #0
 800641c:	eba6 0807 	sub.w	r8, r6, r7
 8006420:	608b      	str	r3, [r1, #8]
 8006422:	f1b8 0f00 	cmp.w	r8, #0
 8006426:	dd9c      	ble.n	8006362 <__sflush_r+0x1a>
 8006428:	4643      	mov	r3, r8
 800642a:	463a      	mov	r2, r7
 800642c:	6a21      	ldr	r1, [r4, #32]
 800642e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006430:	4628      	mov	r0, r5
 8006432:	47b0      	blx	r6
 8006434:	2800      	cmp	r0, #0
 8006436:	dc06      	bgt.n	8006446 <__sflush_r+0xfe>
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800643e:	81a3      	strh	r3, [r4, #12]
 8006440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006444:	e78e      	b.n	8006364 <__sflush_r+0x1c>
 8006446:	4407      	add	r7, r0
 8006448:	eba8 0800 	sub.w	r8, r8, r0
 800644c:	e7e9      	b.n	8006422 <__sflush_r+0xda>
 800644e:	bf00      	nop
 8006450:	20400001 	.word	0x20400001

08006454 <_fflush_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	690b      	ldr	r3, [r1, #16]
 8006458:	4605      	mov	r5, r0
 800645a:	460c      	mov	r4, r1
 800645c:	b1db      	cbz	r3, 8006496 <_fflush_r+0x42>
 800645e:	b118      	cbz	r0, 8006468 <_fflush_r+0x14>
 8006460:	6983      	ldr	r3, [r0, #24]
 8006462:	b90b      	cbnz	r3, 8006468 <_fflush_r+0x14>
 8006464:	f000 f860 	bl	8006528 <__sinit>
 8006468:	4b0c      	ldr	r3, [pc, #48]	; (800649c <_fflush_r+0x48>)
 800646a:	429c      	cmp	r4, r3
 800646c:	d109      	bne.n	8006482 <_fflush_r+0x2e>
 800646e:	686c      	ldr	r4, [r5, #4]
 8006470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006474:	b17b      	cbz	r3, 8006496 <_fflush_r+0x42>
 8006476:	4621      	mov	r1, r4
 8006478:	4628      	mov	r0, r5
 800647a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800647e:	f7ff bf63 	b.w	8006348 <__sflush_r>
 8006482:	4b07      	ldr	r3, [pc, #28]	; (80064a0 <_fflush_r+0x4c>)
 8006484:	429c      	cmp	r4, r3
 8006486:	d101      	bne.n	800648c <_fflush_r+0x38>
 8006488:	68ac      	ldr	r4, [r5, #8]
 800648a:	e7f1      	b.n	8006470 <_fflush_r+0x1c>
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <_fflush_r+0x50>)
 800648e:	429c      	cmp	r4, r3
 8006490:	bf08      	it	eq
 8006492:	68ec      	ldreq	r4, [r5, #12]
 8006494:	e7ec      	b.n	8006470 <_fflush_r+0x1c>
 8006496:	2000      	movs	r0, #0
 8006498:	bd38      	pop	{r3, r4, r5, pc}
 800649a:	bf00      	nop
 800649c:	08007650 	.word	0x08007650
 80064a0:	08007670 	.word	0x08007670
 80064a4:	08007630 	.word	0x08007630

080064a8 <std>:
 80064a8:	2300      	movs	r3, #0
 80064aa:	b510      	push	{r4, lr}
 80064ac:	4604      	mov	r4, r0
 80064ae:	e9c0 3300 	strd	r3, r3, [r0]
 80064b2:	6083      	str	r3, [r0, #8]
 80064b4:	8181      	strh	r1, [r0, #12]
 80064b6:	6643      	str	r3, [r0, #100]	; 0x64
 80064b8:	81c2      	strh	r2, [r0, #14]
 80064ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064be:	6183      	str	r3, [r0, #24]
 80064c0:	4619      	mov	r1, r3
 80064c2:	2208      	movs	r2, #8
 80064c4:	305c      	adds	r0, #92	; 0x5c
 80064c6:	f7ff fb15 	bl	8005af4 <memset>
 80064ca:	4b05      	ldr	r3, [pc, #20]	; (80064e0 <std+0x38>)
 80064cc:	6263      	str	r3, [r4, #36]	; 0x24
 80064ce:	4b05      	ldr	r3, [pc, #20]	; (80064e4 <std+0x3c>)
 80064d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80064d2:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <std+0x40>)
 80064d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064d6:	4b05      	ldr	r3, [pc, #20]	; (80064ec <std+0x44>)
 80064d8:	6224      	str	r4, [r4, #32]
 80064da:	6323      	str	r3, [r4, #48]	; 0x30
 80064dc:	bd10      	pop	{r4, pc}
 80064de:	bf00      	nop
 80064e0:	08006929 	.word	0x08006929
 80064e4:	0800694b 	.word	0x0800694b
 80064e8:	08006983 	.word	0x08006983
 80064ec:	080069a7 	.word	0x080069a7

080064f0 <_cleanup_r>:
 80064f0:	4901      	ldr	r1, [pc, #4]	; (80064f8 <_cleanup_r+0x8>)
 80064f2:	f000 b885 	b.w	8006600 <_fwalk_reent>
 80064f6:	bf00      	nop
 80064f8:	08006455 	.word	0x08006455

080064fc <__sfmoreglue>:
 80064fc:	b570      	push	{r4, r5, r6, lr}
 80064fe:	1e4a      	subs	r2, r1, #1
 8006500:	2568      	movs	r5, #104	; 0x68
 8006502:	4355      	muls	r5, r2
 8006504:	460e      	mov	r6, r1
 8006506:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800650a:	f000 f95f 	bl	80067cc <_malloc_r>
 800650e:	4604      	mov	r4, r0
 8006510:	b140      	cbz	r0, 8006524 <__sfmoreglue+0x28>
 8006512:	2100      	movs	r1, #0
 8006514:	e9c0 1600 	strd	r1, r6, [r0]
 8006518:	300c      	adds	r0, #12
 800651a:	60a0      	str	r0, [r4, #8]
 800651c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006520:	f7ff fae8 	bl	8005af4 <memset>
 8006524:	4620      	mov	r0, r4
 8006526:	bd70      	pop	{r4, r5, r6, pc}

08006528 <__sinit>:
 8006528:	6983      	ldr	r3, [r0, #24]
 800652a:	b510      	push	{r4, lr}
 800652c:	4604      	mov	r4, r0
 800652e:	bb33      	cbnz	r3, 800657e <__sinit+0x56>
 8006530:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006534:	6503      	str	r3, [r0, #80]	; 0x50
 8006536:	4b12      	ldr	r3, [pc, #72]	; (8006580 <__sinit+0x58>)
 8006538:	4a12      	ldr	r2, [pc, #72]	; (8006584 <__sinit+0x5c>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6282      	str	r2, [r0, #40]	; 0x28
 800653e:	4298      	cmp	r0, r3
 8006540:	bf04      	itt	eq
 8006542:	2301      	moveq	r3, #1
 8006544:	6183      	streq	r3, [r0, #24]
 8006546:	f000 f81f 	bl	8006588 <__sfp>
 800654a:	6060      	str	r0, [r4, #4]
 800654c:	4620      	mov	r0, r4
 800654e:	f000 f81b 	bl	8006588 <__sfp>
 8006552:	60a0      	str	r0, [r4, #8]
 8006554:	4620      	mov	r0, r4
 8006556:	f000 f817 	bl	8006588 <__sfp>
 800655a:	2200      	movs	r2, #0
 800655c:	60e0      	str	r0, [r4, #12]
 800655e:	2104      	movs	r1, #4
 8006560:	6860      	ldr	r0, [r4, #4]
 8006562:	f7ff ffa1 	bl	80064a8 <std>
 8006566:	2201      	movs	r2, #1
 8006568:	2109      	movs	r1, #9
 800656a:	68a0      	ldr	r0, [r4, #8]
 800656c:	f7ff ff9c 	bl	80064a8 <std>
 8006570:	2202      	movs	r2, #2
 8006572:	2112      	movs	r1, #18
 8006574:	68e0      	ldr	r0, [r4, #12]
 8006576:	f7ff ff97 	bl	80064a8 <std>
 800657a:	2301      	movs	r3, #1
 800657c:	61a3      	str	r3, [r4, #24]
 800657e:	bd10      	pop	{r4, pc}
 8006580:	080075f8 	.word	0x080075f8
 8006584:	080064f1 	.word	0x080064f1

08006588 <__sfp>:
 8006588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800658a:	4b1b      	ldr	r3, [pc, #108]	; (80065f8 <__sfp+0x70>)
 800658c:	681e      	ldr	r6, [r3, #0]
 800658e:	69b3      	ldr	r3, [r6, #24]
 8006590:	4607      	mov	r7, r0
 8006592:	b913      	cbnz	r3, 800659a <__sfp+0x12>
 8006594:	4630      	mov	r0, r6
 8006596:	f7ff ffc7 	bl	8006528 <__sinit>
 800659a:	3648      	adds	r6, #72	; 0x48
 800659c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	d503      	bpl.n	80065ac <__sfp+0x24>
 80065a4:	6833      	ldr	r3, [r6, #0]
 80065a6:	b133      	cbz	r3, 80065b6 <__sfp+0x2e>
 80065a8:	6836      	ldr	r6, [r6, #0]
 80065aa:	e7f7      	b.n	800659c <__sfp+0x14>
 80065ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80065b0:	b16d      	cbz	r5, 80065ce <__sfp+0x46>
 80065b2:	3468      	adds	r4, #104	; 0x68
 80065b4:	e7f4      	b.n	80065a0 <__sfp+0x18>
 80065b6:	2104      	movs	r1, #4
 80065b8:	4638      	mov	r0, r7
 80065ba:	f7ff ff9f 	bl	80064fc <__sfmoreglue>
 80065be:	6030      	str	r0, [r6, #0]
 80065c0:	2800      	cmp	r0, #0
 80065c2:	d1f1      	bne.n	80065a8 <__sfp+0x20>
 80065c4:	230c      	movs	r3, #12
 80065c6:	603b      	str	r3, [r7, #0]
 80065c8:	4604      	mov	r4, r0
 80065ca:	4620      	mov	r0, r4
 80065cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065ce:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <__sfp+0x74>)
 80065d0:	6665      	str	r5, [r4, #100]	; 0x64
 80065d2:	e9c4 5500 	strd	r5, r5, [r4]
 80065d6:	60a5      	str	r5, [r4, #8]
 80065d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80065dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80065e0:	2208      	movs	r2, #8
 80065e2:	4629      	mov	r1, r5
 80065e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80065e8:	f7ff fa84 	bl	8005af4 <memset>
 80065ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80065f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80065f4:	e7e9      	b.n	80065ca <__sfp+0x42>
 80065f6:	bf00      	nop
 80065f8:	080075f8 	.word	0x080075f8
 80065fc:	ffff0001 	.word	0xffff0001

08006600 <_fwalk_reent>:
 8006600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006604:	4680      	mov	r8, r0
 8006606:	4689      	mov	r9, r1
 8006608:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800660c:	2600      	movs	r6, #0
 800660e:	b914      	cbnz	r4, 8006616 <_fwalk_reent+0x16>
 8006610:	4630      	mov	r0, r6
 8006612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006616:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800661a:	3f01      	subs	r7, #1
 800661c:	d501      	bpl.n	8006622 <_fwalk_reent+0x22>
 800661e:	6824      	ldr	r4, [r4, #0]
 8006620:	e7f5      	b.n	800660e <_fwalk_reent+0xe>
 8006622:	89ab      	ldrh	r3, [r5, #12]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d907      	bls.n	8006638 <_fwalk_reent+0x38>
 8006628:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800662c:	3301      	adds	r3, #1
 800662e:	d003      	beq.n	8006638 <_fwalk_reent+0x38>
 8006630:	4629      	mov	r1, r5
 8006632:	4640      	mov	r0, r8
 8006634:	47c8      	blx	r9
 8006636:	4306      	orrs	r6, r0
 8006638:	3568      	adds	r5, #104	; 0x68
 800663a:	e7ee      	b.n	800661a <_fwalk_reent+0x1a>

0800663c <__locale_ctype_ptr_l>:
 800663c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006640:	4770      	bx	lr

08006642 <__swhatbuf_r>:
 8006642:	b570      	push	{r4, r5, r6, lr}
 8006644:	460e      	mov	r6, r1
 8006646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800664a:	2900      	cmp	r1, #0
 800664c:	b096      	sub	sp, #88	; 0x58
 800664e:	4614      	mov	r4, r2
 8006650:	461d      	mov	r5, r3
 8006652:	da07      	bge.n	8006664 <__swhatbuf_r+0x22>
 8006654:	2300      	movs	r3, #0
 8006656:	602b      	str	r3, [r5, #0]
 8006658:	89b3      	ldrh	r3, [r6, #12]
 800665a:	061a      	lsls	r2, r3, #24
 800665c:	d410      	bmi.n	8006680 <__swhatbuf_r+0x3e>
 800665e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006662:	e00e      	b.n	8006682 <__swhatbuf_r+0x40>
 8006664:	466a      	mov	r2, sp
 8006666:	f000 f9d1 	bl	8006a0c <_fstat_r>
 800666a:	2800      	cmp	r0, #0
 800666c:	dbf2      	blt.n	8006654 <__swhatbuf_r+0x12>
 800666e:	9a01      	ldr	r2, [sp, #4]
 8006670:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006674:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006678:	425a      	negs	r2, r3
 800667a:	415a      	adcs	r2, r3
 800667c:	602a      	str	r2, [r5, #0]
 800667e:	e7ee      	b.n	800665e <__swhatbuf_r+0x1c>
 8006680:	2340      	movs	r3, #64	; 0x40
 8006682:	2000      	movs	r0, #0
 8006684:	6023      	str	r3, [r4, #0]
 8006686:	b016      	add	sp, #88	; 0x58
 8006688:	bd70      	pop	{r4, r5, r6, pc}
	...

0800668c <__smakebuf_r>:
 800668c:	898b      	ldrh	r3, [r1, #12]
 800668e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006690:	079d      	lsls	r5, r3, #30
 8006692:	4606      	mov	r6, r0
 8006694:	460c      	mov	r4, r1
 8006696:	d507      	bpl.n	80066a8 <__smakebuf_r+0x1c>
 8006698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800669c:	6023      	str	r3, [r4, #0]
 800669e:	6123      	str	r3, [r4, #16]
 80066a0:	2301      	movs	r3, #1
 80066a2:	6163      	str	r3, [r4, #20]
 80066a4:	b002      	add	sp, #8
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	ab01      	add	r3, sp, #4
 80066aa:	466a      	mov	r2, sp
 80066ac:	f7ff ffc9 	bl	8006642 <__swhatbuf_r>
 80066b0:	9900      	ldr	r1, [sp, #0]
 80066b2:	4605      	mov	r5, r0
 80066b4:	4630      	mov	r0, r6
 80066b6:	f000 f889 	bl	80067cc <_malloc_r>
 80066ba:	b948      	cbnz	r0, 80066d0 <__smakebuf_r+0x44>
 80066bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066c0:	059a      	lsls	r2, r3, #22
 80066c2:	d4ef      	bmi.n	80066a4 <__smakebuf_r+0x18>
 80066c4:	f023 0303 	bic.w	r3, r3, #3
 80066c8:	f043 0302 	orr.w	r3, r3, #2
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	e7e3      	b.n	8006698 <__smakebuf_r+0xc>
 80066d0:	4b0d      	ldr	r3, [pc, #52]	; (8006708 <__smakebuf_r+0x7c>)
 80066d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	6020      	str	r0, [r4, #0]
 80066d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066dc:	81a3      	strh	r3, [r4, #12]
 80066de:	9b00      	ldr	r3, [sp, #0]
 80066e0:	6163      	str	r3, [r4, #20]
 80066e2:	9b01      	ldr	r3, [sp, #4]
 80066e4:	6120      	str	r0, [r4, #16]
 80066e6:	b15b      	cbz	r3, 8006700 <__smakebuf_r+0x74>
 80066e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ec:	4630      	mov	r0, r6
 80066ee:	f000 f99f 	bl	8006a30 <_isatty_r>
 80066f2:	b128      	cbz	r0, 8006700 <__smakebuf_r+0x74>
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	f023 0303 	bic.w	r3, r3, #3
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	81a3      	strh	r3, [r4, #12]
 8006700:	89a3      	ldrh	r3, [r4, #12]
 8006702:	431d      	orrs	r5, r3
 8006704:	81a5      	strh	r5, [r4, #12]
 8006706:	e7cd      	b.n	80066a4 <__smakebuf_r+0x18>
 8006708:	080064f1 	.word	0x080064f1

0800670c <__ascii_mbtowc>:
 800670c:	b082      	sub	sp, #8
 800670e:	b901      	cbnz	r1, 8006712 <__ascii_mbtowc+0x6>
 8006710:	a901      	add	r1, sp, #4
 8006712:	b142      	cbz	r2, 8006726 <__ascii_mbtowc+0x1a>
 8006714:	b14b      	cbz	r3, 800672a <__ascii_mbtowc+0x1e>
 8006716:	7813      	ldrb	r3, [r2, #0]
 8006718:	600b      	str	r3, [r1, #0]
 800671a:	7812      	ldrb	r2, [r2, #0]
 800671c:	1c10      	adds	r0, r2, #0
 800671e:	bf18      	it	ne
 8006720:	2001      	movne	r0, #1
 8006722:	b002      	add	sp, #8
 8006724:	4770      	bx	lr
 8006726:	4610      	mov	r0, r2
 8006728:	e7fb      	b.n	8006722 <__ascii_mbtowc+0x16>
 800672a:	f06f 0001 	mvn.w	r0, #1
 800672e:	e7f8      	b.n	8006722 <__ascii_mbtowc+0x16>

08006730 <_free_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4605      	mov	r5, r0
 8006734:	2900      	cmp	r1, #0
 8006736:	d045      	beq.n	80067c4 <_free_r+0x94>
 8006738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800673c:	1f0c      	subs	r4, r1, #4
 800673e:	2b00      	cmp	r3, #0
 8006740:	bfb8      	it	lt
 8006742:	18e4      	addlt	r4, r4, r3
 8006744:	f000 f996 	bl	8006a74 <__malloc_lock>
 8006748:	4a1f      	ldr	r2, [pc, #124]	; (80067c8 <_free_r+0x98>)
 800674a:	6813      	ldr	r3, [r2, #0]
 800674c:	4610      	mov	r0, r2
 800674e:	b933      	cbnz	r3, 800675e <_free_r+0x2e>
 8006750:	6063      	str	r3, [r4, #4]
 8006752:	6014      	str	r4, [r2, #0]
 8006754:	4628      	mov	r0, r5
 8006756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800675a:	f000 b98c 	b.w	8006a76 <__malloc_unlock>
 800675e:	42a3      	cmp	r3, r4
 8006760:	d90c      	bls.n	800677c <_free_r+0x4c>
 8006762:	6821      	ldr	r1, [r4, #0]
 8006764:	1862      	adds	r2, r4, r1
 8006766:	4293      	cmp	r3, r2
 8006768:	bf04      	itt	eq
 800676a:	681a      	ldreq	r2, [r3, #0]
 800676c:	685b      	ldreq	r3, [r3, #4]
 800676e:	6063      	str	r3, [r4, #4]
 8006770:	bf04      	itt	eq
 8006772:	1852      	addeq	r2, r2, r1
 8006774:	6022      	streq	r2, [r4, #0]
 8006776:	6004      	str	r4, [r0, #0]
 8006778:	e7ec      	b.n	8006754 <_free_r+0x24>
 800677a:	4613      	mov	r3, r2
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	b10a      	cbz	r2, 8006784 <_free_r+0x54>
 8006780:	42a2      	cmp	r2, r4
 8006782:	d9fa      	bls.n	800677a <_free_r+0x4a>
 8006784:	6819      	ldr	r1, [r3, #0]
 8006786:	1858      	adds	r0, r3, r1
 8006788:	42a0      	cmp	r0, r4
 800678a:	d10b      	bne.n	80067a4 <_free_r+0x74>
 800678c:	6820      	ldr	r0, [r4, #0]
 800678e:	4401      	add	r1, r0
 8006790:	1858      	adds	r0, r3, r1
 8006792:	4282      	cmp	r2, r0
 8006794:	6019      	str	r1, [r3, #0]
 8006796:	d1dd      	bne.n	8006754 <_free_r+0x24>
 8006798:	6810      	ldr	r0, [r2, #0]
 800679a:	6852      	ldr	r2, [r2, #4]
 800679c:	605a      	str	r2, [r3, #4]
 800679e:	4401      	add	r1, r0
 80067a0:	6019      	str	r1, [r3, #0]
 80067a2:	e7d7      	b.n	8006754 <_free_r+0x24>
 80067a4:	d902      	bls.n	80067ac <_free_r+0x7c>
 80067a6:	230c      	movs	r3, #12
 80067a8:	602b      	str	r3, [r5, #0]
 80067aa:	e7d3      	b.n	8006754 <_free_r+0x24>
 80067ac:	6820      	ldr	r0, [r4, #0]
 80067ae:	1821      	adds	r1, r4, r0
 80067b0:	428a      	cmp	r2, r1
 80067b2:	bf04      	itt	eq
 80067b4:	6811      	ldreq	r1, [r2, #0]
 80067b6:	6852      	ldreq	r2, [r2, #4]
 80067b8:	6062      	str	r2, [r4, #4]
 80067ba:	bf04      	itt	eq
 80067bc:	1809      	addeq	r1, r1, r0
 80067be:	6021      	streq	r1, [r4, #0]
 80067c0:	605c      	str	r4, [r3, #4]
 80067c2:	e7c7      	b.n	8006754 <_free_r+0x24>
 80067c4:	bd38      	pop	{r3, r4, r5, pc}
 80067c6:	bf00      	nop
 80067c8:	20001614 	.word	0x20001614

080067cc <_malloc_r>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	1ccd      	adds	r5, r1, #3
 80067d0:	f025 0503 	bic.w	r5, r5, #3
 80067d4:	3508      	adds	r5, #8
 80067d6:	2d0c      	cmp	r5, #12
 80067d8:	bf38      	it	cc
 80067da:	250c      	movcc	r5, #12
 80067dc:	2d00      	cmp	r5, #0
 80067de:	4606      	mov	r6, r0
 80067e0:	db01      	blt.n	80067e6 <_malloc_r+0x1a>
 80067e2:	42a9      	cmp	r1, r5
 80067e4:	d903      	bls.n	80067ee <_malloc_r+0x22>
 80067e6:	230c      	movs	r3, #12
 80067e8:	6033      	str	r3, [r6, #0]
 80067ea:	2000      	movs	r0, #0
 80067ec:	bd70      	pop	{r4, r5, r6, pc}
 80067ee:	f000 f941 	bl	8006a74 <__malloc_lock>
 80067f2:	4a21      	ldr	r2, [pc, #132]	; (8006878 <_malloc_r+0xac>)
 80067f4:	6814      	ldr	r4, [r2, #0]
 80067f6:	4621      	mov	r1, r4
 80067f8:	b991      	cbnz	r1, 8006820 <_malloc_r+0x54>
 80067fa:	4c20      	ldr	r4, [pc, #128]	; (800687c <_malloc_r+0xb0>)
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	b91b      	cbnz	r3, 8006808 <_malloc_r+0x3c>
 8006800:	4630      	mov	r0, r6
 8006802:	f000 f83d 	bl	8006880 <_sbrk_r>
 8006806:	6020      	str	r0, [r4, #0]
 8006808:	4629      	mov	r1, r5
 800680a:	4630      	mov	r0, r6
 800680c:	f000 f838 	bl	8006880 <_sbrk_r>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	d124      	bne.n	800685e <_malloc_r+0x92>
 8006814:	230c      	movs	r3, #12
 8006816:	6033      	str	r3, [r6, #0]
 8006818:	4630      	mov	r0, r6
 800681a:	f000 f92c 	bl	8006a76 <__malloc_unlock>
 800681e:	e7e4      	b.n	80067ea <_malloc_r+0x1e>
 8006820:	680b      	ldr	r3, [r1, #0]
 8006822:	1b5b      	subs	r3, r3, r5
 8006824:	d418      	bmi.n	8006858 <_malloc_r+0x8c>
 8006826:	2b0b      	cmp	r3, #11
 8006828:	d90f      	bls.n	800684a <_malloc_r+0x7e>
 800682a:	600b      	str	r3, [r1, #0]
 800682c:	50cd      	str	r5, [r1, r3]
 800682e:	18cc      	adds	r4, r1, r3
 8006830:	4630      	mov	r0, r6
 8006832:	f000 f920 	bl	8006a76 <__malloc_unlock>
 8006836:	f104 000b 	add.w	r0, r4, #11
 800683a:	1d23      	adds	r3, r4, #4
 800683c:	f020 0007 	bic.w	r0, r0, #7
 8006840:	1ac3      	subs	r3, r0, r3
 8006842:	d0d3      	beq.n	80067ec <_malloc_r+0x20>
 8006844:	425a      	negs	r2, r3
 8006846:	50e2      	str	r2, [r4, r3]
 8006848:	e7d0      	b.n	80067ec <_malloc_r+0x20>
 800684a:	428c      	cmp	r4, r1
 800684c:	684b      	ldr	r3, [r1, #4]
 800684e:	bf16      	itet	ne
 8006850:	6063      	strne	r3, [r4, #4]
 8006852:	6013      	streq	r3, [r2, #0]
 8006854:	460c      	movne	r4, r1
 8006856:	e7eb      	b.n	8006830 <_malloc_r+0x64>
 8006858:	460c      	mov	r4, r1
 800685a:	6849      	ldr	r1, [r1, #4]
 800685c:	e7cc      	b.n	80067f8 <_malloc_r+0x2c>
 800685e:	1cc4      	adds	r4, r0, #3
 8006860:	f024 0403 	bic.w	r4, r4, #3
 8006864:	42a0      	cmp	r0, r4
 8006866:	d005      	beq.n	8006874 <_malloc_r+0xa8>
 8006868:	1a21      	subs	r1, r4, r0
 800686a:	4630      	mov	r0, r6
 800686c:	f000 f808 	bl	8006880 <_sbrk_r>
 8006870:	3001      	adds	r0, #1
 8006872:	d0cf      	beq.n	8006814 <_malloc_r+0x48>
 8006874:	6025      	str	r5, [r4, #0]
 8006876:	e7db      	b.n	8006830 <_malloc_r+0x64>
 8006878:	20001614 	.word	0x20001614
 800687c:	20001618 	.word	0x20001618

08006880 <_sbrk_r>:
 8006880:	b538      	push	{r3, r4, r5, lr}
 8006882:	4c06      	ldr	r4, [pc, #24]	; (800689c <_sbrk_r+0x1c>)
 8006884:	2300      	movs	r3, #0
 8006886:	4605      	mov	r5, r0
 8006888:	4608      	mov	r0, r1
 800688a:	6023      	str	r3, [r4, #0]
 800688c:	f7fb fe02 	bl	8002494 <_sbrk>
 8006890:	1c43      	adds	r3, r0, #1
 8006892:	d102      	bne.n	800689a <_sbrk_r+0x1a>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	b103      	cbz	r3, 800689a <_sbrk_r+0x1a>
 8006898:	602b      	str	r3, [r5, #0]
 800689a:	bd38      	pop	{r3, r4, r5, pc}
 800689c:	20001824 	.word	0x20001824

080068a0 <_raise_r>:
 80068a0:	291f      	cmp	r1, #31
 80068a2:	b538      	push	{r3, r4, r5, lr}
 80068a4:	4604      	mov	r4, r0
 80068a6:	460d      	mov	r5, r1
 80068a8:	d904      	bls.n	80068b4 <_raise_r+0x14>
 80068aa:	2316      	movs	r3, #22
 80068ac:	6003      	str	r3, [r0, #0]
 80068ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80068b6:	b112      	cbz	r2, 80068be <_raise_r+0x1e>
 80068b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068bc:	b94b      	cbnz	r3, 80068d2 <_raise_r+0x32>
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 f830 	bl	8006924 <_getpid_r>
 80068c4:	462a      	mov	r2, r5
 80068c6:	4601      	mov	r1, r0
 80068c8:	4620      	mov	r0, r4
 80068ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ce:	f000 b817 	b.w	8006900 <_kill_r>
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d00a      	beq.n	80068ec <_raise_r+0x4c>
 80068d6:	1c59      	adds	r1, r3, #1
 80068d8:	d103      	bne.n	80068e2 <_raise_r+0x42>
 80068da:	2316      	movs	r3, #22
 80068dc:	6003      	str	r3, [r0, #0]
 80068de:	2001      	movs	r0, #1
 80068e0:	e7e7      	b.n	80068b2 <_raise_r+0x12>
 80068e2:	2400      	movs	r4, #0
 80068e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80068e8:	4628      	mov	r0, r5
 80068ea:	4798      	blx	r3
 80068ec:	2000      	movs	r0, #0
 80068ee:	e7e0      	b.n	80068b2 <_raise_r+0x12>

080068f0 <raise>:
 80068f0:	4b02      	ldr	r3, [pc, #8]	; (80068fc <raise+0xc>)
 80068f2:	4601      	mov	r1, r0
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	f7ff bfd3 	b.w	80068a0 <_raise_r>
 80068fa:	bf00      	nop
 80068fc:	2000000c 	.word	0x2000000c

08006900 <_kill_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	4c07      	ldr	r4, [pc, #28]	; (8006920 <_kill_r+0x20>)
 8006904:	2300      	movs	r3, #0
 8006906:	4605      	mov	r5, r0
 8006908:	4608      	mov	r0, r1
 800690a:	4611      	mov	r1, r2
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	f7fb fd39 	bl	8002384 <_kill>
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	d102      	bne.n	800691c <_kill_r+0x1c>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	b103      	cbz	r3, 800691c <_kill_r+0x1c>
 800691a:	602b      	str	r3, [r5, #0]
 800691c:	bd38      	pop	{r3, r4, r5, pc}
 800691e:	bf00      	nop
 8006920:	20001824 	.word	0x20001824

08006924 <_getpid_r>:
 8006924:	f7fb bd26 	b.w	8002374 <_getpid>

08006928 <__sread>:
 8006928:	b510      	push	{r4, lr}
 800692a:	460c      	mov	r4, r1
 800692c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006930:	f000 f8a2 	bl	8006a78 <_read_r>
 8006934:	2800      	cmp	r0, #0
 8006936:	bfab      	itete	ge
 8006938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800693a:	89a3      	ldrhlt	r3, [r4, #12]
 800693c:	181b      	addge	r3, r3, r0
 800693e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006942:	bfac      	ite	ge
 8006944:	6563      	strge	r3, [r4, #84]	; 0x54
 8006946:	81a3      	strhlt	r3, [r4, #12]
 8006948:	bd10      	pop	{r4, pc}

0800694a <__swrite>:
 800694a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800694e:	461f      	mov	r7, r3
 8006950:	898b      	ldrh	r3, [r1, #12]
 8006952:	05db      	lsls	r3, r3, #23
 8006954:	4605      	mov	r5, r0
 8006956:	460c      	mov	r4, r1
 8006958:	4616      	mov	r6, r2
 800695a:	d505      	bpl.n	8006968 <__swrite+0x1e>
 800695c:	2302      	movs	r3, #2
 800695e:	2200      	movs	r2, #0
 8006960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006964:	f000 f874 	bl	8006a50 <_lseek_r>
 8006968:	89a3      	ldrh	r3, [r4, #12]
 800696a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800696e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006972:	81a3      	strh	r3, [r4, #12]
 8006974:	4632      	mov	r2, r6
 8006976:	463b      	mov	r3, r7
 8006978:	4628      	mov	r0, r5
 800697a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800697e:	f000 b823 	b.w	80069c8 <_write_r>

08006982 <__sseek>:
 8006982:	b510      	push	{r4, lr}
 8006984:	460c      	mov	r4, r1
 8006986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800698a:	f000 f861 	bl	8006a50 <_lseek_r>
 800698e:	1c43      	adds	r3, r0, #1
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	bf15      	itete	ne
 8006994:	6560      	strne	r0, [r4, #84]	; 0x54
 8006996:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800699a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800699e:	81a3      	strheq	r3, [r4, #12]
 80069a0:	bf18      	it	ne
 80069a2:	81a3      	strhne	r3, [r4, #12]
 80069a4:	bd10      	pop	{r4, pc}

080069a6 <__sclose>:
 80069a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069aa:	f000 b81f 	b.w	80069ec <_close_r>

080069ae <__ascii_wctomb>:
 80069ae:	b149      	cbz	r1, 80069c4 <__ascii_wctomb+0x16>
 80069b0:	2aff      	cmp	r2, #255	; 0xff
 80069b2:	bf85      	ittet	hi
 80069b4:	238a      	movhi	r3, #138	; 0x8a
 80069b6:	6003      	strhi	r3, [r0, #0]
 80069b8:	700a      	strbls	r2, [r1, #0]
 80069ba:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80069be:	bf98      	it	ls
 80069c0:	2001      	movls	r0, #1
 80069c2:	4770      	bx	lr
 80069c4:	4608      	mov	r0, r1
 80069c6:	4770      	bx	lr

080069c8 <_write_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4c07      	ldr	r4, [pc, #28]	; (80069e8 <_write_r+0x20>)
 80069cc:	4605      	mov	r5, r0
 80069ce:	4608      	mov	r0, r1
 80069d0:	4611      	mov	r1, r2
 80069d2:	2200      	movs	r2, #0
 80069d4:	6022      	str	r2, [r4, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	f7fb fd0b 	bl	80023f2 <_write>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_write_r+0x1e>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_write_r+0x1e>
 80069e4:	602b      	str	r3, [r5, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	20001824 	.word	0x20001824

080069ec <_close_r>:
 80069ec:	b538      	push	{r3, r4, r5, lr}
 80069ee:	4c06      	ldr	r4, [pc, #24]	; (8006a08 <_close_r+0x1c>)
 80069f0:	2300      	movs	r3, #0
 80069f2:	4605      	mov	r5, r0
 80069f4:	4608      	mov	r0, r1
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	f7fb fd17 	bl	800242a <_close>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d102      	bne.n	8006a06 <_close_r+0x1a>
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	b103      	cbz	r3, 8006a06 <_close_r+0x1a>
 8006a04:	602b      	str	r3, [r5, #0]
 8006a06:	bd38      	pop	{r3, r4, r5, pc}
 8006a08:	20001824 	.word	0x20001824

08006a0c <_fstat_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4c07      	ldr	r4, [pc, #28]	; (8006a2c <_fstat_r+0x20>)
 8006a10:	2300      	movs	r3, #0
 8006a12:	4605      	mov	r5, r0
 8006a14:	4608      	mov	r0, r1
 8006a16:	4611      	mov	r1, r2
 8006a18:	6023      	str	r3, [r4, #0]
 8006a1a:	f7fb fd12 	bl	8002442 <_fstat>
 8006a1e:	1c43      	adds	r3, r0, #1
 8006a20:	d102      	bne.n	8006a28 <_fstat_r+0x1c>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	b103      	cbz	r3, 8006a28 <_fstat_r+0x1c>
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	bd38      	pop	{r3, r4, r5, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20001824 	.word	0x20001824

08006a30 <_isatty_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4c06      	ldr	r4, [pc, #24]	; (8006a4c <_isatty_r+0x1c>)
 8006a34:	2300      	movs	r3, #0
 8006a36:	4605      	mov	r5, r0
 8006a38:	4608      	mov	r0, r1
 8006a3a:	6023      	str	r3, [r4, #0]
 8006a3c:	f7fb fd11 	bl	8002462 <_isatty>
 8006a40:	1c43      	adds	r3, r0, #1
 8006a42:	d102      	bne.n	8006a4a <_isatty_r+0x1a>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	b103      	cbz	r3, 8006a4a <_isatty_r+0x1a>
 8006a48:	602b      	str	r3, [r5, #0]
 8006a4a:	bd38      	pop	{r3, r4, r5, pc}
 8006a4c:	20001824 	.word	0x20001824

08006a50 <_lseek_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4c07      	ldr	r4, [pc, #28]	; (8006a70 <_lseek_r+0x20>)
 8006a54:	4605      	mov	r5, r0
 8006a56:	4608      	mov	r0, r1
 8006a58:	4611      	mov	r1, r2
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	6022      	str	r2, [r4, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f7fb fd0a 	bl	8002478 <_lseek>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d102      	bne.n	8006a6e <_lseek_r+0x1e>
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	b103      	cbz	r3, 8006a6e <_lseek_r+0x1e>
 8006a6c:	602b      	str	r3, [r5, #0]
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	20001824 	.word	0x20001824

08006a74 <__malloc_lock>:
 8006a74:	4770      	bx	lr

08006a76 <__malloc_unlock>:
 8006a76:	4770      	bx	lr

08006a78 <_read_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4c07      	ldr	r4, [pc, #28]	; (8006a98 <_read_r+0x20>)
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	4608      	mov	r0, r1
 8006a80:	4611      	mov	r1, r2
 8006a82:	2200      	movs	r2, #0
 8006a84:	6022      	str	r2, [r4, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f7fb fc96 	bl	80023b8 <_read>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d102      	bne.n	8006a96 <_read_r+0x1e>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	b103      	cbz	r3, 8006a96 <_read_r+0x1e>
 8006a94:	602b      	str	r3, [r5, #0]
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	20001824 	.word	0x20001824

08006a9c <_init>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	bf00      	nop
 8006aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa2:	bc08      	pop	{r3}
 8006aa4:	469e      	mov	lr, r3
 8006aa6:	4770      	bx	lr

08006aa8 <_fini>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	bf00      	nop
 8006aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aae:	bc08      	pop	{r3}
 8006ab0:	469e      	mov	lr, r3
 8006ab2:	4770      	bx	lr
